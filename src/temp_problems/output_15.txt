INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_15.pddl --sas-file temp_problems/sas_plan_15
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.016s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
529 relevant atoms
193 auxiliary atoms
722 final queue length
983 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.016s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
14 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.006s wall-clock]
Reordering and filtering variables...
14 of 14 variables necessary.
0 of 14 mutex groups necessary.
328 of 328 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 14
Translator derived variables: 0
Translator facts: 97
Translator goal facts: 9
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 328
Translator axioms: 0
Translator task size: 1392
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.037s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_15
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_15 < temp_problems/sas_plan_15
[t=2.99e-05s, 732 KB] reading input...
[t=0.0014134s, 792 KB] done reading input!
[t=0.0027417s, 1148 KB] Initializing landmark count heuristic...
[t=0.0027651s, 1156 KB] Generating landmark graph...
[t=0.0027929s, 1156 KB] Building a landmark graph with reasonable orders.
[t=0.0028761s, 1156 KB] Initializing Exploration...
[t=0.0030301s, 1208 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0038196s, 1248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0038717s, 1248 KB] Landmarks generation time: 0.0010278s
[t=0.0038899s, 1248 KB] Discovered 28 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0038973s, 1248 KB] 20 edges
[t=0.0039043s, 1248 KB] approx. reasonable orders
[t=0.0039552s, 1248 KB] approx. obedient reasonable orders
[t=0.0039769s, 1248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0039844s, 1248 KB] Landmarks generation time: 0.0012139s
[t=0.0039919s, 1248 KB] Discovered 28 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0040042s, 1248 KB] 20 edges
[t=0.004012s, 1248 KB] Landmark graph generation time: 0.0012488s
[t=0.0040189s, 1248 KB] Landmark graph contains 28 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0040388s, 1248 KB] Landmark graph contains 20 orderings.
[t=0.0041336s, 1248 KB] Simplifying 328 unary operators... done! [328 unary operators]
[t=0.0042398s, 1248 KB] time to simplify: 0.000108s
[t=0.00427s, 1248 KB] Initializing additive heuristic...
[t=0.0042764s, 1248 KB] Initializing FF heuristic...
[t=0.0043302s, 1248 KB] Building successor generator...done!
[t=0.0044511s, 1260 KB] peak memory difference for successor generator creation: 12 KB
[t=0.0044593s, 1260 KB] time for successor generation creation: 0.0001084s
[t=0.0044681s, 1260 KB] Variables: 14
[t=0.0044744s, 1260 KB] FactPairs: 97
[t=0.0044803s, 1260 KB] Bytes per state: 8
[t=0.0046748s, 1272 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.004688s, 1272 KB] 9 initial landmarks, 9 goal landmarks
[t=0.0047172s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.004724s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0047306s, 1272 KB] g=0, 1 evaluated, 0 expanded
[t=0.004753s, 1272 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0047595s, 1272 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0047741s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0047804s, 1272 KB] g=1, 2 evaluated, 1 expanded
[t=0.0048038s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0048102s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0048164s, 1272 KB] g=2, 3 evaluated, 2 expanded
[t=0.0048689s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0048752s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0048813s, 1272 KB] g=3, 6 evaluated, 5 expanded
[t=0.0049312s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0049415s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0049482s, 1272 KB] g=4, 9 evaluated, 8 expanded
[t=0.0049685s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0049748s, 1272 KB] g=5, 10 evaluated, 9 expanded
[t=0.0050009s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0050073s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0050153s, 1272 KB] g=6, 11 evaluated, 10 expanded
[t=0.0050351s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0050428s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0050544s, 1272 KB] g=7, 12 evaluated, 11 expanded
[t=0.0051061s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.005113s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0051191s, 1272 KB] g=8, 15 evaluated, 14 expanded
[t=0.0051697s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0051761s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0051847s, 1272 KB] g=10, 18 evaluated, 17 expanded
[t=0.0052355s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0052433s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0052496s, 1272 KB] g=12, 21 evaluated, 20 expanded
[t=0.0052976s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.005304s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0053105s, 1272 KB] g=13, 24 evaluated, 23 expanded
[t=0.0053584s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0053645s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0053731s, 1272 KB] g=14, 27 evaluated, 26 expanded
[t=0.0054249s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0054344s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.005441s, 1272 KB] g=15, 30 evaluated, 29 expanded
[t=0.0054991s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0055067s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0055258s, 1272 KB] g=16, 33 evaluated, 32 expanded
[t=0.0055971s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0056091s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.005618s, 1272 KB] g=17, 36 evaluated, 35 expanded
[t=0.0056883s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0056986s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0057076s, 1272 KB] g=18, 39 evaluated, 38 expanded
[t=0.0057368s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0057454s, 1272 KB] g=19, 40 evaluated, 39 expanded
[t=0.0057892s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0058003s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0058087s, 1272 KB] g=20, 42 evaluated, 41 expanded
[t=0.0058573s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.005867s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0058782s, 1272 KB] g=21, 44 evaluated, 43 expanded
[t=0.0059354s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0059634s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0059708s, 1272 KB] g=22, 46 evaluated, 45 expanded
[t=0.0059957s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0060024s, 1272 KB] g=23, 47 evaluated, 46 expanded
[t=0.0060212s, 1272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.006028s, 1272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0060355s, 1272 KB] g=24, 48 evaluated, 47 expanded
[t=0.0060531s, 1272 KB] Solution found!
[t=0.0060606s, 1272 KB] Actual search time: 0.001367s
fly obj8 obj2 obj0 (1)
fly obj8 obj0 obj18 (1)
load obj4 obj7 obj0 (1)
load obj4 obj19 obj0 (1)
fly obj4 obj0 obj18 (1)
unload obj4 obj7 obj18 (1)
unload obj4 obj19 obj18 (1)
load obj16 obj17 obj13 (1)
fly obj16 obj13 obj0 (1)
load obj16 obj10 obj0 (1)
fly obj16 obj0 obj2 (1)
load obj16 obj9 obj2 (1)
unload obj16 obj17 obj2 (1)
load obj16 obj15 obj2 (1)
load obj16 obj14 obj2 (1)
load obj16 obj12 obj2 (1)
load obj16 obj11 obj2 (1)
unload obj16 obj10 obj2 (1)
fly obj16 obj2 obj0 (1)
unload obj16 obj15 obj0 (1)
unload obj16 obj14 obj0 (1)
unload obj16 obj11 obj0 (1)
fly obj16 obj0 obj13 (1)
unload obj16 obj9 obj13 (1)
unload obj16 obj12 obj13 (1)
[t=0.0060686s, 1272 KB] Plan length: 25 step(s).
[t=0.0060686s, 1272 KB] Plan cost: 25
[t=0.0060686s, 1272 KB] Expanded 48 state(s).
[t=0.0060686s, 1272 KB] Reopened 0 state(s).
[t=0.0060686s, 1272 KB] Evaluated 49 state(s).
[t=0.0060686s, 1272 KB] Evaluations: 98
[t=0.0060686s, 1272 KB] Generated 1107 state(s).
[t=0.0060686s, 1272 KB] Dead ends: 0 state(s).
[t=0.0060686s, 1272 KB] Number of registered states: 49
[t=0.0060686s, 1272 KB] Int hash set load factor: 49/64 = 0.765625
[t=0.0060686s, 1272 KB] Int hash set resizes: 6
[t=0.0060686s, 1272 KB] Search time: 0.0013945s
[t=0.0060686s, 1272 KB] Total time: 0.0060686s
Solution found.
search exit code: 0

