INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_15.pddl --sas-file temp_problems/sas_plan_15
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.008s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.005s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
230 relevant atoms
95 auxiliary atoms
325 final queue length
377 total queue pushes
Completing instantiation... [0.000s CPU, 0.004s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.006s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
94 of 94 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 58
Translator goal facts: 9
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 94
Translator axioms: 0
Translator task size: 432
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.003s wall-clock]
Done! [0.000s CPU, 0.041s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_15
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_15 < temp_problems/sas_plan_15
[t=1.61e-05s, 724 KB] reading input...
[t=0.0010304s, 744 KB] done reading input!
[t=0.0037644s, 1080 KB] Initializing landmark count heuristic...
[t=0.0037937s, 1088 KB] Generating landmark graph...
[t=0.0038179s, 1088 KB] Building a landmark graph with reasonable orders.
[t=0.0039132s, 1092 KB] Initializing Exploration...
[t=0.0040413s, 1108 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.004834s, 1136 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0048603s, 1136 KB] Landmarks generation time: 0.0009959s
[t=0.0048718s, 1136 KB] Discovered 31 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0048828s, 1136 KB] 55 edges
[t=0.004892s, 1136 KB] approx. reasonable orders
[t=0.005122s, 1136 KB] approx. obedient reasonable orders
[t=0.0051613s, 1136 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.005173s, 1136 KB] Landmarks generation time: 0.0013745s
[t=0.0051824s, 1136 KB] Discovered 31 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0051924s, 1136 KB] 55 edges
[t=0.0052006s, 1136 KB] Landmark graph generation time: 0.0014112s
[t=0.0052098s, 1136 KB] Landmark graph contains 31 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0052195s, 1136 KB] Landmark graph contains 55 orderings.
[t=0.005332s, 1136 KB] Simplifying 94 unary operators... done! [94 unary operators]
[t=0.0054118s, 1136 KB] time to simplify: 8.56e-05s
[t=0.0054556s, 1148 KB] Initializing additive heuristic...
[t=0.0054685s, 1148 KB] Initializing FF heuristic...
[t=0.0055812s, 1148 KB] Building successor generator...done!
[t=0.0056828s, 1148 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0056931s, 1148 KB] time for successor generation creation: 7.95e-05s
[t=0.0057053s, 1148 KB] Variables: 11
[t=0.005714s, 1148 KB] FactPairs: 58
[t=0.0057224s, 1148 KB] Bytes per state: 4
[t=0.00604s, 1168 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0060626s, 1168 KB] 11 initial landmarks, 9 goal landmarks
[t=0.0061008s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0061125s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0061216s, 1168 KB] g=0, 1 evaluated, 0 expanded
[t=0.0061433s, 1168 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0061528s, 1168 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0062345s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0062476s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.006257s, 1168 KB] g=1, 5 evaluated, 4 expanded
[t=0.0063256s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.006339s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0063482s, 1168 KB] g=3, 8 evaluated, 7 expanded
[t=0.0064006s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0064122s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0064213s, 1168 KB] g=4, 10 evaluated, 9 expanded
[t=0.0064726s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.006485s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0064945s, 1168 KB] g=5, 12 evaluated, 11 expanded
[t=0.006548s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0065595s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0065684s, 1168 KB] g=6, 14 evaluated, 13 expanded
[t=0.0066231s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0066346s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0066431s, 1168 KB] g=7, 16 evaluated, 15 expanded
[t=0.0067534s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0067698s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0067797s, 1168 KB] g=8, 18 evaluated, 17 expanded
[t=0.0068413s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0068535s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.006863s, 1168 KB] g=9, 20 evaluated, 19 expanded
[t=0.0068971s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0069086s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.006918s, 1168 KB] g=10, 21 evaluated, 20 expanded
[t=0.0069573s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0069691s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0069784s, 1168 KB] g=11, 22 evaluated, 21 expanded
[t=0.0070162s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0070277s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0070372s, 1168 KB] g=12, 23 evaluated, 22 expanded
[t=0.0070765s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0070879s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0070967s, 1168 KB] g=13, 24 evaluated, 23 expanded
[t=0.0071678s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0071885s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0071985s, 1168 KB] g=14, 25 evaluated, 24 expanded
[t=0.0072415s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0072543s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0072628s, 1168 KB] g=15, 26 evaluated, 25 expanded
[t=0.0073033s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.007321s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.007331s, 1168 KB] g=16, 27 evaluated, 26 expanded
[t=0.0073683s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0073776s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0073861s, 1168 KB] g=17, 28 evaluated, 27 expanded
[t=0.0074424s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0074521s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0074602s, 1168 KB] g=19, 30 evaluated, 29 expanded
[t=0.0075208s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0075322s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0075414s, 1168 KB] g=20, 32 evaluated, 31 expanded
[t=0.0075776s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0075878s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0075956s, 1168 KB] g=21, 33 evaluated, 32 expanded
[t=0.0076296s, 1168 KB] Solution found!
[t=0.0076407s, 1168 KB] Actual search time: 0.0015702s
load obj11 obj4 obj0 (1)
drive obj8 obj0 obj6 (1)
load obj8 obj7 obj6 (1)
load obj8 obj16 obj6 (1)
load obj8 obj15 obj6 (1)
load obj8 obj14 obj6 (1)
load obj8 obj13 obj6 (1)
load obj8 obj12 obj6 (1)
load obj8 obj10 obj6 (1)
drive obj8 obj6 obj0 (1)
unload obj8 obj7 obj0 (1)
unload obj8 obj16 obj0 (1)
unload obj8 obj15 obj0 (1)
unload obj8 obj14 obj0 (1)
unload obj8 obj13 obj0 (1)
unload obj8 obj12 obj0 (1)
unload obj8 obj10 obj0 (1)
fly obj11 obj0 obj2 (1)
load obj11 obj5 obj2 (1)
unload obj11 obj4 obj2 (1)
fly obj11 obj2 obj0 (1)
unload obj11 obj5 obj0 (1)
[t=0.0076499s, 1168 KB] Plan length: 22 step(s).
[t=0.0076499s, 1168 KB] Plan cost: 22
[t=0.0076499s, 1168 KB] Expanded 33 state(s).
[t=0.0076499s, 1168 KB] Reopened 0 state(s).
[t=0.0076499s, 1168 KB] Evaluated 34 state(s).
[t=0.0076499s, 1168 KB] Evaluations: 68
[t=0.0076499s, 1168 KB] Generated 354 state(s).
[t=0.0076499s, 1168 KB] Dead ends: 0 state(s).
[t=0.0076499s, 1168 KB] Number of registered states: 34
[t=0.0076499s, 1168 KB] Int hash set load factor: 34/64 = 0.53125
[t=0.0076499s, 1168 KB] Int hash set resizes: 6
[t=0.0076499s, 1168 KB] Search time: 0.0016124s
[t=0.0076499s, 1168 KB] Total time: 0.0076499s
Solution found.
search exit code: 0

