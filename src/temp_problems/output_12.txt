INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_12.pddl --sas-file temp_problems/sas_plan_12
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.016s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
297 relevant atoms
135 auxiliary atoms
432 final queue length
535 total queue pushes
Completing instantiation... [0.000s CPU, 0.003s wall-clock]
Instantiating: [0.000s CPU, 0.009s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.003s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.003s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
146 of 146 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 65
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 146
Translator axioms: 0
Translator task size: 652
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.003s wall-clock]
Done! [0.016s CPU, 0.023s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_12
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_12 < temp_problems/sas_plan_12
[t=8.8e-06s, 736 KB] reading input...
[t=0.0006003s, 760 KB] done reading input!
[t=0.0016839s, 1100 KB] Initializing landmark count heuristic...
[t=0.0017044s, 1108 KB] Generating landmark graph...
[t=0.0017206s, 1108 KB] Building a landmark graph with reasonable orders.
[t=0.001801s, 1112 KB] Initializing Exploration...
[t=0.0018825s, 1136 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0024186s, 1172 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0024408s, 1172 KB] Landmarks generation time: 0.0006583s
[t=0.0024501s, 1172 KB] Discovered 30 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0024579s, 1172 KB] 64 edges
[t=0.0024648s, 1172 KB] approx. reasonable orders
[t=0.0025189s, 1172 KB] approx. obedient reasonable orders
[t=0.0025403s, 1172 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0025483s, 1172 KB] Landmarks generation time: 0.0008376s
[t=0.0025557s, 1172 KB] Discovered 30 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0025685s, 1172 KB] 64 edges
[t=0.0025778s, 1172 KB] Landmark graph generation time: 0.0008758s
[t=0.002586s, 1172 KB] Landmark graph contains 30 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0025929s, 1172 KB] Landmark graph contains 64 orderings.
[t=0.0026674s, 1172 KB] Simplifying 146 unary operators... done! [146 unary operators]
[t=0.0027268s, 1184 KB] time to simplify: 6.15e-05s
[t=0.002753s, 1184 KB] Initializing additive heuristic...
[t=0.0027608s, 1184 KB] Initializing FF heuristic...
[t=0.0028094s, 1184 KB] Building successor generator...done!
[t=0.0028847s, 1184 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0028971s, 1184 KB] time for successor generation creation: 5.53e-05s
[t=0.0029082s, 1184 KB] Variables: 11
[t=0.0029173s, 1184 KB] FactPairs: 65
[t=0.0029264s, 1184 KB] Bytes per state: 4
[t=0.003171s, 1204 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0031892s, 1204 KB] 7 initial landmarks, 6 goal landmarks
[t=0.0032172s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0032301s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0032395s, 1204 KB] g=0, 1 evaluated, 0 expanded
[t=0.0032634s, 1204 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0032721s, 1204 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0032866s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0032936s, 1204 KB] g=1, 2 evaluated, 1 expanded
[t=0.0033508s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0033575s, 1204 KB] g=1, 6 evaluated, 5 expanded
[t=0.0033756s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0033824s, 1204 KB] g=2, 7 evaluated, 6 expanded
[t=0.0034134s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0034201s, 1204 KB] g=2, 9 evaluated, 8 expanded
[t=0.0034732s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0034801s, 1204 KB] g=3, 13 evaluated, 12 expanded
[t=0.003511s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0035179s, 1204 KB] g=3, 15 evaluated, 14 expanded
[t=0.0036s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0036074s, 1204 KB] g=4, 22 evaluated, 21 expanded
[t=0.0036742s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0036921s, 1204 KB] g=4, 23 evaluated, 22 expanded
[t=0.0037907s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0037983s, 1204 KB] g=5, 31 evaluated, 30 expanded
[t=0.0038168s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.003824s, 1204 KB] g=5, 32 evaluated, 31 expanded
[t=0.0058149s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0058285s, 1204 KB] g=6, 39 evaluated, 38 expanded
[t=0.0058595s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0058668s, 1204 KB] g=7, 41 evaluated, 40 expanded
[t=0.0059161s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0059249s, 1204 KB] g=7, 45 evaluated, 44 expanded
[t=0.0059427s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0059494s, 1204 KB] g=8, 46 evaluated, 45 expanded
[t=0.0060016s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0060085s, 1204 KB] g=8, 50 evaluated, 49 expanded
[t=0.0060251s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0060318s, 1204 KB] g=9, 51 evaluated, 50 expanded
[t=0.0060573s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0060655s, 1204 KB] g=9, 53 evaluated, 52 expanded
[t=0.0061035s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0061105s, 1204 KB] g=10, 56 evaluated, 55 expanded
[t=0.0061276s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0061402s, 1204 KB] g=11, 57 evaluated, 56 expanded
[t=0.00617s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0061777s, 1204 KB] g=11, 59 evaluated, 58 expanded
[t=0.0061974s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0062046s, 1204 KB] g=12, 60 evaluated, 59 expanded
[t=0.0062638s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0062705s, 1204 KB] g=12, 65 evaluated, 64 expanded
[t=0.0062897s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0062965s, 1204 KB] g=13, 66 evaluated, 65 expanded
[t=0.006358s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0063652s, 1204 KB] g=13, 71 evaluated, 70 expanded
[t=0.0063811s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0063878s, 1204 KB] g=14, 72 evaluated, 71 expanded
[t=0.0064418s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0064484s, 1204 KB] g=14, 77 evaluated, 76 expanded
[t=0.0064643s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0064712s, 1204 KB] g=15, 78 evaluated, 77 expanded
[t=0.0065259s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0065327s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0065396s, 1204 KB] g=16, 83 evaluated, 82 expanded
[t=0.0065758s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0065827s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0065893s, 1204 KB] g=17, 86 evaluated, 85 expanded
[t=0.0066302s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0066373s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0066439s, 1204 KB] g=18, 89 evaluated, 88 expanded
[t=0.0066806s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0066886s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0066962s, 1204 KB] g=19, 92 evaluated, 91 expanded
[t=0.0067301s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0067369s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0067433s, 1204 KB] g=20, 95 evaluated, 94 expanded
[t=0.0067614s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.006768s, 1204 KB] g=21, 96 evaluated, 95 expanded
[t=0.0067926s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0067994s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0068101s, 1204 KB] g=22, 98 evaluated, 97 expanded
[t=0.0068351s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0068418s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0068481s, 1204 KB] g=23, 100 evaluated, 99 expanded
[t=0.0068637s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0068719s, 1204 KB] g=24, 101 evaluated, 100 expanded
[t=0.0068874s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.006894s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0069004s, 1204 KB] g=25, 102 evaluated, 101 expanded
[t=0.0069158s, 1204 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.006924s, 1204 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0069304s, 1204 KB] g=26, 103 evaluated, 102 expanded
[t=0.0069486s, 1204 KB] Solution found!
[t=0.006956s, 1204 KB] Actual search time: 0.0037602s
load obj2 obj13 obj0 (1)
drive obj2 obj0 obj9 (1)
load obj2 obj16 obj9 (1)
load obj2 obj15 obj9 (1)
load obj2 obj14 obj9 (1)
unload obj2 obj13 obj9 (1)
fly obj8 obj3 obj0 (1)
load obj2 obj12 obj9 (1)
load obj2 obj11 obj9 (1)
drive obj2 obj9 obj0 (1)
unload obj2 obj16 obj0 (1)
load obj8 obj16 obj0 (1)
unload obj2 obj15 obj0 (1)
load obj8 obj15 obj0 (1)
unload obj2 obj14 obj0 (1)
load obj8 obj14 obj0 (1)
unload obj2 obj12 obj0 (1)
load obj8 obj12 obj0 (1)
unload obj2 obj11 obj0 (1)
load obj8 obj11 obj0 (1)
fly obj8 obj0 obj3 (1)
unload obj8 obj16 obj3 (1)
unload obj8 obj12 obj3 (1)
fly obj8 obj3 obj6 (1)
unload obj8 obj15 obj6 (1)
unload obj8 obj14 obj6 (1)
unload obj8 obj11 obj6 (1)
[t=0.0069627s, 1204 KB] Plan length: 27 step(s).
[t=0.0069627s, 1204 KB] Plan cost: 27
[t=0.0069627s, 1204 KB] Expanded 103 state(s).
[t=0.0069627s, 1204 KB] Reopened 0 state(s).
[t=0.0069627s, 1204 KB] Evaluated 104 state(s).
[t=0.0069627s, 1204 KB] Evaluations: 208
[t=0.0069627s, 1204 KB] Generated 1326 state(s).
[t=0.0069627s, 1204 KB] Dead ends: 0 state(s).
[t=0.0069627s, 1204 KB] Number of registered states: 104
[t=0.0069627s, 1204 KB] Int hash set load factor: 104/128 = 0.8125
[t=0.0069627s, 1204 KB] Int hash set resizes: 7
[t=0.0069627s, 1204 KB] Search time: 0.0037933s
[t=0.0069627s, 1204 KB] Total time: 0.0069627s
Solution found.
search exit code: 0

