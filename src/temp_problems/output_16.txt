INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_16.pddl --sas-file temp_problems/sas_plan_16
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.005s wall-clock]
268 relevant atoms
123 auxiliary atoms
391 final queue length
466 total queue pushes
Completing instantiation... [0.016s CPU, 0.005s wall-clock]
Instantiating: [0.016s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
2 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.005s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
118 of 118 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 61
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 118
Translator axioms: 0
Translator task size: 514
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.016s CPU, 0.042s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_16
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_16 < temp_problems/sas_plan_16
[t=3.32e-05s, 720 KB] reading input...
[t=0.0012302s, 740 KB] done reading input!
[t=0.004475s, 1092 KB] Initializing landmark count heuristic...
[t=0.0045112s, 1100 KB] Generating landmark graph...
[t=0.0045401s, 1100 KB] Building a landmark graph with reasonable orders.
[t=0.0046395s, 1100 KB] Initializing Exploration...
[t=0.0047872s, 1120 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0055108s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0055401s, 1144 KB] Landmarks generation time: 0.0009311s
[t=0.0055498s, 1144 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.005559s, 1144 KB] 33 edges
[t=0.0055669s, 1144 KB] approx. reasonable orders
[t=0.0056637s, 1144 KB] approx. obedient reasonable orders
[t=0.0056999s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0057088s, 1144 KB] Landmarks generation time: 0.0011925s
[t=0.0057171s, 1144 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0057257s, 1144 KB] 34 edges
[t=0.0057331s, 1144 KB] Landmark graph generation time: 0.0012257s
[t=0.0057412s, 1144 KB] Landmark graph contains 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0057499s, 1144 KB] Landmark graph contains 34 orderings.
[t=0.0058681s, 1144 KB] Simplifying 118 unary operators... done! [118 unary operators]
[t=0.0059503s, 1144 KB] time to simplify: 8.68e-05s
[t=0.0059811s, 1144 KB] Initializing additive heuristic...
[t=0.0059887s, 1144 KB] Initializing FF heuristic...
[t=0.0060955s, 1144 KB] Building successor generator...done!
[t=0.0062037s, 1148 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0062124s, 1148 KB] time for successor generation creation: 9.19e-05s
[t=0.0062241s, 1148 KB] Variables: 9
[t=0.0062318s, 1148 KB] FactPairs: 61
[t=0.0062389s, 1148 KB] Bytes per state: 4
[t=0.0065364s, 1168 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.00656s, 1168 KB] 7 initial landmarks, 6 goal landmarks
[t=0.0066024s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0066123s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.00662s, 1168 KB] g=0, 1 evaluated, 0 expanded
[t=0.0066471s, 1168 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0066554s, 1168 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0067791s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0067892s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0067971s, 1168 KB] g=1, 7 evaluated, 6 expanded
[t=0.0068694s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0068787s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0068862s, 1168 KB] g=2, 10 evaluated, 9 expanded
[t=0.0069789s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0069893s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0069976s, 1168 KB] g=3, 14 evaluated, 13 expanded
[t=0.0070652s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0070749s, 1168 KB] g=4, 17 evaluated, 16 expanded
[t=0.0071486s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0071585s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0071658s, 1168 KB] g=5, 20 evaluated, 19 expanded
[t=0.0072446s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0072538s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0072611s, 1168 KB] g=7, 23 evaluated, 22 expanded
[t=0.0073309s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0073397s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0073527s, 1168 KB] g=8, 26 evaluated, 25 expanded
[t=0.0074433s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.007456s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0074634s, 1168 KB] g=9, 29 evaluated, 28 expanded
[t=0.0075339s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0075431s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0075513s, 1168 KB] g=11, 32 evaluated, 31 expanded
[t=0.0076288s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0076413s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0076495s, 1168 KB] g=12, 35 evaluated, 34 expanded
[t=0.0077296s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0077423s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0077503s, 1168 KB] g=13, 38 evaluated, 37 expanded
[t=0.0077829s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.007794s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0078028s, 1168 KB] g=14, 39 evaluated, 38 expanded
[t=0.0078532s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0078639s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0078722s, 1168 KB] g=15, 41 evaluated, 40 expanded
[t=0.0079085s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0079167s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.007924s, 1168 KB] g=16, 42 evaluated, 41 expanded
[t=0.0079537s, 1168 KB] Solution found!
[t=0.0079632s, 1168 KB] Actual search time: 0.0013975s
load obj12 obj8 obj5 (1)
load obj12 obj16 obj5 (1)
load obj10 obj15 obj2 (1)
drive obj10 obj2 obj0 (1)
unload obj10 obj15 obj0 (1)
fly obj12 obj5 obj0 (1)
load obj12 obj17 obj0 (1)
unload obj12 obj16 obj0 (1)
load obj12 obj11 obj0 (1)
fly obj12 obj0 obj3 (1)
unload obj12 obj8 obj3 (1)
load obj12 obj7 obj3 (1)
unload obj12 obj11 obj3 (1)
fly obj12 obj3 obj0 (1)
unload obj12 obj7 obj0 (1)
fly obj12 obj0 obj5 (1)
unload obj12 obj17 obj5 (1)
[t=0.007972s, 1168 KB] Plan length: 17 step(s).
[t=0.007972s, 1168 KB] Plan cost: 17
[t=0.007972s, 1168 KB] Expanded 42 state(s).
[t=0.007972s, 1168 KB] Reopened 0 state(s).
[t=0.007972s, 1168 KB] Evaluated 43 state(s).
[t=0.007972s, 1168 KB] Evaluations: 86
[t=0.007972s, 1168 KB] Generated 532 state(s).
[t=0.007972s, 1168 KB] Dead ends: 0 state(s).
[t=0.007972s, 1168 KB] Number of registered states: 43
[t=0.007972s, 1168 KB] Int hash set load factor: 43/64 = 0.671875
[t=0.007972s, 1168 KB] Int hash set resizes: 6
[t=0.007972s, 1168 KB] Search time: 0.0014383s
[t=0.007972s, 1168 KB] Total time: 0.007972s
Solution found.
search exit code: 0

