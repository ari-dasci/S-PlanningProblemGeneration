INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_16.pddl --sas-file temp_problems/sas_plan_16
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.016s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.002s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.016s CPU, 0.006s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.008s wall-clock]
265 relevant atoms
113 auxiliary atoms
378 final queue length
455 total queue pushes
Completing instantiation... [0.000s CPU, 0.006s wall-clock]
Instantiating: [0.016s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.016s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.016s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.016s CPU, 0.009s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
122 of 122 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 63
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 122
Translator axioms: 0
Translator task size: 560
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.047s CPU, 0.068s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_16
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_16 < temp_problems/sas_plan_16
[t=4.31e-05s, 724 KB] reading input...
[t=0.0023765s, 744 KB] done reading input!
[t=0.007488s, 1092 KB] Initializing landmark count heuristic...
[t=0.0075572s, 1100 KB] Generating landmark graph...
[t=0.0076188s, 1100 KB] Building a landmark graph with reasonable orders.
[t=0.007768s, 1104 KB] Initializing Exploration...
[t=0.0080582s, 1120 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0091139s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0091564s, 1152 KB] Landmarks generation time: 0.0014736s
[t=0.0091682s, 1152 KB] Discovered 28 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0091788s, 1152 KB] 38 edges
[t=0.0091883s, 1152 KB] approx. reasonable orders
[t=0.0093878s, 1152 KB] approx. obedient reasonable orders
[t=0.0094569s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0094799s, 1152 KB] Landmarks generation time: 0.0019072s
[t=0.0095018s, 1152 KB] Discovered 28 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0095221s, 1152 KB] 38 edges
[t=0.0095434s, 1152 KB] Landmark graph generation time: 0.0019945s
[t=0.0095629s, 1152 KB] Landmark graph contains 28 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0095957s, 1152 KB] Landmark graph contains 38 orderings.
[t=0.0098232s, 1152 KB] Simplifying 122 unary operators... done! [122 unary operators]
[t=0.0099751s, 1152 KB] time to simplify: 0.0001616s
[t=0.0100392s, 1152 KB] Initializing additive heuristic...
[t=0.0100704s, 1152 KB] Initializing FF heuristic...
[t=0.0102108s, 1152 KB] Building successor generator...done!
[t=0.0103833s, 1160 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0104033s, 1160 KB] time for successor generation creation: 0.0001432s
[t=0.0104262s, 1160 KB] Variables: 11
[t=0.0104353s, 1160 KB] FactPairs: 63
[t=0.0104454s, 1160 KB] Bytes per state: 4
[t=0.0108071s, 1172 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0108369s, 1172 KB] 10 initial landmarks, 8 goal landmarks
[t=0.0109293s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0109455s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0109669s, 1172 KB] g=0, 1 evaluated, 0 expanded
[t=0.0110083s, 1172 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0110242s, 1172 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0111958s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.011223s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0112343s, 1172 KB] g=1, 4 evaluated, 3 expanded
[t=0.0114102s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0114439s, 1172 KB] g=2, 7 evaluated, 6 expanded
[t=0.011524s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0115402s, 1172 KB] g=2, 9 evaluated, 8 expanded
[t=0.0117183s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0117349s, 1172 KB] g=3, 13 evaluated, 12 expanded
[t=0.0118625s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0118824s, 1172 KB] g=3, 16 evaluated, 15 expanded
[t=0.0121247s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0121523s, 1172 KB] g=4, 22 evaluated, 21 expanded
[t=0.0122165s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0122301s, 1172 KB] g=5, 23 evaluated, 22 expanded
[t=0.0122986s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0123096s, 1172 KB] g=6, 25 evaluated, 24 expanded
[t=0.0123434s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0123546s, 1172 KB] g=5, 26 evaluated, 25 expanded
[t=0.0125272s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0125837s, 1172 KB] g=7, 31 evaluated, 30 expanded
[t=0.0126957s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.012719s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0127309s, 1172 KB] g=8, 33 evaluated, 32 expanded
[t=0.0128227s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0128535s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.012877s, 1172 KB] g=9, 35 evaluated, 34 expanded
[t=0.0129979s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0130266s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0130388s, 1172 KB] g=10, 37 evaluated, 36 expanded
[t=0.0131562s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0131797s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0131991s, 1172 KB] g=11, 40 evaluated, 39 expanded
[t=0.0133745s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.013403s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0134308s, 1172 KB] g=12, 43 evaluated, 42 expanded
[t=0.0135433s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0135641s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0135836s, 1172 KB] g=13, 46 evaluated, 45 expanded
[t=0.013661s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0136941s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0137161s, 1172 KB] g=14, 48 evaluated, 47 expanded
[t=0.013825s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0138524s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0138742s, 1172 KB] g=15, 50 evaluated, 49 expanded
[t=0.0140304s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0140654s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0140845s, 1172 KB] g=16, 52 evaluated, 51 expanded
[t=0.0141937s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0142098s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0142192s, 1172 KB] g=17, 54 evaluated, 53 expanded
[t=0.0142959s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0143109s, 1172 KB] g=19, 56 evaluated, 55 expanded
[t=0.0143556s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0143762s, 1172 KB] g=20, 57 evaluated, 56 expanded
[t=0.0144174s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.014442s, 1172 KB] g=20, 58 evaluated, 57 expanded
[t=0.0144967s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0145242s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.014543s, 1172 KB] g=21, 59 evaluated, 58 expanded
[t=0.0145983s, 1172 KB] Solution found!
[t=0.0146175s, 1172 KB] Actual search time: 0.003756s
load obj3 obj2 obj0 (1)
load obj13 obj15 obj9 (1)
load obj13 obj14 obj9 (1)
drive obj13 obj9 obj6 (1)
fly obj3 obj0 obj6 (1)
load obj3 obj8 obj6 (1)
unload obj3 obj2 obj6 (1)
fly obj3 obj6 obj0 (1)
unload obj13 obj15 obj6 (1)
unload obj13 obj14 obj6 (1)
load obj11 obj5 obj4 (1)
load obj11 obj16 obj4 (1)
load obj11 obj12 obj4 (1)
drive obj11 obj4 obj0 (1)
unload obj11 obj5 obj0 (1)
unload obj11 obj16 obj0 (1)
unload obj11 obj12 obj0 (1)
fly obj3 obj0 obj9 (1)
unload obj3 obj8 obj9 (1)
load obj3 obj10 obj9 (1)
fly obj3 obj9 obj0 (1)
unload obj3 obj10 obj0 (1)
[t=0.0146284s, 1172 KB] Plan length: 22 step(s).
[t=0.0146284s, 1172 KB] Plan cost: 22
[t=0.0146284s, 1172 KB] Expanded 59 state(s).
[t=0.0146284s, 1172 KB] Reopened 0 state(s).
[t=0.0146284s, 1172 KB] Evaluated 60 state(s).
[t=0.0146284s, 1172 KB] Evaluations: 120
[t=0.0146284s, 1172 KB] Generated 673 state(s).
[t=0.0146284s, 1172 KB] Dead ends: 0 state(s).
[t=0.0146284s, 1172 KB] Number of registered states: 60
[t=0.0146284s, 1172 KB] Int hash set load factor: 60/64 = 0.9375
[t=0.0146284s, 1172 KB] Int hash set resizes: 6
[t=0.0146284s, 1172 KB] Search time: 0.0038243s
[t=0.0146284s, 1172 KB] Total time: 0.0146284s
Solution found.
search exit code: 0

