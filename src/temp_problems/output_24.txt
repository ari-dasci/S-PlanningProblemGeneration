INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_24.pddl --sas-file temp_problems/sas_plan_24
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.016s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
290 relevant atoms
120 auxiliary atoms
410 final queue length
495 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.005s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
12 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
12 of 12 variables necessary.
0 of 12 mutex groups necessary.
136 of 136 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 12
Translator derived variables: 0
Translator facts: 70
Translator goal facts: 9
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 136
Translator axioms: 0
Translator task size: 625
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.021s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_24
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_24 < temp_problems/sas_plan_24
[t=1.96e-05s, 732 KB] reading input...
[t=0.0005151s, 760 KB] done reading input!
[t=0.0016715s, 1096 KB] Initializing landmark count heuristic...
[t=0.0016876s, 1096 KB] Generating landmark graph...
[t=0.0017035s, 1096 KB] Building a landmark graph with reasonable orders.
[t=0.0017675s, 1100 KB] Initializing Exploration...
[t=0.0018394s, 1120 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0022297s, 1156 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0022423s, 1156 KB] Landmarks generation time: 0.000491s
[t=0.0022491s, 1156 KB] Discovered 28 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.002256s, 1156 KB] 40 edges
[t=0.002262s, 1156 KB] approx. reasonable orders
[t=0.0023125s, 1156 KB] approx. obedient reasonable orders
[t=0.0023273s, 1156 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0023336s, 1156 KB] Landmarks generation time: 0.0006408s
[t=0.0023398s, 1156 KB] Discovered 28 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.002346s, 1156 KB] 40 edges
[t=0.0023515s, 1156 KB] Landmark graph generation time: 0.0006659s
[t=0.0023577s, 1156 KB] Landmark graph contains 28 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0023638s, 1156 KB] Landmark graph contains 40 orderings.
[t=0.0024203s, 1156 KB] Simplifying 136 unary operators... done! [136 unary operators]
[t=0.0024646s, 1156 KB] time to simplify: 4.62e-05s
[t=0.0024824s, 1156 KB] Initializing additive heuristic...
[t=0.0024885s, 1156 KB] Initializing FF heuristic...
[t=0.0025387s, 1164 KB] Building successor generator...done!
[t=0.0025948s, 1164 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0026008s, 1164 KB] time for successor generation creation: 4.49e-05s
[t=0.0026086s, 1164 KB] Variables: 12
[t=0.0026145s, 1164 KB] FactPairs: 70
[t=0.0026202s, 1164 KB] Bytes per state: 4
[t=0.0027403s, 1184 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0027503s, 1184 KB] 10 initial landmarks, 9 goal landmarks
[t=0.0027697s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0027759s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0027816s, 1184 KB] g=0, 1 evaluated, 0 expanded
[t=0.002796s, 1184 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0028019s, 1184 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0028138s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0028195s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0028251s, 1184 KB] g=1, 2 evaluated, 1 expanded
[t=0.0028495s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0028554s, 1184 KB] g=2, 4 evaluated, 3 expanded
[t=0.002884s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0028903s, 1184 KB] g=2, 6 evaluated, 5 expanded
[t=0.0029136s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0029194s, 1184 KB] g=3, 8 evaluated, 7 expanded
[t=0.0029475s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0029533s, 1184 KB] g=3, 10 evaluated, 9 expanded
[t=0.0029772s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.002983s, 1184 KB] g=4, 12 evaluated, 11 expanded
[t=0.0030017s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0030074s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0030132s, 1184 KB] g=5, 13 evaluated, 12 expanded
[t=0.0030469s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0030526s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0030596s, 1184 KB] g=6, 16 evaluated, 15 expanded
[t=0.0030951s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0031009s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0031067s, 1184 KB] g=7, 19 evaluated, 18 expanded
[t=0.0031402s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0031459s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0031516s, 1184 KB] g=8, 22 evaluated, 21 expanded
[t=0.0031845s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0031903s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.003196s, 1184 KB] g=9, 25 evaluated, 24 expanded
[t=0.0032296s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0032355s, 1184 KB] g=11, 28 evaluated, 27 expanded
[t=0.0032586s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0032644s, 1184 KB] g=12, 30 evaluated, 29 expanded
[t=0.0032788s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0032846s, 1184 KB] g=12, 31 evaluated, 30 expanded
[t=0.0033096s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0033153s, 1184 KB] g=13, 33 evaluated, 32 expanded
[t=0.003329s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0033349s, 1184 KB] g=13, 34 evaluated, 33 expanded
[t=0.0033567s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0033624s, 1184 KB] g=14, 36 evaluated, 35 expanded
[t=0.0033756s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0033814s, 1184 KB] g=14, 37 evaluated, 36 expanded
[t=0.0034023s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0034081s, 1184 KB] g=15, 39 evaluated, 38 expanded
[t=0.003421s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0034268s, 1184 KB] g=15, 40 evaluated, 39 expanded
[t=0.003441s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0034467s, 1184 KB] g=16, 41 evaluated, 40 expanded
[t=0.0034594s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0034651s, 1184 KB] g=17, 42 evaluated, 41 expanded
[t=0.0034777s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0034835s, 1184 KB] g=17, 43 evaluated, 42 expanded
[t=0.0034991s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0035049s, 1184 KB] g=18, 44 evaluated, 43 expanded
[t=0.0035175s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0035232s, 1184 KB] g=18, 45 evaluated, 44 expanded
[t=0.0035355s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0035412s, 1184 KB] g=19, 46 evaluated, 45 expanded
[t=0.0035535s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0035591s, 1184 KB] g=19, 47 evaluated, 46 expanded
[t=0.0035715s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0035773s, 1184 KB] g=20, 48 evaluated, 47 expanded
[t=0.003589s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0035952s, 1184 KB] g=20, 49 evaluated, 48 expanded
[t=0.0036116s, 1184 KB] Solution found!
[t=0.0036187s, 1184 KB] Actual search time: 0.0008635s
drive obj7 obj0 obj15 (1)
load obj2 obj17 obj0 (1)
load obj2 obj12 obj0 (1)
fly obj2 obj0 obj3 (1)
load obj2 obj8 obj3 (1)
load obj2 obj6 obj3 (1)
load obj2 obj14 obj3 (1)
load obj2 obj13 obj3 (1)
load obj2 obj10 obj3 (1)
fly obj2 obj3 obj0 (1)
unload obj2 obj8 obj0 (1)
unload obj2 obj6 obj0 (1)
unload obj2 obj14 obj0 (1)
unload obj2 obj13 obj0 (1)
unload obj2 obj10 obj0 (1)
fly obj2 obj0 obj15 (1)
unload obj2 obj17 obj15 (1)
load obj2 obj16 obj15 (1)
unload obj2 obj12 obj15 (1)
fly obj2 obj15 obj3 (1)
unload obj2 obj16 obj3 (1)
[t=0.0036246s, 1184 KB] Plan length: 21 step(s).
[t=0.0036246s, 1184 KB] Plan cost: 21
[t=0.0036246s, 1184 KB] Expanded 50 state(s).
[t=0.0036246s, 1184 KB] Reopened 0 state(s).
[t=0.0036246s, 1184 KB] Evaluated 51 state(s).
[t=0.0036246s, 1184 KB] Evaluations: 102
[t=0.0036246s, 1184 KB] Generated 578 state(s).
[t=0.0036246s, 1184 KB] Dead ends: 0 state(s).
[t=0.0036246s, 1184 KB] Number of registered states: 51
[t=0.0036246s, 1184 KB] Int hash set load factor: 51/64 = 0.796875
[t=0.0036246s, 1184 KB] Int hash set resizes: 6
[t=0.0036246s, 1184 KB] Search time: 0.0008848s
[t=0.0036246s, 1184 KB] Total time: 0.0036246s
Solution found.
search exit code: 0

