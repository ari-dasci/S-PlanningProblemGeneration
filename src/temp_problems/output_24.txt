INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_24.pddl --sas-file temp_problems/sas_plan_24
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.006s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.016s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.006s wall-clock]
397 relevant atoms
178 auxiliary atoms
575 final queue length
769 total queue pushes
Completing instantiation... [0.000s CPU, 0.006s wall-clock]
Instantiating: [0.016s CPU, 0.015s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.003s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.009s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
10 propositions removed
Detecting unreachable propositions: [0.016s CPU, 0.004s wall-clock]
Reordering and filtering variables...
10 of 10 variables necessary.
0 of 10 mutex groups necessary.
234 of 234 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 10
Translator derived variables: 0
Translator facts: 68
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 234
Translator axioms: 0
Translator task size: 965
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.031s CPU, 0.045s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_24
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_24 < temp_problems/sas_plan_24
[t=3.4e-05s, 732 KB] reading input...
[t=0.0016455s, 772 KB] done reading input!
[t=0.0038929s, 1120 KB] Initializing landmark count heuristic...
[t=0.0039109s, 1120 KB] Generating landmark graph...
[t=0.0039576s, 1120 KB] Building a landmark graph with reasonable orders.
[t=0.0040508s, 1124 KB] Initializing Exploration...
[t=0.004227s, 1160 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0050891s, 1184 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0051134s, 1184 KB] Landmarks generation time: 0.0010987s
[t=0.0051205s, 1184 KB] Discovered 16 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0051278s, 1184 KB] 16 edges
[t=0.0051342s, 1184 KB] approx. reasonable orders
[t=0.005176s, 1184 KB] approx. obedient reasonable orders
[t=0.0051914s, 1184 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0051976s, 1184 KB] Landmarks generation time: 0.0012831s
[t=0.0052039s, 1184 KB] Discovered 16 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0052106s, 1184 KB] 16 edges
[t=0.0052161s, 1184 KB] Landmark graph generation time: 0.001308s
[t=0.0052225s, 1184 KB] Landmark graph contains 16 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0052318s, 1184 KB] Landmark graph contains 16 orderings.
[t=0.0053514s, 1184 KB] Simplifying 234 unary operators... done! [234 unary operators]
[t=0.0054789s, 1184 KB] time to simplify: 0.0001313s
[t=0.0055146s, 1184 KB] Initializing additive heuristic...
[t=0.0055205s, 1184 KB] Initializing FF heuristic...
[t=0.0055994s, 1184 KB] Building successor generator...done!
[t=0.0057723s, 1196 KB] peak memory difference for successor generator creation: 12 KB
[t=0.00578s, 1196 KB] time for successor generation creation: 0.0001566s
[t=0.0057898s, 1196 KB] Variables: 10
[t=0.0057958s, 1196 KB] FactPairs: 68
[t=0.0058014s, 1196 KB] Bytes per state: 4
[t=0.005992s, 1216 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0060114s, 1216 KB] 5 initial landmarks, 5 goal landmarks
[t=0.0060452s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0060524s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0060583s, 1216 KB] g=0, 1 evaluated, 0 expanded
[t=0.0060848s, 1216 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0060911s, 1216 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0061077s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0061138s, 1216 KB] g=1, 2 evaluated, 1 expanded
[t=0.0061428s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.006149s, 1216 KB] g=2, 3 evaluated, 2 expanded
[t=0.0061955s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0062018s, 1216 KB] g=2, 5 evaluated, 4 expanded
[t=0.0062469s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0062534s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0062592s, 1216 KB] g=3, 7 evaluated, 6 expanded
[t=0.0062851s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0062913s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0062971s, 1216 KB] g=4, 8 evaluated, 7 expanded
[t=0.0063813s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.006388s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0063938s, 1216 KB] g=5, 12 evaluated, 11 expanded
[t=0.0064752s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0064817s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0064876s, 1216 KB] g=6, 16 evaluated, 15 expanded
[t=0.0065492s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0065586s, 1216 KB] g=7, 19 evaluated, 18 expanded
[t=0.0066525s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0066629s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0066689s, 1216 KB] g=8, 23 evaluated, 22 expanded
[t=0.0067395s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0067466s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0067525s, 1216 KB] g=9, 26 evaluated, 25 expanded
[t=0.0068368s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0068434s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0068492s, 1216 KB] g=11, 30 evaluated, 29 expanded
[t=0.0069195s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0069262s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0069321s, 1216 KB] g=12, 33 evaluated, 32 expanded
[t=0.0069618s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0069767s, 1216 KB] g=13, 34 evaluated, 33 expanded
[t=0.0070239s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0070304s, 1216 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0070362s, 1216 KB] g=14, 36 evaluated, 35 expanded
[t=0.0070654s, 1216 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0070718s, 1216 KB] g=15, 37 evaluated, 36 expanded
[t=0.0070961s, 1216 KB] Solution found!
[t=0.007103s, 1216 KB] Actual search time: 0.0010865s
drive obj9 obj8 obj0 (1)
load obj5 obj3 obj0 (1)
fly obj5 obj0 obj14 (1)
unload obj5 obj3 obj14 (1)
load obj11 obj12 obj6 (1)
load obj11 obj10 obj6 (1)
drive obj11 obj6 obj14 (1)
unload obj11 obj12 obj14 (1)
unload obj11 obj10 obj14 (1)
fly obj2 obj0 obj8 (1)
load obj2 obj15 obj8 (1)
load obj2 obj13 obj8 (1)
fly obj2 obj8 obj0 (1)
unload obj2 obj15 obj0 (1)
fly obj2 obj0 obj6 (1)
unload obj2 obj13 obj6 (1)
[t=0.0071091s, 1216 KB] Plan length: 16 step(s).
[t=0.0071091s, 1216 KB] Plan cost: 16
[t=0.0071091s, 1216 KB] Expanded 37 state(s).
[t=0.0071091s, 1216 KB] Reopened 0 state(s).
[t=0.0071091s, 1216 KB] Evaluated 38 state(s).
[t=0.0071091s, 1216 KB] Evaluations: 76
[t=0.0071091s, 1216 KB] Generated 685 state(s).
[t=0.0071091s, 1216 KB] Dead ends: 0 state(s).
[t=0.0071091s, 1216 KB] Number of registered states: 38
[t=0.0071091s, 1216 KB] Int hash set load factor: 38/64 = 0.59375
[t=0.0071091s, 1216 KB] Int hash set resizes: 6
[t=0.0071091s, 1216 KB] Search time: 0.0011189s
[t=0.0071091s, 1216 KB] Total time: 0.0071091s
Solution found.
search exit code: 0

