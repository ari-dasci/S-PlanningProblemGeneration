INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_24.pddl --sas-file temp_problems/sas_plan_24
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.002s wall-clock]
297 relevant atoms
144 auxiliary atoms
441 final queue length
548 total queue pushes
Completing instantiation... [0.000s CPU, 0.001s wall-clock]
Instantiating: [0.000s CPU, 0.005s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
9 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
148 of 148 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 62
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 148
Translator axioms: 0
Translator task size: 640
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.002s wall-clock]
Done! [0.000s CPU, 0.013s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_24
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_24 < temp_problems/sas_plan_24
[t=1.78e-05s, 736 KB] reading input...
[t=0.0005432s, 764 KB] done reading input!
[t=0.0017695s, 1116 KB] Initializing landmark count heuristic...
[t=0.0017881s, 1124 KB] Generating landmark graph...
[t=0.0018063s, 1124 KB] Building a landmark graph with reasonable orders.
[t=0.0018619s, 1124 KB] Initializing Exploration...
[t=0.0019612s, 1144 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0023064s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0023193s, 1160 KB] Landmarks generation time: 0.0004705s
[t=0.0023265s, 1160 KB] Discovered 20 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0023338s, 1160 KB] 21 edges
[t=0.0023402s, 1160 KB] approx. reasonable orders
[t=0.0023715s, 1160 KB] approx. obedient reasonable orders
[t=0.0023883s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0023951s, 1160 KB] Landmarks generation time: 0.0006014s
[t=0.0024017s, 1160 KB] Discovered 20 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0024082s, 1160 KB] 21 edges
[t=0.0024142s, 1160 KB] Landmark graph generation time: 0.0006277s
[t=0.0024208s, 1160 KB] Landmark graph contains 20 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0024274s, 1160 KB] Landmark graph contains 21 orderings.
[t=0.0024888s, 1160 KB] Simplifying 148 unary operators... done! [148 unary operators]
[t=0.0025406s, 1160 KB] time to simplify: 5.36e-05s
[t=0.0025591s, 1160 KB] Initializing additive heuristic...
[t=0.0025656s, 1160 KB] Initializing FF heuristic...
[t=0.0026167s, 1160 KB] Building successor generator...done!
[t=0.0026843s, 1164 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0026907s, 1164 KB] time for successor generation creation: 5.53e-05s
[t=0.0026993s, 1164 KB] Variables: 9
[t=0.0027055s, 1164 KB] FactPairs: 62
[t=0.0027116s, 1164 KB] Bytes per state: 4
[t=0.0028683s, 1184 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0028789s, 1184 KB] 7 initial landmarks, 5 goal landmarks
[t=0.0029012s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0029078s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0029139s, 1184 KB] g=0, 1 evaluated, 0 expanded
[t=0.0029298s, 1184 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0029363s, 1184 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0029924s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.002999s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0030053s, 1184 KB] g=1, 6 evaluated, 5 expanded
[t=0.0030431s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0030495s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0030557s, 1184 KB] g=2, 9 evaluated, 8 expanded
[t=0.003084s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0030905s, 1184 KB] g=3, 11 evaluated, 10 expanded
[t=0.0031183s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0031247s, 1184 KB] g=3, 13 evaluated, 12 expanded
[t=0.0031408s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.003147s, 1184 KB] g=4, 14 evaluated, 13 expanded
[t=0.0031944s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0032006s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0032069s, 1184 KB] g=5, 18 evaluated, 17 expanded
[t=0.0032356s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.003242s, 1184 KB] g=6, 20 evaluated, 19 expanded
[t=0.0032889s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0032952s, 1184 KB] g=6, 24 evaluated, 23 expanded
[t=0.0033345s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0033414s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0033478s, 1184 KB] g=7, 27 evaluated, 26 expanded
[t=0.0034113s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0034183s, 1184 KB] g=9, 32 evaluated, 31 expanded
[t=0.0034365s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0034428s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0034492s, 1184 KB] g=10, 33 evaluated, 32 expanded
[t=0.0034662s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0034725s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0034786s, 1184 KB] g=11, 34 evaluated, 33 expanded
[t=0.0035179s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0035242s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0035303s, 1184 KB] g=13, 37 evaluated, 36 expanded
[t=0.0035478s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0035541s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0035601s, 1184 KB] g=14, 38 evaluated, 37 expanded
[t=0.0035904s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0035967s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.003603s, 1184 KB] g=15, 40 evaluated, 39 expanded
[t=0.0036214s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0036276s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0036338s, 1184 KB] g=16, 41 evaluated, 40 expanded
[t=0.0036498s, 1184 KB] Solution found!
[t=0.0036566s, 1184 KB] Actual search time: 0.0007723s
load obj6 obj15 obj5 (1)
load obj6 obj13 obj5 (1)
drive obj6 obj5 obj0 (1)
unload obj6 obj15 obj0 (1)
unload obj6 obj13 obj0 (1)
load obj4 obj16 obj2 (1)
drive obj4 obj2 obj10 (1)
fly obj8 obj0 obj2 (1)
load obj8 obj11 obj2 (1)
fly obj8 obj2 obj0 (1)
unload obj8 obj11 obj0 (1)
drive obj4 obj10 obj12 (1)
load obj4 obj14 obj12 (1)
drive obj4 obj12 obj10 (1)
unload obj4 obj14 obj10 (1)
drive obj4 obj10 obj9 (1)
unload obj4 obj16 obj9 (1)
[t=0.0036627s, 1184 KB] Plan length: 17 step(s).
[t=0.0036627s, 1184 KB] Plan cost: 17
[t=0.0036627s, 1184 KB] Expanded 41 state(s).
[t=0.0036627s, 1184 KB] Reopened 0 state(s).
[t=0.0036627s, 1184 KB] Evaluated 42 state(s).
[t=0.0036627s, 1184 KB] Evaluations: 84
[t=0.0036627s, 1184 KB] Generated 600 state(s).
[t=0.0036627s, 1184 KB] Dead ends: 0 state(s).
[t=0.0036627s, 1184 KB] Number of registered states: 42
[t=0.0036627s, 1184 KB] Int hash set load factor: 42/64 = 0.65625
[t=0.0036627s, 1184 KB] Int hash set resizes: 6
[t=0.0036627s, 1184 KB] Search time: 0.0007952s
[t=0.0036627s, 1184 KB] Total time: 0.0036627s
Solution found.
search exit code: 0

