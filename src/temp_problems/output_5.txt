INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_5.pddl --sas-file temp_problems/sas_plan_5
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.016s wall-clock]
251 relevant atoms
98 auxiliary atoms
349 final queue length
420 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
2 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
112 of 112 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 58
Translator goal facts: 9
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 112
Translator axioms: 0
Translator task size: 486
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.016s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_5
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_5 < temp_problems/sas_plan_5
[t=1.39e-05s, 800 KB] reading input...
[t=0.0006663s, 816 KB] done reading input!
[t=0.0023314s, 1156 KB] Initializing landmark count heuristic...
[t=0.0023624s, 1156 KB] Generating landmark graph...
[t=0.0023867s, 1156 KB] Building a landmark graph with reasonable orders.
[t=0.0024627s, 1164 KB] Initializing Exploration...
[t=0.0025317s, 1176 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0029619s, 1212 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0029877s, 1212 KB] Landmarks generation time: 0.000544s
[t=0.0029977s, 1212 KB] Discovered 28 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0030079s, 1212 KB] 40 edges
[t=0.0030159s, 1212 KB] approx. reasonable orders
[t=0.0030681s, 1212 KB] approx. obedient reasonable orders
[t=0.003085s, 1212 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0030927s, 1212 KB] Landmarks generation time: 0.0007216s
[t=0.0030998s, 1212 KB] Discovered 28 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0031069s, 1212 KB] 40 edges
[t=0.0031131s, 1212 KB] Landmark graph generation time: 0.0007528s
[t=0.0031198s, 1212 KB] Landmark graph contains 28 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0031268s, 1212 KB] Landmark graph contains 40 orderings.
[t=0.0031879s, 1212 KB] Simplifying 112 unary operators... done! [112 unary operators]
[t=0.0032311s, 1212 KB] time to simplify: 4.52e-05s
[t=0.0032483s, 1212 KB] Initializing additive heuristic...
[t=0.0032551s, 1212 KB] Initializing FF heuristic...
[t=0.0033108s, 1212 KB] Building successor generator...done!
[t=0.0033705s, 1212 KB] peak memory difference for successor generator creation: 0 KB
[t=0.003378s, 1212 KB] time for successor generation creation: 4.13e-05s
[t=0.0034241s, 1212 KB] Variables: 11
[t=0.003431s, 1212 KB] FactPairs: 58
[t=0.0034379s, 1212 KB] Bytes per state: 4
[t=0.0036316s, 1224 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0036445s, 1224 KB] 9 initial landmarks, 9 goal landmarks
[t=0.003666s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0036753s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0036827s, 1224 KB] g=0, 1 evaluated, 0 expanded
[t=0.0037021s, 1224 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0037093s, 1224 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0037335s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0037404s, 1224 KB] g=1, 2 evaluated, 1 expanded
[t=0.0037626s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0037714s, 1224 KB] g=1, 3 evaluated, 2 expanded
[t=0.0037912s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0037979s, 1224 KB] g=2, 4 evaluated, 3 expanded
[t=0.0038616s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0038705s, 1224 KB] g=2, 7 evaluated, 6 expanded
[t=0.0038953s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0039059s, 1224 KB] g=3, 8 evaluated, 7 expanded
[t=0.0039697s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0039786s, 1224 KB] g=3, 11 evaluated, 10 expanded
[t=0.0040013s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0040098s, 1224 KB] g=4, 12 evaluated, 11 expanded
[t=0.0040739s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0040843s, 1224 KB] g=4, 15 evaluated, 14 expanded
[t=0.0041005s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0041072s, 1224 KB] g=5, 16 evaluated, 15 expanded
[t=0.004139s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0041461s, 1224 KB] g=6, 18 evaluated, 17 expanded
[t=0.0041761s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0041836s, 1224 KB] g=7, 20 evaluated, 19 expanded
[t=0.0042044s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0042113s, 1224 KB] g=6, 21 evaluated, 20 expanded
[t=0.0042535s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0042625s, 1224 KB] g=8, 24 evaluated, 23 expanded
[t=0.0042912s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0042982s, 1224 KB] g=9, 26 evaluated, 25 expanded
[t=0.0043168s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0043237s, 1224 KB] g=9, 27 evaluated, 26 expanded
[t=0.004364s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0043886s, 1224 KB] g=10, 29 evaluated, 28 expanded
[t=0.0044207s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0044287s, 1224 KB] g=10, 30 evaluated, 29 expanded
[t=0.0044515s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0044585s, 1224 KB] g=11, 31 evaluated, 30 expanded
[t=0.0045087s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0045157s, 1224 KB] g=11, 34 evaluated, 33 expanded
[t=0.004576s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0045855s, 1224 KB] g=12, 36 evaluated, 35 expanded
[t=0.0046035s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0046122s, 1224 KB] g=12, 37 evaluated, 36 expanded
[t=0.0046302s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0046367s, 1224 KB] g=13, 38 evaluated, 37 expanded
[t=0.0046768s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0046836s, 1224 KB] g=13, 41 evaluated, 40 expanded
[t=0.0047011s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0047082s, 1224 KB] g=14, 42 evaluated, 41 expanded
[t=0.0047457s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0047545s, 1224 KB] g=14, 45 evaluated, 44 expanded
[t=0.0047721s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0047788s, 1224 KB] g=15, 46 evaluated, 45 expanded
[t=0.0048176s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0048246s, 1224 KB] g=15, 49 evaluated, 48 expanded
[t=0.0048525s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0048593s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0048656s, 1224 KB] g=16, 51 evaluated, 50 expanded
[t=0.0048822s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0048885s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0048949s, 1224 KB] g=17, 52 evaluated, 51 expanded
[t=0.0049115s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0049413s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0049616s, 1224 KB] g=18, 53 evaluated, 52 expanded
[t=0.004986s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0049933s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0050013s, 1224 KB] g=19, 54 evaluated, 53 expanded
[t=0.0050218s, 1224 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0050338s, 1224 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0050404s, 1224 KB] g=20, 55 evaluated, 54 expanded
[t=0.0050584s, 1224 KB] Solution found!
[t=0.0050659s, 1224 KB] Actual search time: 0.0014152s
fly obj9 obj0 obj2 (1)
load obj9 obj8 obj2 (1)
load obj9 obj7 obj2 (1)
load obj9 obj11 obj2 (1)
load obj9 obj10 obj2 (1)
fly obj9 obj2 obj0 (1)
unload obj9 obj8 obj0 (1)
unload obj9 obj7 obj0 (1)
load obj9 obj16 obj0 (1)
load obj9 obj15 obj0 (1)
load obj9 obj14 obj0 (1)
load obj9 obj13 obj0 (1)
load obj9 obj12 obj0 (1)
unload obj9 obj11 obj0 (1)
unload obj9 obj10 obj0 (1)
fly obj9 obj0 obj2 (1)
unload obj9 obj16 obj2 (1)
unload obj9 obj15 obj2 (1)
unload obj9 obj14 obj2 (1)
unload obj9 obj13 obj2 (1)
unload obj9 obj12 obj2 (1)
[t=0.0050721s, 1224 KB] Plan length: 21 step(s).
[t=0.0050721s, 1224 KB] Plan cost: 21
[t=0.0050721s, 1224 KB] Expanded 55 state(s).
[t=0.0050721s, 1224 KB] Reopened 0 state(s).
[t=0.0050721s, 1224 KB] Evaluated 56 state(s).
[t=0.0050721s, 1224 KB] Evaluations: 112
[t=0.0050721s, 1224 KB] Generated 963 state(s).
[t=0.0050721s, 1224 KB] Dead ends: 0 state(s).
[t=0.0050721s, 1224 KB] Number of registered states: 56
[t=0.0050721s, 1224 KB] Int hash set load factor: 56/64 = 0.875
[t=0.0050721s, 1224 KB] Int hash set resizes: 6
[t=0.0050721s, 1224 KB] Search time: 0.0014413s
[t=0.0050721s, 1224 KB] Total time: 0.0050721s
Solution found.
search exit code: 0

