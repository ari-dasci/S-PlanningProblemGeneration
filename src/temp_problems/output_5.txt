INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_5.pddl --sas-file temp_problems/sas_plan_5
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
461 relevant atoms
168 auxiliary atoms
629 final queue length
833 total queue pushes
Completing instantiation... [0.000s CPU, 0.006s wall-clock]
Instantiating: [0.000s CPU, 0.008s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.005s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
13 of 13 variables necessary.
0 of 13 mutex groups necessary.
270 of 270 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 13
Translator derived variables: 0
Translator facts: 91
Translator goal facts: 10
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 270
Translator axioms: 0
Translator task size: 1144
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.013s wall-clock]
Done! [0.000s CPU, 0.033s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_5
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_5 < temp_problems/sas_plan_5
[t=2.03e-05s, 736 KB] reading input...
[t=0.0015637s, 784 KB] done reading input!
[t=0.0034112s, 1136 KB] Initializing landmark count heuristic...
[t=0.0034393s, 1144 KB] Generating landmark graph...
[t=0.0034749s, 1144 KB] Building a landmark graph with reasonable orders.
[t=0.003548s, 1144 KB] Initializing Exploration...
[t=0.0037025s, 1176 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0047151s, 1228 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0047497s, 1228 KB] Landmarks generation time: 0.0012264s
[t=0.0047584s, 1228 KB] Discovered 33 landmarks, of which 13 are disjunctive and 0 are conjunctive.
[t=0.0047658s, 1228 KB] 42 edges
[t=0.0047726s, 1228 KB] approx. reasonable orders
[t=0.0048351s, 1228 KB] approx. obedient reasonable orders
[t=0.0048527s, 1228 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0048598s, 1228 KB] Landmarks generation time: 0.0014119s
[t=0.0048664s, 1228 KB] Discovered 33 landmarks, of which 13 are disjunctive and 0 are conjunctive.
[t=0.004873s, 1228 KB] 42 edges
[t=0.0048793s, 1228 KB] Landmark graph generation time: 0.0014419s
[t=0.0048856s, 1228 KB] Landmark graph contains 33 landmarks, of which 13 are disjunctive and 0 are conjunctive.
[t=0.0048924s, 1228 KB] Landmark graph contains 42 orderings.
[t=0.0049823s, 1228 KB] Simplifying 270 unary operators... done! [270 unary operators]
[t=0.00506s, 1228 KB] time to simplify: 7.97e-05s
[t=0.005086s, 1228 KB] Initializing additive heuristic...
[t=0.0050923s, 1228 KB] Initializing FF heuristic...
[t=0.0051438s, 1228 KB] Building successor generator...done!
[t=0.0052401s, 1228 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0052467s, 1228 KB] time for successor generation creation: 8.12e-05s
[t=0.0052552s, 1228 KB] Variables: 13
[t=0.0052616s, 1228 KB] FactPairs: 91
[t=0.0052678s, 1228 KB] Bytes per state: 8
[t=0.0054658s, 1248 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0054773s, 1248 KB] 10 initial landmarks, 10 goal landmarks
[t=0.0055011s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0055076s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0055136s, 1248 KB] g=0, 1 evaluated, 0 expanded
[t=0.0055324s, 1248 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0055386s, 1248 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0055532s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0055599s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.005566s, 1248 KB] g=1, 2 evaluated, 1 expanded
[t=0.0056008s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0056072s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0056132s, 1248 KB] g=2, 4 evaluated, 3 expanded
[t=0.0056466s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0056529s, 1248 KB] g=3, 6 evaluated, 5 expanded
[t=0.0057008s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0057071s, 1248 KB] g=3, 9 evaluated, 8 expanded
[t=0.0057605s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0057668s, 1248 KB] g=4, 12 evaluated, 11 expanded
[t=0.0058102s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0058163s, 1248 KB] g=4, 15 evaluated, 14 expanded
[t=0.00586s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0058663s, 1248 KB] g=5, 18 evaluated, 17 expanded
[t=0.0059116s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0059185s, 1248 KB] g=5, 21 evaluated, 20 expanded
[t=0.0059699s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0059829s, 1248 KB] g=6, 24 evaluated, 23 expanded
[t=0.0060276s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0060341s, 1248 KB] g=6, 27 evaluated, 26 expanded
[t=0.0060646s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0060708s, 1248 KB] g=7, 29 evaluated, 28 expanded
[t=0.0060889s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0060949s, 1248 KB] g=7, 30 evaluated, 29 expanded
[t=0.006177s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0061833s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0061894s, 1248 KB] g=8, 36 evaluated, 35 expanded
[t=0.0062349s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0062412s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0062472s, 1248 KB] g=9, 39 evaluated, 38 expanded
[t=0.0062905s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0062965s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0063026s, 1248 KB] g=10, 42 evaluated, 41 expanded
[t=0.0063471s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0063533s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0063595s, 1248 KB] g=11, 45 evaluated, 44 expanded
[t=0.0064045s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0064106s, 1248 KB] g=13, 48 evaluated, 47 expanded
[t=0.0064289s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.006435s, 1248 KB] g=14, 49 evaluated, 48 expanded
[t=0.0064721s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0064784s, 1248 KB] g=14, 51 evaluated, 50 expanded
[t=0.0064965s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0065028s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.006509s, 1248 KB] g=15, 52 evaluated, 51 expanded
[t=0.0065413s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0065473s, 1248 KB] g=17, 54 evaluated, 53 expanded
[t=0.006567s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0065731s, 1248 KB] g=18, 55 evaluated, 54 expanded
[t=0.0065918s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0065979s, 1248 KB] g=18, 56 evaluated, 55 expanded
[t=0.0066178s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0066239s, 1248 KB] g=19, 57 evaluated, 56 expanded
[t=0.006643s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0066491s, 1248 KB] g=19, 58 evaluated, 57 expanded
[t=0.0066685s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0066747s, 1248 KB] g=20, 59 evaluated, 58 expanded
[t=0.0066939s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0067001s, 1248 KB] g=20, 60 evaluated, 59 expanded
[t=0.0067224s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0067285s, 1248 KB] g=21, 61 evaluated, 60 expanded
[t=0.0067729s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0067794s, 1248 KB] g=21, 64 evaluated, 63 expanded
[t=0.006805s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0068113s, 1248 KB] g=22, 65 evaluated, 64 expanded
[t=0.0068294s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0068354s, 1248 KB] g=22, 66 evaluated, 65 expanded
[t=0.0068532s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0068592s, 1248 KB] g=23, 67 evaluated, 66 expanded
[t=0.006877s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.006883s, 1248 KB] g=23, 68 evaluated, 67 expanded
[t=0.0069123s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0069184s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0069244s, 1248 KB] g=24, 70 evaluated, 69 expanded
[t=0.0069422s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0069482s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0069542s, 1248 KB] g=25, 71 evaluated, 70 expanded
[t=0.0069721s, 1248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0069781s, 1248 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.006984s, 1248 KB] g=26, 72 evaluated, 71 expanded
[t=0.007002s, 1248 KB] Solution found!
[t=0.0070086s, 1248 KB] Actual search time: 0.0015259s
fly obj8 obj0 obj18 (1)
drive obj13 obj0 obj9 (1)
load obj10 obj7 obj0 (1)
load obj10 obj4 obj0 (1)
load obj10 obj19 obj0 (1)
load obj10 obj17 obj0 (1)
fly obj10 obj0 obj2 (1)
load obj10 obj6 obj2 (1)
unload obj10 obj4 obj2 (1)
unload obj10 obj17 obj2 (1)
load obj10 obj16 obj2 (1)
fly obj10 obj2 obj18 (1)
unload obj10 obj6 obj18 (1)
unload obj10 obj16 obj18 (1)
fly obj10 obj18 obj2 (1)
fly obj10 obj2 obj9 (1)
unload obj10 obj7 obj9 (1)
unload obj10 obj19 obj9 (1)
load obj10 obj15 obj9 (1)
load obj10 obj14 obj9 (1)
load obj10 obj12 obj9 (1)
load obj10 obj11 obj9 (1)
fly obj10 obj9 obj2 (1)
unload obj10 obj15 obj2 (1)
unload obj10 obj14 obj2 (1)
unload obj10 obj12 obj2 (1)
unload obj10 obj11 obj2 (1)
[t=0.0070145s, 1248 KB] Plan length: 27 step(s).
[t=0.0070145s, 1248 KB] Plan cost: 27
[t=0.0070145s, 1248 KB] Expanded 72 state(s).
[t=0.0070145s, 1248 KB] Reopened 0 state(s).
[t=0.0070145s, 1248 KB] Evaluated 73 state(s).
[t=0.0070145s, 1248 KB] Evaluations: 146
[t=0.0070145s, 1248 KB] Generated 1410 state(s).
[t=0.0070145s, 1248 KB] Dead ends: 0 state(s).
[t=0.0070145s, 1248 KB] Number of registered states: 73
[t=0.0070145s, 1248 KB] Int hash set load factor: 73/128 = 0.570312
[t=0.0070145s, 1248 KB] Int hash set resizes: 7
[t=0.0070145s, 1248 KB] Search time: 0.0015493s
[t=0.0070145s, 1248 KB] Total time: 0.0070145s
Solution found.
search exit code: 0

