INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_5.pddl --sas-file temp_problems/sas_plan_5
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.005s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.001s wall-clock]
253 relevant atoms
133 auxiliary atoms
386 final queue length
464 total queue pushes
Completing instantiation... [0.000s CPU, 0.004s wall-clock]
Instantiating: [0.000s CPU, 0.011s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
8 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
7 of 8 variables necessary.
0 of 8 mutex groups necessary.
92 of 114 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 7
Translator derived variables: 0
Translator facts: 44
Translator goal facts: 3
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 92
Translator axioms: 0
Translator task size: 396
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.002s wall-clock]
Done! [0.000s CPU, 0.020s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_5
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_5 < temp_problems/sas_plan_5
[t=1.21e-05s, 800 KB] reading input...
[t=0.000576s, 812 KB] done reading input!
[t=0.0022602s, 1148 KB] Initializing landmark count heuristic...
[t=0.0022844s, 1148 KB] Generating landmark graph...
[t=0.0023033s, 1148 KB] Building a landmark graph with reasonable orders.
[t=0.0023901s, 1152 KB] Initializing Exploration...
[t=0.002462s, 1160 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0028451s, 1184 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0028623s, 1184 KB] Landmarks generation time: 0.000497s
[t=0.0028801s, 1184 KB] Discovered 17 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.002889s, 1184 KB] 29 edges
[t=0.0028973s, 1184 KB] approx. reasonable orders
[t=0.002924s, 1184 KB] approx. obedient reasonable orders
[t=0.0029409s, 1184 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0029493s, 1184 KB] Landmarks generation time: 0.0006574s
[t=0.0029578s, 1184 KB] Discovered 17 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0029663s, 1184 KB] 29 edges
[t=0.0029738s, 1184 KB] Landmark graph generation time: 0.0006917s
[t=0.002982s, 1184 KB] Landmark graph contains 17 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0029906s, 1184 KB] Landmark graph contains 29 orderings.
[t=0.0030706s, 1184 KB] Simplifying 92 unary operators... done! [92 unary operators]
[t=0.0031348s, 1192 KB] time to simplify: 6.7e-05s
[t=0.0031564s, 1192 KB] Initializing additive heuristic...
[t=0.0031648s, 1192 KB] Initializing FF heuristic...
[t=0.0033724s, 1192 KB] Building successor generator...done!
[t=0.0034418s, 1192 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0034502s, 1192 KB] time for successor generation creation: 4.28e-05s
[t=0.0034607s, 1192 KB] Variables: 7
[t=0.0034682s, 1192 KB] FactPairs: 44
[t=0.0034758s, 1192 KB] Bytes per state: 4
[t=0.0038263s, 1212 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0038418s, 1212 KB] 5 initial landmarks, 3 goal landmarks
[t=0.0038698s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0038794s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0038873s, 1212 KB] g=0, 1 evaluated, 0 expanded
[t=0.0039072s, 1212 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0039149s, 1212 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0039444s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0039519s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0039594s, 1212 KB] g=1, 3 evaluated, 2 expanded
[t=0.0039796s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0039874s, 1212 KB] g=2, 4 evaluated, 3 expanded
[t=0.0040206s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0040284s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0040362s, 1212 KB] g=3, 6 evaluated, 5 expanded
[t=0.004067s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0040746s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0040821s, 1212 KB] g=4, 8 evaluated, 7 expanded
[t=0.0041115s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.004119s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0041267s, 1212 KB] g=5, 10 evaluated, 9 expanded
[t=0.0041479s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0041559s, 1212 KB] g=6, 11 evaluated, 10 expanded
[t=0.0041751s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0041828s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0041904s, 1212 KB] g=7, 12 evaluated, 11 expanded
[t=0.0042231s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0042331s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0042408s, 1212 KB] g=8, 13 evaluated, 12 expanded
[t=0.0042703s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0042779s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0042854s, 1212 KB] g=9, 15 evaluated, 14 expanded
[t=0.004306s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0043137s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0043212s, 1212 KB] g=10, 16 evaluated, 15 expanded
[t=0.004341s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0043486s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0043562s, 1212 KB] g=11, 17 evaluated, 16 expanded
[t=0.0043827s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0043904s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.004398s, 1212 KB] g=12, 19 evaluated, 18 expanded
[t=0.0044157s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0044233s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0044308s, 1212 KB] g=13, 20 evaluated, 19 expanded
[t=0.004448s, 1212 KB] Solution found!
[t=0.0044568s, 1212 KB] Actual search time: 0.0006084s
load obj9 obj11 obj0 (1)
fly obj9 obj0 obj2 (1)
load obj9 obj16 obj2 (1)
load obj9 obj13 obj2 (1)
unload obj9 obj11 obj2 (1)
fly obj9 obj2 obj0 (1)
unload obj9 obj16 obj0 (1)
unload obj9 obj13 obj0 (1)
load obj12 obj13 obj0 (1)
drive obj12 obj0 obj5 (1)
unload obj12 obj13 obj5 (1)
load obj10 obj11 obj2 (1)
drive obj10 obj2 obj6 (1)
unload obj10 obj11 obj6 (1)
[t=0.0044645s, 1212 KB] Plan length: 14 step(s).
[t=0.0044645s, 1212 KB] Plan cost: 14
[t=0.0044645s, 1212 KB] Expanded 20 state(s).
[t=0.0044645s, 1212 KB] Reopened 0 state(s).
[t=0.0044645s, 1212 KB] Evaluated 21 state(s).
[t=0.0044645s, 1212 KB] Evaluations: 42
[t=0.0044645s, 1212 KB] Generated 229 state(s).
[t=0.0044645s, 1212 KB] Dead ends: 0 state(s).
[t=0.0044645s, 1212 KB] Number of registered states: 21
[t=0.0044645s, 1212 KB] Int hash set load factor: 21/32 = 0.65625
[t=0.0044645s, 1212 KB] Int hash set resizes: 5
[t=0.0044645s, 1212 KB] Search time: 0.000639s
[t=0.0044645s, 1212 KB] Total time: 0.0044645s
Solution found.
search exit code: 0

