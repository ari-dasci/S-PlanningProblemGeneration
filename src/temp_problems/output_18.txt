INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_18.pddl --sas-file temp_problems/sas_plan_18
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.011s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.006s wall-clock]
261 relevant atoms
109 auxiliary atoms
370 final queue length
444 total queue pushes
Completing instantiation... [0.016s CPU, 0.004s wall-clock]
Instantiating: [0.016s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.016s CPU, 0.006s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Reordering and filtering variables...
10 of 11 variables necessary.
0 of 11 mutex groups necessary.
104 of 118 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 10
Translator derived variables: 0
Translator facts: 55
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 104
Translator axioms: 0
Translator task size: 468
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.031s CPU, 0.047s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_18
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_18 < temp_problems/sas_plan_18
[t=3.71e-05s, 720 KB] reading input...
[t=0.0013408s, 740 KB] done reading input!
[t=0.0043142s, 1088 KB] Initializing landmark count heuristic...
[t=0.004353s, 1096 KB] Generating landmark graph...
[t=0.004382s, 1096 KB] Building a landmark graph with reasonable orders.
[t=0.0044507s, 1096 KB] Initializing Exploration...
[t=0.0045821s, 1104 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.005262s, 1132 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0052971s, 1132 KB] Landmarks generation time: 0.0008687s
[t=0.0053084s, 1132 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0053189s, 1132 KB] 31 edges
[t=0.0053278s, 1132 KB] approx. reasonable orders
[t=0.005351s, 1132 KB] approx. obedient reasonable orders
[t=0.0053738s, 1132 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0053829s, 1132 KB] Landmarks generation time: 0.0010248s
[t=0.0053912s, 1132 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0053999s, 1132 KB] 31 edges
[t=0.005407s, 1132 KB] Landmark graph generation time: 0.0010578s
[t=0.0054153s, 1132 KB] Landmark graph contains 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0054243s, 1132 KB] Landmark graph contains 31 orderings.
[t=0.0055481s, 1132 KB] Simplifying 104 unary operators... done! [104 unary operators]
[t=0.0056324s, 1132 KB] time to simplify: 8.94e-05s
[t=0.005669s, 1132 KB] Initializing additive heuristic...
[t=0.0056785s, 1132 KB] Initializing FF heuristic...
[t=0.0057869s, 1132 KB] Building successor generator...done!
[t=0.0059069s, 1140 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0059178s, 1140 KB] time for successor generation creation: 9.75e-05s
[t=0.0059316s, 1140 KB] Variables: 10
[t=0.0059403s, 1140 KB] FactPairs: 55
[t=0.0059503s, 1140 KB] Bytes per state: 4
[t=0.0062282s, 1160 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.006247s, 1160 KB] 8 initial landmarks, 7 goal landmarks
[t=0.0062876s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0063056s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0063139s, 1160 KB] g=0, 1 evaluated, 0 expanded
[t=0.0063453s, 1160 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0063538s, 1160 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0064039s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0064138s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0064213s, 1160 KB] g=1, 3 evaluated, 2 expanded
[t=0.0064545s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0064633s, 1160 KB] g=2, 4 evaluated, 3 expanded
[t=0.0065038s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0065136s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0065221s, 1160 KB] g=3, 5 evaluated, 4 expanded
[t=0.006589s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0066001s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0066085s, 1160 KB] g=4, 7 evaluated, 6 expanded
[t=0.0066723s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0066836s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0066912s, 1160 KB] g=5, 9 evaluated, 8 expanded
[t=0.0067524s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0067641s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0067722s, 1160 KB] g=6, 11 evaluated, 10 expanded
[t=0.0068345s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0068448s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0068573s, 1160 KB] g=8, 13 evaluated, 12 expanded
[t=0.0069154s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0069246s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0069325s, 1160 KB] g=9, 15 evaluated, 14 expanded
[t=0.0069938s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0070052s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0070141s, 1160 KB] g=10, 17 evaluated, 16 expanded
[t=0.0070713s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0070822s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0070896s, 1160 KB] g=11, 19 evaluated, 18 expanded
[t=0.0071489s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0071598s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0071679s, 1160 KB] g=12, 21 evaluated, 20 expanded
[t=0.0072006s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.007211s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0072197s, 1160 KB] g=13, 22 evaluated, 21 expanded
[t=0.0072539s, 1160 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.007263s, 1160 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0072704s, 1160 KB] g=14, 23 evaluated, 22 expanded
[t=0.0073044s, 1160 KB] Solution found!
[t=0.0073143s, 1160 KB] Actual search time: 0.0010609s
load obj9 obj14 obj2 (1)
drive obj9 obj2 obj0 (1)
unload obj9 obj14 obj0 (1)
load obj13 obj6 obj0 (1)
load obj13 obj16 obj0 (1)
load obj13 obj15 obj0 (1)
fly obj13 obj0 obj3 (1)
unload obj13 obj6 obj3 (1)
unload obj13 obj16 obj3 (1)
unload obj13 obj15 obj3 (1)
load obj13 obj11 obj3 (1)
load obj13 obj10 obj3 (1)
fly obj13 obj3 obj0 (1)
unload obj13 obj11 obj0 (1)
unload obj13 obj10 obj0 (1)
[t=0.0073229s, 1160 KB] Plan length: 15 step(s).
[t=0.0073229s, 1160 KB] Plan cost: 15
[t=0.0073229s, 1160 KB] Expanded 23 state(s).
[t=0.0073229s, 1160 KB] Reopened 0 state(s).
[t=0.0073229s, 1160 KB] Evaluated 24 state(s).
[t=0.0073229s, 1160 KB] Evaluations: 48
[t=0.0073229s, 1160 KB] Generated 358 state(s).
[t=0.0073229s, 1160 KB] Dead ends: 0 state(s).
[t=0.0073229s, 1160 KB] Number of registered states: 24
[t=0.0073229s, 1160 KB] Int hash set load factor: 24/32 = 0.75
[t=0.0073229s, 1160 KB] Int hash set resizes: 5
[t=0.0073229s, 1160 KB] Search time: 0.0010967s
[t=0.0073229s, 1160 KB] Total time: 0.0073229s
Solution found.
search exit code: 0

