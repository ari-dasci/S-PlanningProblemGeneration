INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_18.pddl --sas-file temp_problems/sas_plan_18
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
281 relevant atoms
118 auxiliary atoms
399 final queue length
488 total queue pushes
Completing instantiation... [0.000s CPU, 0.002s wall-clock]
Instantiating: [0.000s CPU, 0.007s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
16 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
10 of 10 variables necessary.
0 of 10 mutex groups necessary.
132 of 132 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 10
Translator derived variables: 0
Translator facts: 62
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 132
Translator axioms: 0
Translator task size: 559
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.000s CPU, 0.018s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_18
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_18 < temp_problems/sas_plan_18
[t=1.24e-05s, 728 KB] reading input...
[t=0.0007947s, 752 KB] done reading input!
[t=0.0028731s, 1100 KB] Initializing landmark count heuristic...
[t=0.0028999s, 1100 KB] Generating landmark graph...
[t=0.0029393s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0030222s, 1104 KB] Initializing Exploration...
[t=0.0031698s, 1120 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0037591s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0037916s, 1152 KB] Landmarks generation time: 0.0007908s
[t=0.0038043s, 1152 KB] Discovered 21 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0038169s, 1152 KB] 21 edges
[t=0.0038334s, 1152 KB] approx. reasonable orders
[t=0.0039043s, 1152 KB] approx. obedient reasonable orders
[t=0.0039311s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0039459s, 1152 KB] Landmarks generation time: 0.0010366s
[t=0.0039553s, 1152 KB] Discovered 21 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0039626s, 1152 KB] 21 edges
[t=0.0039691s, 1152 KB] Landmark graph generation time: 0.0010713s
[t=0.0039804s, 1152 KB] Landmark graph contains 21 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0039934s, 1152 KB] Landmark graph contains 21 orderings.
[t=0.0040689s, 1152 KB] Simplifying 132 unary operators... done! [132 unary operators]
[t=0.0041509s, 1164 KB] time to simplify: 8.67e-05s
[t=0.0041781s, 1164 KB] Initializing additive heuristic...
[t=0.0041857s, 1164 KB] Initializing FF heuristic...
[t=0.004254s, 1164 KB] Building successor generator...done!
[t=0.0043533s, 1172 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0043646s, 1172 KB] time for successor generation creation: 7.18e-05s
[t=0.0043738s, 1172 KB] Variables: 10
[t=0.0043805s, 1172 KB] FactPairs: 62
[t=0.0043868s, 1172 KB] Bytes per state: 4
[t=0.0045737s, 1192 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0045857s, 1192 KB] 7 initial landmarks, 7 goal landmarks
[t=0.0046368s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0046498s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0046619s, 1192 KB] g=0, 1 evaluated, 0 expanded
[t=0.0047004s, 1192 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0047098s, 1192 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0047473s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0047554s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0047658s, 1192 KB] g=1, 3 evaluated, 2 expanded
[t=0.004809s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0048196s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0048321s, 1192 KB] g=2, 5 evaluated, 4 expanded
[t=0.0048774s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0048856s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0048961s, 1192 KB] g=3, 7 evaluated, 6 expanded
[t=0.0049347s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0049421s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0049532s, 1192 KB] g=4, 9 evaluated, 8 expanded
[t=0.0049977s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0050057s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0050121s, 1192 KB] g=5, 11 evaluated, 10 expanded
[t=0.0050482s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0050563s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0051586s, 1192 KB] g=6, 13 evaluated, 12 expanded
[t=0.005199s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0052077s, 1192 KB] g=7, 14 evaluated, 13 expanded
[t=0.0052362s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0052485s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0052618s, 1192 KB] g=8, 16 evaluated, 15 expanded
[t=0.0052981s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0053063s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0053131s, 1192 KB] g=9, 18 evaluated, 17 expanded
[t=0.0053439s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0053573s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0053692s, 1192 KB] g=10, 20 evaluated, 19 expanded
[t=0.0054156s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0054294s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0054429s, 1192 KB] g=11, 22 evaluated, 21 expanded
[t=0.0054953s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0055072s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.005517s, 1192 KB] g=12, 24 evaluated, 23 expanded
[t=0.0055695s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0055836s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0055927s, 1192 KB] g=13, 26 evaluated, 25 expanded
[t=0.0056404s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0056521s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0056645s, 1192 KB] g=14, 28 evaluated, 27 expanded
[t=0.0056997s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0057135s, 1192 KB] g=15, 29 evaluated, 28 expanded
[t=0.0057396s, 1192 KB] Solution found!
[t=0.0057546s, 1192 KB] Actual search time: 0.0011639s
load obj8 obj9 obj0 (1)
load obj8 obj7 obj0 (1)
load obj8 obj5 obj0 (1)
load obj8 obj4 obj0 (1)
load obj8 obj3 obj0 (1)
load obj8 obj14 obj0 (1)
fly obj8 obj0 obj10 (1)
unload obj8 obj9 obj10 (1)
unload obj8 obj7 obj10 (1)
unload obj8 obj5 obj10 (1)
unload obj8 obj4 obj10 (1)
unload obj8 obj3 obj10 (1)
load obj8 obj15 obj10 (1)
unload obj8 obj14 obj10 (1)
fly obj8 obj10 obj0 (1)
unload obj8 obj15 obj0 (1)
[t=0.0057646s, 1192 KB] Plan length: 16 step(s).
[t=0.0057646s, 1192 KB] Plan cost: 16
[t=0.0057646s, 1192 KB] Expanded 29 state(s).
[t=0.0057646s, 1192 KB] Reopened 0 state(s).
[t=0.0057646s, 1192 KB] Evaluated 30 state(s).
[t=0.0057646s, 1192 KB] Evaluations: 60
[t=0.0057646s, 1192 KB] Generated 509 state(s).
[t=0.0057646s, 1192 KB] Dead ends: 0 state(s).
[t=0.0057646s, 1192 KB] Number of registered states: 30
[t=0.0057646s, 1192 KB] Int hash set load factor: 30/32 = 0.9375
[t=0.0057646s, 1192 KB] Int hash set resizes: 5
[t=0.0057646s, 1192 KB] Search time: 0.0011918s
[t=0.0057646s, 1192 KB] Total time: 0.0057646s
Solution found.
search exit code: 0

