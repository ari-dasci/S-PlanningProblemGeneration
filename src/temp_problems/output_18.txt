INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_18.pddl --sas-file temp_problems/sas_plan_18
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.010s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.016s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.007s wall-clock]
331 relevant atoms
156 auxiliary atoms
487 final queue length
624 total queue pushes
Completing instantiation... [0.000s CPU, 0.009s wall-clock]
Instantiating: [0.016s CPU, 0.022s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.016s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.016s CPU, 0.003s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.016s CPU, 0.006s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
9 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.005s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
178 of 178 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 64
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 178
Translator axioms: 0
Translator task size: 752
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.006s wall-clock]
Done! [0.062s CPU, 0.055s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_18
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_18 < temp_problems/sas_plan_18
[t=2.02e-05s, 724 KB] reading input...
[t=0.0019853s, 756 KB] done reading input!
[t=0.0044362s, 1112 KB] Initializing landmark count heuristic...
[t=0.0044854s, 1120 KB] Generating landmark graph...
[t=0.004531s, 1120 KB] Building a landmark graph with reasonable orders.
[t=0.0046546s, 1120 KB] Initializing Exploration...
[t=0.0048496s, 1144 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0058033s, 1172 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0058509s, 1172 KB] Landmarks generation time: 0.0012347s
[t=0.0058623s, 1172 KB] Discovered 18 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0058726s, 1172 KB] 19 edges
[t=0.0058817s, 1172 KB] approx. reasonable orders
[t=0.0059277s, 1172 KB] approx. obedient reasonable orders
[t=0.0059498s, 1172 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0059589s, 1172 KB] Landmarks generation time: 0.001459s
[t=0.0059675s, 1172 KB] Discovered 18 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0059763s, 1172 KB] 19 edges
[t=0.0059846s, 1172 KB] Landmark graph generation time: 0.0015041s
[t=0.0059927s, 1172 KB] Landmark graph contains 18 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0060015s, 1172 KB] Landmark graph contains 19 orderings.
[t=0.0061642s, 1172 KB] Simplifying 178 unary operators... done! [178 unary operators]
[t=0.006304s, 1184 KB] time to simplify: 0.000145s
[t=0.0063448s, 1184 KB] Initializing additive heuristic...
[t=0.0063533s, 1184 KB] Initializing FF heuristic...
[t=0.0065327s, 1184 KB] Building successor generator...done!
[t=0.0067222s, 1192 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0067314s, 1192 KB] time for successor generation creation: 0.0001623s
[t=0.006744s, 1192 KB] Variables: 9
[t=0.0067519s, 1192 KB] FactPairs: 64
[t=0.0067596s, 1192 KB] Bytes per state: 4
[t=0.0071169s, 1212 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.007139s, 1212 KB] 5 initial landmarks, 5 goal landmarks
[t=0.0071851s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0071965s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0072041s, 1212 KB] g=0, 1 evaluated, 0 expanded
[t=0.0072355s, 1212 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0072524s, 1212 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0072808s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0072916s, 1212 KB] g=1, 2 evaluated, 1 expanded
[t=0.0073575s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0073669s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0073741s, 1212 KB] g=2, 4 evaluated, 3 expanded
[t=0.0074073s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0074148s, 1212 KB] g=3, 5 evaluated, 4 expanded
[t=0.0074467s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0074541s, 1212 KB] g=4, 6 evaluated, 5 expanded
[t=0.0074852s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0074928s, 1212 KB] g=4, 7 evaluated, 6 expanded
[t=0.0075232s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0075307s, 1212 KB] g=5, 8 evaluated, 7 expanded
[t=0.0076143s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0076245s, 1212 KB] g=5, 11 evaluated, 10 expanded
[t=0.0076697s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0076809s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0076877s, 1212 KB] g=6, 12 evaluated, 11 expanded
[t=0.0077215s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0077358s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.007745s, 1212 KB] g=7, 13 evaluated, 12 expanded
[t=0.0077795s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.007789s, 1212 KB] g=8, 14 evaluated, 13 expanded
[t=0.0078507s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0078646s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0078746s, 1212 KB] g=9, 16 evaluated, 15 expanded
[t=0.0079153s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0079247s, 1212 KB] g=10, 17 evaluated, 16 expanded
[t=0.0079561s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0079636s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0079708s, 1212 KB] g=11, 18 evaluated, 17 expanded
[t=0.0080209s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0080289s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0080359s, 1212 KB] g=12, 20 evaluated, 19 expanded
[t=0.0080942s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0081024s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0081094s, 1212 KB] g=13, 22 evaluated, 21 expanded
[t=0.0081429s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0081518s, 1212 KB] g=14, 23 evaluated, 22 expanded
[t=0.0081838s, 1212 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0081922s, 1212 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0081999s, 1212 KB] g=15, 24 evaluated, 23 expanded
[t=0.0082391s, 1212 KB] Solution found!
[t=0.008252s, 1212 KB] Actual search time: 0.0011055s
drive obj8 obj0 obj11 (1)
load obj8 obj16 obj11 (1)
drive obj8 obj11 obj0 (1)
load obj8 obj3 obj0 (1)
unload obj8 obj16 obj0 (1)
drive obj8 obj0 obj7 (1)
unload obj8 obj3 obj7 (1)
fly obj2 obj0 obj5 (1)
load obj2 obj9 obj5 (1)
fly obj2 obj5 obj0 (1)
unload obj2 obj9 obj0 (1)
load obj13 obj12 obj4 (1)
load obj13 obj10 obj4 (1)
drive obj13 obj4 obj0 (1)
unload obj13 obj12 obj0 (1)
unload obj13 obj10 obj0 (1)
[t=0.0082591s, 1212 KB] Plan length: 16 step(s).
[t=0.0082591s, 1212 KB] Plan cost: 16
[t=0.0082591s, 1212 KB] Expanded 24 state(s).
[t=0.0082591s, 1212 KB] Reopened 0 state(s).
[t=0.0082591s, 1212 KB] Evaluated 25 state(s).
[t=0.0082591s, 1212 KB] Evaluations: 50
[t=0.0082591s, 1212 KB] Generated 366 state(s).
[t=0.0082591s, 1212 KB] Dead ends: 0 state(s).
[t=0.0082591s, 1212 KB] Number of registered states: 25
[t=0.0082591s, 1212 KB] Int hash set load factor: 25/32 = 0.78125
[t=0.0082591s, 1212 KB] Int hash set resizes: 5
[t=0.0082591s, 1212 KB] Search time: 0.0011447s
[t=0.0082591s, 1212 KB] Total time: 0.0082591s
Solution found.
search exit code: 0

