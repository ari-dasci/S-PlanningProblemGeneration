INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_19.pddl --sas-file temp_problems/sas_plan_19
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.008s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.016s CPU, 0.007s wall-clock]
347 relevant atoms
151 auxiliary atoms
498 final queue length
646 total queue pushes
Completing instantiation... [0.000s CPU, 0.008s wall-clock]
Instantiating: [0.016s CPU, 0.020s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.016s CPU, 0.000s wall-clock]
Computing fact groups: [0.016s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.007s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.005s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
192 of 192 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 66
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 192
Translator axioms: 0
Translator task size: 801
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.007s wall-clock]
Done! [0.047s CPU, 0.054s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_19
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_19 < temp_problems/sas_plan_19
[t=1.98e-05s, 724 KB] reading input...
[t=0.0018624s, 756 KB] done reading input!
[t=0.0045992s, 1104 KB] Initializing landmark count heuristic...
[t=0.004628s, 1104 KB] Generating landmark graph...
[t=0.004663s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0047584s, 1104 KB] Initializing Exploration...
[t=0.0049464s, 1124 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0058337s, 1164 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0058647s, 1164 KB] Landmarks generation time: 0.0011353s
[t=0.0058735s, 1164 KB] Discovered 19 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0058817s, 1164 KB] 19 edges
[t=0.0058891s, 1164 KB] approx. reasonable orders
[t=0.0059395s, 1164 KB] approx. obedient reasonable orders
[t=0.0059607s, 1164 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0059687s, 1164 KB] Landmarks generation time: 0.0013366s
[t=0.0059803s, 1164 KB] Discovered 19 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0059907s, 1164 KB] 19 edges
[t=0.0060074s, 1164 KB] Landmark graph generation time: 0.0013828s
[t=0.006015s, 1164 KB] Landmark graph contains 19 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0060257s, 1164 KB] Landmark graph contains 19 orderings.
[t=0.006152s, 1164 KB] Simplifying 192 unary operators... done! [192 unary operators]
[t=0.0062752s, 1176 KB] time to simplify: 0.0001274s
[t=0.0063126s, 1176 KB] Initializing additive heuristic...
[t=0.0063198s, 1176 KB] Initializing FF heuristic...
[t=0.0064057s, 1176 KB] Building successor generator...done!
[t=0.0065411s, 1176 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0065487s, 1176 KB] time for successor generation creation: 0.0001213s
[t=0.006558s, 1176 KB] Variables: 9
[t=0.0065646s, 1176 KB] FactPairs: 66
[t=0.0065709s, 1176 KB] Bytes per state: 4
[t=0.006882s, 1188 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0069072s, 1188 KB] 6 initial landmarks, 6 goal landmarks
[t=0.0070075s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0070435s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0070636s, 1188 KB] g=0, 1 evaluated, 0 expanded
[t=0.0071071s, 1188 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0071152s, 1188 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0071403s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0071481s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0071561s, 1188 KB] g=1, 2 evaluated, 1 expanded
[t=0.0072921s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0073154s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.007324s, 1188 KB] g=2, 5 evaluated, 4 expanded
[t=0.0074866s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0075003s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0075082s, 1188 KB] g=4, 10 evaluated, 9 expanded
[t=0.0076294s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0076421s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.00765s, 1188 KB] g=5, 14 evaluated, 13 expanded
[t=0.007758s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0077687s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.007776s, 1188 KB] g=6, 18 evaluated, 17 expanded
[t=0.0078738s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0078822s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.007889s, 1188 KB] g=7, 22 evaluated, 21 expanded
[t=0.0079912s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0080028s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0080098s, 1188 KB] g=8, 26 evaluated, 25 expanded
[t=0.0080412s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0080496s, 1188 KB] g=9, 27 evaluated, 26 expanded
[t=0.0081191s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0081269s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0081336s, 1188 KB] g=10, 30 evaluated, 29 expanded
[t=0.0081722s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0081823s, 1188 KB] g=11, 31 evaluated, 30 expanded
[t=0.0082353s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0082431s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0082508s, 1188 KB] g=12, 33 evaluated, 32 expanded
[t=0.008299s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0083066s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0083133s, 1188 KB] g=13, 35 evaluated, 34 expanded
[t=0.0083402s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0083483s, 1188 KB] g=14, 36 evaluated, 35 expanded
[t=0.0083854s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0083933s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.008401s, 1188 KB] g=15, 37 evaluated, 36 expanded
[t=0.0084319s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0084414s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0084491s, 1188 KB] g=16, 38 evaluated, 37 expanded
[t=0.0084756s, 1188 KB] Solution found!
[t=0.0084835s, 1188 KB] Actual search time: 0.0015628s
fly obj2 obj0 obj10 (1)
load obj14 obj15 obj12 (1)
fly obj14 obj12 obj0 (1)
load obj14 obj7 obj0 (1)
load obj14 obj6 obj0 (1)
load obj14 obj5 obj0 (1)
load obj14 obj4 obj0 (1)
load obj14 obj3 obj0 (1)
fly obj14 obj0 obj10 (1)
unload obj14 obj5 obj10 (1)
fly obj14 obj10 obj12 (1)
unload obj14 obj7 obj12 (1)
unload obj14 obj4 obj12 (1)
fly obj14 obj12 obj8 (1)
unload obj14 obj6 obj8 (1)
unload obj14 obj3 obj8 (1)
unload obj14 obj15 obj8 (1)
[t=0.0084906s, 1188 KB] Plan length: 17 step(s).
[t=0.0084906s, 1188 KB] Plan cost: 17
[t=0.0084906s, 1188 KB] Expanded 38 state(s).
[t=0.0084906s, 1188 KB] Reopened 0 state(s).
[t=0.0084906s, 1188 KB] Evaluated 39 state(s).
[t=0.0084906s, 1188 KB] Evaluations: 78
[t=0.0084906s, 1188 KB] Generated 595 state(s).
[t=0.0084906s, 1188 KB] Dead ends: 0 state(s).
[t=0.0084906s, 1188 KB] Number of registered states: 39
[t=0.0084906s, 1188 KB] Int hash set load factor: 39/64 = 0.609375
[t=0.0084906s, 1188 KB] Int hash set resizes: 6
[t=0.0084906s, 1188 KB] Search time: 0.0016115s
[t=0.0084906s, 1188 KB] Total time: 0.0084906s
Solution found.
search exit code: 0

