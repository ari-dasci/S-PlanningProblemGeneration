INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_13.pddl --sas-file temp_problems/sas_plan_13
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
253 relevant atoms
133 auxiliary atoms
386 final queue length
464 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.000s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
8 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
8 of 8 variables necessary.
0 of 8 mutex groups necessary.
114 of 114 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 8
Translator derived variables: 0
Translator facts: 55
Translator goal facts: 4
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 114
Translator axioms: 0
Translator task size: 497
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.016s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_13
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_13 < temp_problems/sas_plan_13
[t=8.5e-06s, 720 KB] reading input...
[t=0.0004775s, 740 KB] done reading input!
[t=0.002223s, 1092 KB] Initializing landmark count heuristic...
[t=0.002248s, 1100 KB] Generating landmark graph...
[t=0.0022683s, 1100 KB] Building a landmark graph with reasonable orders.
[t=0.0023286s, 1100 KB] Initializing Exploration...
[t=0.002397s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0027116s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0027234s, 1152 KB] Landmarks generation time: 0.0004067s
[t=0.002731s, 1152 KB] Discovered 22 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0027385s, 1152 KB] 40 edges
[t=0.0027453s, 1152 KB] approx. reasonable orders
[t=0.0027793s, 1152 KB] approx. obedient reasonable orders
[t=0.0028001s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0028074s, 1152 KB] Landmarks generation time: 0.0005509s
[t=0.0028143s, 1152 KB] Discovered 22 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0028213s, 1152 KB] 40 edges
[t=0.0028278s, 1152 KB] Landmark graph generation time: 0.0005817s
[t=0.0028348s, 1152 KB] Landmark graph contains 22 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0028418s, 1152 KB] Landmark graph contains 40 orderings.
[t=0.002894s, 1152 KB] Simplifying 114 unary operators... done! [114 unary operators]
[t=0.0029361s, 1152 KB] time to simplify: 4.4e-05s
[t=0.0029524s, 1152 KB] Initializing additive heuristic...
[t=0.002959s, 1152 KB] Initializing FF heuristic...
[t=0.0030016s, 1152 KB] Building successor generator...done!
[t=0.0030505s, 1156 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0030572s, 1156 KB] time for successor generation creation: 3.59e-05s
[t=0.003065s, 1156 KB] Variables: 8
[t=0.0030716s, 1156 KB] FactPairs: 55
[t=0.0030782s, 1156 KB] Bytes per state: 4
[t=0.0032219s, 1176 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0032318s, 1176 KB] 6 initial landmarks, 4 goal landmarks
[t=0.0032506s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0032576s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.003264s, 1176 KB] g=0, 1 evaluated, 0 expanded
[t=0.0032776s, 1176 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0032844s, 1176 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0033169s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0033236s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0033302s, 1176 KB] g=1, 4 evaluated, 3 expanded
[t=0.0033526s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0033593s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0033663s, 1176 KB] g=2, 6 evaluated, 5 expanded
[t=0.0033812s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.003388s, 1176 KB] g=3, 7 evaluated, 6 expanded
[t=0.0034056s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0034126s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0034192s, 1176 KB] g=4, 8 evaluated, 7 expanded
[t=0.0034353s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0034423s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0034522s, 1176 KB] g=5, 9 evaluated, 8 expanded
[t=0.0034773s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0034851s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0034919s, 1176 KB] g=6, 11 evaluated, 10 expanded
[t=0.0035157s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0035228s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0035668s, 1176 KB] g=7, 13 evaluated, 12 expanded
[t=0.0036067s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.003623s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0036337s, 1176 KB] g=8, 14 evaluated, 13 expanded
[t=0.0036596s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0036706s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0036801s, 1176 KB] g=9, 15 evaluated, 14 expanded
[t=0.0037042s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0037325s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0037445s, 1176 KB] g=10, 16 evaluated, 15 expanded
[t=0.0037692s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0037793s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0037907s, 1176 KB] g=11, 17 evaluated, 16 expanded
[t=0.0038405s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0038502s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0038598s, 1176 KB] g=13, 20 evaluated, 19 expanded
[t=0.0038837s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0038935s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0039028s, 1176 KB] g=14, 21 evaluated, 20 expanded
[t=0.0039375s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0039474s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0039589s, 1176 KB] g=15, 23 evaluated, 22 expanded
[t=0.0039973s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0040064s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0040155s, 1176 KB] g=17, 25 evaluated, 24 expanded
[t=0.0040361s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0040462s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0040552s, 1176 KB] g=18, 26 evaluated, 25 expanded
[t=0.0040775s, 1176 KB] Solution found!
[t=0.0040874s, 1176 KB] Actual search time: 0.0008504s
load obj8 obj7 obj5 (1)
load obj8 obj6 obj5 (1)
drive obj8 obj5 obj2 (1)
unload obj8 obj7 obj2 (1)
unload obj8 obj6 obj2 (1)
load obj4 obj7 obj2 (1)
load obj4 obj6 obj2 (1)
fly obj4 obj2 obj0 (1)
unload obj4 obj7 obj0 (1)
unload obj4 obj6 obj0 (1)
drive obj13 obj11 obj0 (1)
drive obj13 obj0 obj10 (1)
load obj13 obj12 obj10 (1)
drive obj13 obj10 obj0 (1)
unload obj13 obj12 obj0 (1)
drive obj13 obj0 obj14 (1)
load obj13 obj15 obj14 (1)
drive obj13 obj14 obj0 (1)
unload obj13 obj15 obj0 (1)
[t=0.0040963s, 1176 KB] Plan length: 19 step(s).
[t=0.0040963s, 1176 KB] Plan cost: 19
[t=0.0040963s, 1176 KB] Expanded 26 state(s).
[t=0.0040963s, 1176 KB] Reopened 0 state(s).
[t=0.0040963s, 1176 KB] Evaluated 27 state(s).
[t=0.0040963s, 1176 KB] Evaluations: 54
[t=0.0040963s, 1176 KB] Generated 267 state(s).
[t=0.0040963s, 1176 KB] Dead ends: 0 state(s).
[t=0.0040963s, 1176 KB] Number of registered states: 27
[t=0.0040963s, 1176 KB] Int hash set load factor: 27/32 = 0.84375
[t=0.0040963s, 1176 KB] Int hash set resizes: 5
[t=0.0040963s, 1176 KB] Search time: 0.000875s
[t=0.0040963s, 1176 KB] Total time: 0.0040963s
Solution found.
search exit code: 0

