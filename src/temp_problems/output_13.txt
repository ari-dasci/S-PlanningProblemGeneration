INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_13.pddl --sas-file temp_problems/sas_plan_13
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.006s wall-clock]
284 relevant atoms
116 auxiliary atoms
400 final queue length
494 total queue pushes
Completing instantiation... [0.000s CPU, 0.004s wall-clock]
Instantiating: [0.000s CPU, 0.010s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
138 of 138 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 63
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 138
Translator axioms: 0
Translator task size: 608
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.010s wall-clock]
Done! [0.000s CPU, 0.030s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_13
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_13 < temp_problems/sas_plan_13
[t=1.04e-05s, 736 KB] reading input...
[t=0.0007055s, 764 KB] done reading input!
[t=0.0019123s, 1104 KB] Initializing landmark count heuristic...
[t=0.0019286s, 1104 KB] Generating landmark graph...
[t=0.0019447s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0019986s, 1104 KB] Initializing Exploration...
[t=0.0020726s, 1124 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.002628s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0026501s, 1160 KB] Landmarks generation time: 0.0006663s
[t=0.0026614s, 1160 KB] Discovered 27 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0026714s, 1160 KB] 37 edges
[t=0.0026814s, 1160 KB] approx. reasonable orders
[t=0.0027565s, 1160 KB] approx. obedient reasonable orders
[t=0.0027935s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0028026s, 1160 KB] Landmarks generation time: 0.0008679s
[t=0.0028106s, 1160 KB] Discovered 27 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0028204s, 1160 KB] 37 edges
[t=0.0028274s, 1160 KB] Landmark graph generation time: 0.0009005s
[t=0.0028345s, 1160 KB] Landmark graph contains 27 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.002842s, 1160 KB] Landmark graph contains 37 orderings.
[t=0.0029203s, 1160 KB] Simplifying 138 unary operators... done! [138 unary operators]
[t=0.0029894s, 1160 KB] time to simplify: 7.27e-05s
[t=0.0030131s, 1160 KB] Initializing additive heuristic...
[t=0.0030223s, 1160 KB] Initializing FF heuristic...
[t=0.0030855s, 1160 KB] Building successor generator...done!
[t=0.0031728s, 1172 KB] peak memory difference for successor generator creation: 12 KB
[t=0.0031834s, 1172 KB] time for successor generation creation: 6.74e-05s
[t=0.003195s, 1172 KB] Variables: 11
[t=0.0032044s, 1172 KB] FactPairs: 63
[t=0.0032281s, 1172 KB] Bytes per state: 4
[t=0.0034554s, 1192 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0034774s, 1192 KB] 9 initial landmarks, 8 goal landmarks
[t=0.0035s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0035102s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0035189s, 1192 KB] g=0, 1 evaluated, 0 expanded
[t=0.0035427s, 1192 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0035524s, 1192 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.003569s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0035763s, 1192 KB] g=1, 2 evaluated, 1 expanded
[t=0.0036166s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0036272s, 1192 KB] g=1, 4 evaluated, 3 expanded
[t=0.0036547s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0036651s, 1192 KB] g=2, 5 evaluated, 4 expanded
[t=0.0038831s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0039004s, 1192 KB] g=2, 10 evaluated, 9 expanded
[t=0.0039264s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0039337s, 1192 KB] g=3, 11 evaluated, 10 expanded
[t=0.0040116s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0040223s, 1192 KB] g=3, 16 evaluated, 15 expanded
[t=0.0040456s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0040544s, 1192 KB] g=4, 17 evaluated, 16 expanded
[t=0.0041387s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0041507s, 1192 KB] g=4, 22 evaluated, 21 expanded
[t=0.0041879s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0041989s, 1192 KB] g=5, 24 evaluated, 23 expanded
[t=0.0042418s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0042619s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.004273s, 1192 KB] g=6, 26 evaluated, 25 expanded
[t=0.0043305s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0043421s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.004349s, 1192 KB] g=7, 29 evaluated, 28 expanded
[t=0.0043949s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0044031s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0044129s, 1192 KB] g=8, 32 evaluated, 31 expanded
[t=0.0044561s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0044636s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0044702s, 1192 KB] g=9, 35 evaluated, 34 expanded
[t=0.0045087s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0045158s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0045221s, 1192 KB] g=10, 38 evaluated, 37 expanded
[t=0.0045563s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0045629s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0045693s, 1192 KB] g=11, 41 evaluated, 40 expanded
[t=0.004605s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0046117s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0046181s, 1192 KB] g=13, 44 evaluated, 43 expanded
[t=0.0046331s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0046395s, 1192 KB] g=14, 45 evaluated, 44 expanded
[t=0.0046647s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0046711s, 1192 KB] g=14, 47 evaluated, 46 expanded
[t=0.0046863s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0046928s, 1192 KB] g=15, 48 evaluated, 47 expanded
[t=0.0047088s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0047151s, 1192 KB] g=15, 49 evaluated, 48 expanded
[t=0.0047567s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0047633s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0047697s, 1192 KB] g=16, 53 evaluated, 52 expanded
[t=0.004785s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0047914s, 1192 KB] g=17, 54 evaluated, 53 expanded
[t=0.004806s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0048128s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0048191s, 1192 KB] g=18, 55 evaluated, 54 expanded
[t=0.0048352s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0048417s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0048481s, 1192 KB] g=19, 56 evaluated, 55 expanded
[t=0.0048624s, 1192 KB] Solution found!
[t=0.0048694s, 1192 KB] Actual search time: 0.0013853s
load obj8 obj15 obj3 (1)
load obj8 obj14 obj3 (1)
load obj8 obj13 obj3 (1)
load obj8 obj12 obj3 (1)
fly obj8 obj3 obj0 (1)
load obj8 obj16 obj0 (1)
unload obj8 obj15 obj0 (1)
unload obj8 obj14 obj0 (1)
unload obj8 obj12 obj0 (1)
load obj8 obj11 obj0 (1)
load obj8 obj10 obj0 (1)
fly obj8 obj0 obj6 (1)
load obj8 obj9 obj6 (1)
unload obj8 obj13 obj6 (1)
fly obj8 obj6 obj0 (1)
unload obj8 obj9 obj0 (1)
fly obj8 obj0 obj3 (1)
unload obj8 obj16 obj3 (1)
unload obj8 obj11 obj3 (1)
unload obj8 obj10 obj3 (1)
[t=0.0048759s, 1192 KB] Plan length: 20 step(s).
[t=0.0048759s, 1192 KB] Plan cost: 20
[t=0.0048759s, 1192 KB] Expanded 56 state(s).
[t=0.0048759s, 1192 KB] Reopened 0 state(s).
[t=0.0048759s, 1192 KB] Evaluated 57 state(s).
[t=0.0048759s, 1192 KB] Evaluations: 114
[t=0.0048759s, 1192 KB] Generated 762 state(s).
[t=0.0048759s, 1192 KB] Dead ends: 0 state(s).
[t=0.0048759s, 1192 KB] Number of registered states: 57
[t=0.0048759s, 1192 KB] Int hash set load factor: 57/64 = 0.890625
[t=0.0048759s, 1192 KB] Int hash set resizes: 6
[t=0.0048759s, 1192 KB] Search time: 0.0014224s
[t=0.0048759s, 1192 KB] Total time: 0.0048759s
Solution found.
search exit code: 0

