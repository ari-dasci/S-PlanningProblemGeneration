INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_11.pddl --sas-file temp_problems/sas_plan_11
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.005s wall-clock]
290 relevant atoms
122 auxiliary atoms
412 final queue length
506 total queue pushes
Completing instantiation... [0.016s CPU, 0.008s wall-clock]
Instantiating: [0.016s CPU, 0.018s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.009s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.005s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
138 of 138 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 62
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 138
Translator axioms: 0
Translator task size: 576
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.005s wall-clock]
Done! [0.031s CPU, 0.053s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_11
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_11 < temp_problems/sas_plan_11
[t=1.55e-05s, 716 KB] reading input...
[t=0.001465s, 744 KB] done reading input!
[t=0.0043319s, 1088 KB] Initializing landmark count heuristic...
[t=0.0043676s, 1096 KB] Generating landmark graph...
[t=0.0044029s, 1096 KB] Building a landmark graph with reasonable orders.
[t=0.004493s, 1096 KB] Initializing Exploration...
[t=0.0046477s, 1112 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0055141s, 1136 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0055456s, 1136 KB] Landmarks generation time: 0.0010837s
[t=0.0055561s, 1136 KB] Discovered 23 landmarks, of which 9 are disjunctive and 0 are conjunctive.
[t=0.0055658s, 1136 KB] 34 edges
[t=0.0055746s, 1136 KB] approx. reasonable orders
[t=0.0056503s, 1136 KB] approx. obedient reasonable orders
[t=0.0056754s, 1136 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0056854s, 1136 KB] Landmarks generation time: 0.0013124s
[t=0.0056941s, 1136 KB] Discovered 23 landmarks, of which 9 are disjunctive and 0 are conjunctive.
[t=0.0057034s, 1136 KB] 34 edges
[t=0.0057111s, 1136 KB] Landmark graph generation time: 0.0013474s
[t=0.0057195s, 1136 KB] Landmark graph contains 23 landmarks, of which 9 are disjunctive and 0 are conjunctive.
[t=0.0057289s, 1136 KB] Landmark graph contains 34 orderings.
[t=0.0058684s, 1136 KB] Simplifying 138 unary operators... done! [138 unary operators]
[t=0.0059878s, 1148 KB] time to simplify: 0.0001255s
[t=0.0060238s, 1148 KB] Initializing additive heuristic...
[t=0.006032s, 1148 KB] Initializing FF heuristic...
[t=0.0061494s, 1148 KB] Building successor generator...done!
[t=0.0062836s, 1156 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0062922s, 1156 KB] time for successor generation creation: 0.000115s
[t=0.0063035s, 1156 KB] Variables: 9
[t=0.0063109s, 1156 KB] FactPairs: 62
[t=0.0063179s, 1156 KB] Bytes per state: 4
[t=0.0066188s, 1176 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0066376s, 1176 KB] 7 initial landmarks, 7 goal landmarks
[t=0.0066795s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0066902s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0066985s, 1176 KB] g=0, 1 evaluated, 0 expanded
[t=0.0067324s, 1176 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.006742s, 1176 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0067656s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0067751s, 1176 KB] g=1, 2 evaluated, 1 expanded
[t=0.0068483s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0068587s, 1176 KB] g=1, 4 evaluated, 3 expanded
[t=0.0068945s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.006903s, 1176 KB] g=2, 5 evaluated, 4 expanded
[t=0.0070543s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0070655s, 1176 KB] g=2, 10 evaluated, 9 expanded
[t=0.0070998s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0071087s, 1176 KB] g=3, 11 evaluated, 10 expanded
[t=0.0071457s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0071546s, 1176 KB] g=3, 12 evaluated, 11 expanded
[t=0.0072987s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0073092s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0073176s, 1176 KB] g=4, 17 evaluated, 16 expanded
[t=0.0074036s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0074141s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0074216s, 1176 KB] g=5, 20 evaluated, 19 expanded
[t=0.0075025s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0075152s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.007525s, 1176 KB] g=6, 23 evaluated, 22 expanded
[t=0.0076046s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0076135s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0076213s, 1176 KB] g=7, 26 evaluated, 25 expanded
[t=0.0077125s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0077228s, 1176 KB] g=8, 29 evaluated, 28 expanded
[t=0.0077831s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0077918s, 1176 KB] g=8, 31 evaluated, 30 expanded
[t=0.0079192s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0079298s, 1176 KB] g=9, 36 evaluated, 35 expanded
[t=0.0079982s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0080113s, 1176 KB] g=10, 38 evaluated, 37 expanded
[t=0.0080725s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0080825s, 1176 KB] g=11, 40 evaluated, 39 expanded
[t=0.0081155s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0081246s, 1176 KB] g=10, 41 evaluated, 40 expanded
[t=0.0083185s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0083521s, 1176 KB] g=12, 46 evaluated, 45 expanded
[t=0.008459s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0084763s, 1176 KB] g=13, 50 evaluated, 49 expanded
[t=0.0085096s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0085184s, 1176 KB] g=13, 51 evaluated, 50 expanded
[t=0.0085511s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0085671s, 1176 KB] g=14, 52 evaluated, 51 expanded
[t=0.0085987s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0086086s, 1176 KB] g=14, 53 evaluated, 52 expanded
[t=0.00869s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0087078s, 1176 KB] g=15, 56 evaluated, 55 expanded
[t=0.008763s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0087745s, 1176 KB] g=16, 58 evaluated, 57 expanded
[t=0.0088059s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0088155s, 1176 KB] g=16, 59 evaluated, 58 expanded
[t=0.0088538s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0088711s, 1176 KB] g=17, 60 evaluated, 59 expanded
[t=0.0089068s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0089174s, 1176 KB] g=17, 61 evaluated, 60 expanded
[t=0.0089685s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0089794s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0089866s, 1176 KB] g=18, 63 evaluated, 62 expanded
[t=0.0090206s, 1176 KB] Solution found!
[t=0.0090302s, 1176 KB] Actual search time: 0.0023857s
load obj4 obj15 obj0 (1)
load obj4 obj14 obj0 (1)
fly obj4 obj0 obj2 (1)
load obj4 obj16 obj2 (1)
unload obj4 obj15 obj2 (1)
unload obj4 obj14 obj2 (1)
load obj4 obj10 obj2 (1)
load obj13 obj11 obj0 (1)
fly obj13 obj0 obj5 (1)
fly obj4 obj2 obj5 (1)
load obj4 obj17 obj5 (1)
load obj4 obj12 obj5 (1)
unload obj4 obj10 obj5 (1)
fly obj4 obj5 obj0 (1)
unload obj4 obj16 obj0 (1)
unload obj4 obj12 obj0 (1)
fly obj4 obj0 obj2 (1)
unload obj4 obj17 obj2 (1)
unload obj13 obj11 obj5 (1)
[t=0.0090383s, 1176 KB] Plan length: 19 step(s).
[t=0.0090383s, 1176 KB] Plan cost: 19
[t=0.0090383s, 1176 KB] Expanded 63 state(s).
[t=0.0090383s, 1176 KB] Reopened 0 state(s).
[t=0.0090383s, 1176 KB] Evaluated 64 state(s).
[t=0.0090383s, 1176 KB] Evaluations: 128
[t=0.0090383s, 1176 KB] Generated 873 state(s).
[t=0.0090383s, 1176 KB] Dead ends: 0 state(s).
[t=0.0090383s, 1176 KB] Number of registered states: 64
[t=0.0090383s, 1176 KB] Int hash set load factor: 64/64 = 1
[t=0.0090383s, 1176 KB] Int hash set resizes: 6
[t=0.0090383s, 1176 KB] Search time: 0.0024216s
[t=0.0090383s, 1176 KB] Total time: 0.0090383s
Solution found.
search exit code: 0

