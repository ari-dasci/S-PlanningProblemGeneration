INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_11.pddl --sas-file temp_problems/sas_plan_11
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.002s wall-clock]
267 relevant atoms
134 auxiliary atoms
401 final queue length
483 total queue pushes
Completing instantiation... [0.000s CPU, 0.002s wall-clock]
Instantiating: [0.000s CPU, 0.006s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.001s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
8 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
8 of 8 variables necessary.
0 of 8 mutex groups necessary.
124 of 124 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 8
Translator derived variables: 0
Translator facts: 60
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 124
Translator axioms: 0
Translator task size: 545
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.000s CPU, 0.014s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_11
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_11 < temp_problems/sas_plan_11
[t=1.98e-05s, 720 KB] reading input...
[t=0.000493s, 740 KB] done reading input!
[t=0.0017872s, 1092 KB] Initializing landmark count heuristic...
[t=0.0018074s, 1092 KB] Generating landmark graph...
[t=0.0018241s, 1092 KB] Building a landmark graph with reasonable orders.
[t=0.0018916s, 1092 KB] Initializing Exploration...
[t=0.0019607s, 1108 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0022955s, 1128 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.002309s, 1128 KB] Landmarks generation time: 0.0004348s
[t=0.0023168s, 1128 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0023252s, 1128 KB] 41 edges
[t=0.0023332s, 1128 KB] approx. reasonable orders
[t=0.0023653s, 1128 KB] approx. obedient reasonable orders
[t=0.0023789s, 1128 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0023857s, 1128 KB] Landmarks generation time: 0.0005723s
[t=0.0023927s, 1128 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0023997s, 1128 KB] 41 edges
[t=0.0024061s, 1128 KB] Landmark graph generation time: 0.0006006s
[t=0.002413s, 1128 KB] Landmark graph contains 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.00242s, 1128 KB] Landmark graph contains 41 orderings.
[t=0.0024826s, 1128 KB] Simplifying 124 unary operators... done! [124 unary operators]
[t=0.0025297s, 1128 KB] time to simplify: 4.93e-05s
[t=0.0025475s, 1128 KB] Initializing additive heuristic...
[t=0.0025541s, 1128 KB] Initializing FF heuristic...
[t=0.0026046s, 1128 KB] Building successor generator...done!
[t=0.0026635s, 1132 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0026702s, 1132 KB] time for successor generation creation: 4.57e-05s
[t=0.0026791s, 1132 KB] Variables: 8
[t=0.0026859s, 1132 KB] FactPairs: 60
[t=0.0026924s, 1132 KB] Bytes per state: 4
[t=0.0028763s, 1152 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0028872s, 1152 KB] 7 initial landmarks, 5 goal landmarks
[t=0.0029115s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0029187s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0029253s, 1152 KB] g=0, 1 evaluated, 0 expanded
[t=0.0029411s, 1152 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0029479s, 1152 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0029799s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0029869s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0029936s, 1152 KB] g=1, 4 evaluated, 3 expanded
[t=0.0030193s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0030258s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0030324s, 1152 KB] g=2, 6 evaluated, 5 expanded
[t=0.003057s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0030639s, 1152 KB] g=3, 8 evaluated, 7 expanded
[t=0.0030912s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.003098s, 1152 KB] g=4, 10 evaluated, 9 expanded
[t=0.0031143s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0031209s, 1152 KB] g=4, 11 evaluated, 10 expanded
[t=0.0031543s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0031612s, 1152 KB] g=5, 14 evaluated, 13 expanded
[t=0.0031945s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0032009s, 1152 KB] g=5, 17 evaluated, 16 expanded
[t=0.0032161s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0032229s, 1152 KB] g=6, 18 evaluated, 17 expanded
[t=0.003248s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.003257s, 1152 KB] g=7, 20 evaluated, 19 expanded
[t=0.0032821s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0032888s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0032986s, 1152 KB] g=8, 22 evaluated, 21 expanded
[t=0.0033234s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0033303s, 1152 KB] g=9, 24 evaluated, 23 expanded
[t=0.0033567s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0033636s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0033766s, 1152 KB] g=10, 26 evaluated, 25 expanded
[t=0.0034097s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0034165s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.003423s, 1152 KB] g=11, 29 evaluated, 28 expanded
[t=0.0034491s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0034558s, 1152 KB] g=12, 31 evaluated, 30 expanded
[t=0.0034842s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0034915s, 1152 KB] g=13, 33 evaluated, 32 expanded
[t=0.0035264s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0035335s, 1152 KB] g=14, 36 evaluated, 35 expanded
[t=0.0035703s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0035772s, 1152 KB] g=16, 39 evaluated, 38 expanded
[t=0.0035947s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0036014s, 1152 KB] g=17, 40 evaluated, 39 expanded
[t=0.0036167s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0036231s, 1152 KB] g=17, 41 evaluated, 40 expanded
[t=0.0036391s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0036458s, 1152 KB] g=18, 42 evaluated, 41 expanded
[t=0.003661s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0036678s, 1152 KB] g=18, 43 evaluated, 42 expanded
[t=0.0036914s, 1152 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0036978s, 1152 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0037042s, 1152 KB] g=19, 45 evaluated, 44 expanded
[t=0.003719s, 1152 KB] Solution found!
[t=0.0037261s, 1152 KB] Actual search time: 0.0008334s
load obj2 obj7 obj0 (1)
load obj2 obj6 obj0 (1)
fly obj2 obj0 obj3 (1)
unload obj2 obj7 obj3 (1)
unload obj2 obj6 obj3 (1)
load obj2 obj16 obj3 (1)
fly obj2 obj3 obj0 (1)
unload obj2 obj16 obj0 (1)
drive obj13 obj3 obj5 (1)
load obj13 obj15 obj5 (1)
load obj13 obj12 obj5 (1)
drive obj13 obj5 obj3 (1)
unload obj13 obj15 obj3 (1)
unload obj13 obj12 obj3 (1)
fly obj2 obj0 obj3 (1)
load obj2 obj15 obj3 (1)
load obj2 obj12 obj3 (1)
fly obj2 obj3 obj0 (1)
unload obj2 obj15 obj0 (1)
unload obj2 obj12 obj0 (1)
[t=0.0037326s, 1152 KB] Plan length: 20 step(s).
[t=0.0037326s, 1152 KB] Plan cost: 20
[t=0.0037326s, 1152 KB] Expanded 45 state(s).
[t=0.0037326s, 1152 KB] Reopened 0 state(s).
[t=0.0037326s, 1152 KB] Evaluated 46 state(s).
[t=0.0037326s, 1152 KB] Evaluations: 92
[t=0.0037326s, 1152 KB] Generated 549 state(s).
[t=0.0037326s, 1152 KB] Dead ends: 0 state(s).
[t=0.0037326s, 1152 KB] Number of registered states: 46
[t=0.0037326s, 1152 KB] Int hash set load factor: 46/64 = 0.71875
[t=0.0037326s, 1152 KB] Int hash set resizes: 6
[t=0.0037326s, 1152 KB] Search time: 0.0008571s
[t=0.0037326s, 1152 KB] Total time: 0.0037326s
Solution found.
search exit code: 0

