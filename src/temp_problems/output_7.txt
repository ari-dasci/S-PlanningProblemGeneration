INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_7.pddl --sas-file temp_problems/sas_plan_7
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.005s wall-clock]
290 relevant atoms
122 auxiliary atoms
412 final queue length
506 total queue pushes
Completing instantiation... [0.000s CPU, 0.005s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.016s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.016s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.007s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
138 of 138 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 62
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 138
Translator axioms: 0
Translator task size: 576
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.016s CPU, 0.047s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_7
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_7 < temp_problems/sas_plan_7
[t=1.99e-05s, 720 KB] reading input...
[t=0.0012576s, 748 KB] done reading input!
[t=0.0040309s, 1092 KB] Initializing landmark count heuristic...
[t=0.004073s, 1100 KB] Generating landmark graph...
[t=0.004104s, 1100 KB] Building a landmark graph with reasonable orders.
[t=0.0041957s, 1100 KB] Initializing Exploration...
[t=0.00436s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0052347s, 1140 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0052661s, 1140 KB] Landmarks generation time: 0.0010999s
[t=0.0052781s, 1140 KB] Discovered 23 landmarks, of which 9 are disjunctive and 0 are conjunctive.
[t=0.005296s, 1140 KB] 33 edges
[t=0.0053077s, 1140 KB] approx. reasonable orders
[t=0.0053865s, 1140 KB] approx. obedient reasonable orders
[t=0.0054211s, 1140 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.005432s, 1140 KB] Landmarks generation time: 0.0013552s
[t=0.0054435s, 1140 KB] Discovered 23 landmarks, of which 9 are disjunctive and 0 are conjunctive.
[t=0.0054528s, 1140 KB] 33 edges
[t=0.0054602s, 1140 KB] Landmark graph generation time: 0.0013919s
[t=0.0054688s, 1140 KB] Landmark graph contains 23 landmarks, of which 9 are disjunctive and 0 are conjunctive.
[t=0.0054786s, 1140 KB] Landmark graph contains 33 orderings.
[t=0.005605s, 1140 KB] Simplifying 138 unary operators... done! [138 unary operators]
[t=0.0057077s, 1140 KB] time to simplify: 0.0001089s
[t=0.0057454s, 1140 KB] Initializing additive heuristic...
[t=0.0057552s, 1140 KB] Initializing FF heuristic...
[t=0.0058721s, 1148 KB] Building successor generator...done!
[t=0.0060045s, 1156 KB] peak memory difference for successor generator creation: 8 KB
[t=0.006014s, 1156 KB] time for successor generation creation: 0.0001117s
[t=0.0060247s, 1156 KB] Variables: 9
[t=0.0060325s, 1156 KB] FactPairs: 62
[t=0.0060393s, 1156 KB] Bytes per state: 4
[t=0.0063173s, 1176 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0063387s, 1176 KB] 7 initial landmarks, 7 goal landmarks
[t=0.0063769s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0063876s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0063956s, 1176 KB] g=0, 1 evaluated, 0 expanded
[t=0.0064322s, 1176 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0064416s, 1176 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0064625s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0064714s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0064795s, 1176 KB] g=1, 2 evaluated, 1 expanded
[t=0.0065496s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0065596s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0065672s, 1176 KB] g=2, 4 evaluated, 3 expanded
[t=0.0066565s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0066668s, 1176 KB] g=3, 7 evaluated, 6 expanded
[t=0.0067354s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0067452s, 1176 KB] g=3, 9 evaluated, 8 expanded
[t=0.0068559s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0068665s, 1176 KB] g=4, 13 evaluated, 12 expanded
[t=0.0069283s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0069375s, 1176 KB] g=4, 15 evaluated, 14 expanded
[t=0.0070477s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0070587s, 1176 KB] g=5, 19 evaluated, 18 expanded
[t=0.0071273s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0071371s, 1176 KB] g=5, 21 evaluated, 20 expanded
[t=0.0072147s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0072273s, 1176 KB] g=6, 24 evaluated, 23 expanded
[t=0.0073146s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0073256s, 1176 KB] g=6, 27 evaluated, 26 expanded
[t=0.0074599s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0074715s, 1176 KB] g=7, 32 evaluated, 31 expanded
[t=0.0076242s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0076372s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0076441s, 1176 KB] g=8, 38 evaluated, 37 expanded
[t=0.0076743s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0076813s, 1176 KB] g=9, 39 evaluated, 38 expanded
[t=0.0077033s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0077094s, 1176 KB] g=10, 40 evaluated, 39 expanded
[t=0.0077519s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0077596s, 1176 KB] g=11, 42 evaluated, 41 expanded
[t=0.0078151s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0078217s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0078277s, 1176 KB] g=12, 45 evaluated, 44 expanded
[t=0.0078867s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0078939s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0078998s, 1176 KB] g=13, 48 evaluated, 47 expanded
[t=0.0079421s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0079489s, 1176 KB] g=14, 50 evaluated, 49 expanded
[t=0.0079874s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0079938s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0080001s, 1176 KB] g=15, 52 evaluated, 51 expanded
[t=0.0080382s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0080447s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0080507s, 1176 KB] g=16, 54 evaluated, 53 expanded
[t=0.0080874s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.008094s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0080999s, 1176 KB] g=17, 56 evaluated, 55 expanded
[t=0.008123s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0081306s, 1176 KB] g=18, 57 evaluated, 56 expanded
[t=0.0081595s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0081741s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0081866s, 1176 KB] g=19, 58 evaluated, 57 expanded
[t=0.0082221s, 1176 KB] Solution found!
[t=0.0082337s, 1176 KB] Actual search time: 0.0018876s
fly obj6 obj2 obj0 (1)
load obj6 obj12 obj0 (1)
load obj15 obj8 obj2 (1)
load obj15 obj17 obj2 (1)
fly obj15 obj2 obj4 (1)
unload obj15 obj8 obj4 (1)
load obj15 obj16 obj4 (1)
load obj15 obj11 obj4 (1)
fly obj6 obj0 obj4 (1)
unload obj6 obj12 obj4 (1)
fly obj15 obj4 obj0 (1)
unload obj15 obj17 obj0 (1)
unload obj15 obj11 obj0 (1)
fly obj15 obj0 obj2 (1)
unload obj15 obj16 obj2 (1)
load obj15 obj14 obj2 (1)
load obj15 obj13 obj2 (1)
fly obj15 obj2 obj4 (1)
unload obj15 obj14 obj4 (1)
unload obj15 obj13 obj4 (1)
[t=0.0082403s, 1176 KB] Plan length: 20 step(s).
[t=0.0082403s, 1176 KB] Plan cost: 20
[t=0.0082403s, 1176 KB] Expanded 58 state(s).
[t=0.0082403s, 1176 KB] Reopened 0 state(s).
[t=0.0082403s, 1176 KB] Evaluated 59 state(s).
[t=0.0082403s, 1176 KB] Evaluations: 118
[t=0.0082403s, 1176 KB] Generated 812 state(s).
[t=0.0082403s, 1176 KB] Dead ends: 0 state(s).
[t=0.0082403s, 1176 KB] Number of registered states: 59
[t=0.0082403s, 1176 KB] Int hash set load factor: 59/64 = 0.921875
[t=0.0082403s, 1176 KB] Int hash set resizes: 6
[t=0.0082403s, 1176 KB] Search time: 0.0019257s
[t=0.0082403s, 1176 KB] Total time: 0.0082403s
Solution found.
search exit code: 0

