INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_7.pddl --sas-file temp_problems/sas_plan_7
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
297 relevant atoms
135 auxiliary atoms
432 final queue length
535 total queue pushes
Completing instantiation... [0.000s CPU, 0.002s wall-clock]
Instantiating: [0.000s CPU, 0.008s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
146 of 146 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 65
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 146
Translator axioms: 0
Translator task size: 652
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.000s CPU, 0.022s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_7
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_7 < temp_problems/sas_plan_7
[t=8.2e-06s, 728 KB] reading input...
[t=0.0008401s, 756 KB] done reading input!
[t=0.0024151s, 1096 KB] Initializing landmark count heuristic...
[t=0.0024358s, 1104 KB] Generating landmark graph...
[t=0.002451s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0025158s, 1108 KB] Initializing Exploration...
[t=0.0026198s, 1132 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0033628s, 1168 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0033804s, 1168 KB] Landmarks generation time: 0.0008844s
[t=0.0033901s, 1168 KB] Discovered 30 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0033998s, 1168 KB] 64 edges
[t=0.0034088s, 1168 KB] approx. reasonable orders
[t=0.0034801s, 1168 KB] approx. obedient reasonable orders
[t=0.0035053s, 1168 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0035175s, 1168 KB] Landmarks generation time: 0.0010765s
[t=0.0035278s, 1168 KB] Discovered 30 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0035373s, 1168 KB] 64 edges
[t=0.0035455s, 1168 KB] Landmark graph generation time: 0.0011119s
[t=0.0035546s, 1168 KB] Landmark graph contains 30 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0035639s, 1168 KB] Landmark graph contains 64 orderings.
[t=0.0036501s, 1168 KB] Simplifying 146 unary operators... done! [146 unary operators]
[t=0.0037275s, 1180 KB] time to simplify: 7.99e-05s
[t=0.0037553s, 1180 KB] Initializing additive heuristic...
[t=0.0037633s, 1180 KB] Initializing FF heuristic...
[t=0.0038289s, 1180 KB] Building successor generator...done!
[t=0.0039159s, 1180 KB] peak memory difference for successor generator creation: 0 KB
[t=0.003925s, 1180 KB] time for successor generation creation: 7.03e-05s
[t=0.0039354s, 1180 KB] Variables: 11
[t=0.003944s, 1180 KB] FactPairs: 65
[t=0.0039523s, 1180 KB] Bytes per state: 4
[t=0.0041746s, 1200 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0041913s, 1200 KB] 7 initial landmarks, 6 goal landmarks
[t=0.0042139s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0042211s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0042275s, 1200 KB] g=0, 1 evaluated, 0 expanded
[t=0.0042448s, 1200 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0042515s, 1200 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0042665s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.004275s, 1200 KB] g=1, 2 evaluated, 1 expanded
[t=0.0043318s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0043383s, 1200 KB] g=1, 6 evaluated, 5 expanded
[t=0.0043602s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0043697s, 1200 KB] g=2, 7 evaluated, 6 expanded
[t=0.0044131s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0044246s, 1200 KB] g=2, 9 evaluated, 8 expanded
[t=0.0044999s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.004515s, 1200 KB] g=3, 13 evaluated, 12 expanded
[t=0.0045531s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0045632s, 1200 KB] g=3, 15 evaluated, 14 expanded
[t=0.0046788s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0046921s, 1200 KB] g=4, 22 evaluated, 21 expanded
[t=0.0047179s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0047277s, 1200 KB] g=4, 23 evaluated, 22 expanded
[t=0.0048631s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0048758s, 1200 KB] g=5, 31 evaluated, 30 expanded
[t=0.004903s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0049133s, 1200 KB] g=5, 32 evaluated, 31 expanded
[t=0.0050341s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0050501s, 1200 KB] g=6, 39 evaluated, 38 expanded
[t=0.0050846s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0050944s, 1200 KB] g=7, 41 evaluated, 40 expanded
[t=0.0051644s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0051742s, 1200 KB] g=7, 45 evaluated, 44 expanded
[t=0.0051908s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0052004s, 1200 KB] g=8, 46 evaluated, 45 expanded
[t=0.0052568s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0052678s, 1200 KB] g=8, 50 evaluated, 49 expanded
[t=0.0052847s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0052918s, 1200 KB] g=9, 51 evaluated, 50 expanded
[t=0.0053169s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0053235s, 1200 KB] g=9, 53 evaluated, 52 expanded
[t=0.0053627s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0053724s, 1200 KB] g=10, 56 evaluated, 55 expanded
[t=0.0053965s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0054064s, 1200 KB] g=11, 57 evaluated, 56 expanded
[t=0.0054478s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0054588s, 1200 KB] g=11, 59 evaluated, 58 expanded
[t=0.0054833s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0054929s, 1200 KB] g=12, 60 evaluated, 59 expanded
[t=0.0055822s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0055964s, 1200 KB] g=12, 65 evaluated, 64 expanded
[t=0.0056208s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0056305s, 1200 KB] g=13, 66 evaluated, 65 expanded
[t=0.0057197s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.005733s, 1200 KB] g=13, 71 evaluated, 70 expanded
[t=0.0057586s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0057686s, 1200 KB] g=14, 72 evaluated, 71 expanded
[t=0.0058512s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0058635s, 1200 KB] g=14, 77 evaluated, 76 expanded
[t=0.0058888s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0058986s, 1200 KB] g=15, 78 evaluated, 77 expanded
[t=0.0059836s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0059942s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0060035s, 1200 KB] g=16, 83 evaluated, 82 expanded
[t=0.00606s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0060726s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0060792s, 1200 KB] g=17, 86 evaluated, 85 expanded
[t=0.0061373s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0061487s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0061581s, 1200 KB] g=18, 89 evaluated, 88 expanded
[t=0.0062005s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.006209s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0062183s, 1200 KB] g=19, 92 evaluated, 91 expanded
[t=0.0062733s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0062857s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0062949s, 1200 KB] g=20, 95 evaluated, 94 expanded
[t=0.0063211s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0063295s, 1200 KB] g=21, 96 evaluated, 95 expanded
[t=0.006356s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0063651s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0063743s, 1200 KB] g=22, 98 evaluated, 97 expanded
[t=0.0064088s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.006416s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0064269s, 1200 KB] g=23, 100 evaluated, 99 expanded
[t=0.0064518s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0064597s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0064661s, 1200 KB] g=24, 102 evaluated, 101 expanded
[t=0.0064817s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0064882s, 1200 KB] g=25, 103 evaluated, 102 expanded
[t=0.0065027s, 1200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0065094s, 1200 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0065157s, 1200 KB] g=26, 104 evaluated, 103 expanded
[t=0.0065343s, 1200 KB] Solution found!
[t=0.006545s, 1200 KB] Actual search time: 0.0023482s
load obj5 obj11 obj3 (1)
drive obj5 obj3 obj9 (1)
load obj5 obj16 obj9 (1)
load obj5 obj15 obj9 (1)
load obj5 obj14 obj9 (1)
load obj5 obj13 obj9 (1)
fly obj8 obj0 obj3 (1)
load obj5 obj12 obj9 (1)
unload obj5 obj11 obj9 (1)
drive obj5 obj9 obj3 (1)
unload obj5 obj16 obj3 (1)
load obj8 obj16 obj3 (1)
unload obj5 obj15 obj3 (1)
load obj8 obj15 obj3 (1)
unload obj5 obj14 obj3 (1)
load obj8 obj14 obj3 (1)
unload obj5 obj13 obj3 (1)
load obj8 obj13 obj3 (1)
unload obj5 obj12 obj3 (1)
load obj8 obj12 obj3 (1)
fly obj8 obj3 obj0 (1)
unload obj8 obj16 obj0 (1)
unload obj8 obj15 obj0 (1)
unload obj8 obj14 obj0 (1)
fly obj8 obj0 obj6 (1)
unload obj8 obj13 obj6 (1)
unload obj8 obj12 obj6 (1)
[t=0.0065529s, 1200 KB] Plan length: 27 step(s).
[t=0.0065529s, 1200 KB] Plan cost: 27
[t=0.0065529s, 1200 KB] Expanded 104 state(s).
[t=0.0065529s, 1200 KB] Reopened 0 state(s).
[t=0.0065529s, 1200 KB] Evaluated 105 state(s).
[t=0.0065529s, 1200 KB] Evaluations: 210
[t=0.0065529s, 1200 KB] Generated 1327 state(s).
[t=0.0065529s, 1200 KB] Dead ends: 0 state(s).
[t=0.0065529s, 1200 KB] Number of registered states: 105
[t=0.0065529s, 1200 KB] Int hash set load factor: 105/128 = 0.820312
[t=0.0065529s, 1200 KB] Int hash set resizes: 7
[t=0.0065529s, 1200 KB] Search time: 0.0023799s
[t=0.0065529s, 1200 KB] Total time: 0.0065529s
Solution found.
search exit code: 0

