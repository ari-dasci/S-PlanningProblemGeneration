INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_21.pddl --sas-file temp_problems/sas_plan_21
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
260 relevant atoms
158 auxiliary atoms
418 final queue length
524 total queue pushes
Completing instantiation... [0.000s CPU, 0.016s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
6 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
6 of 6 variables necessary.
0 of 6 mutex groups necessary.
126 of 126 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 6
Translator derived variables: 0
Translator facts: 43
Translator goal facts: 2
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 126
Translator axioms: 0
Translator task size: 497
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.016s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_21
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_21 < temp_problems/sas_plan_21
[t=8.4e-06s, 804 KB] reading input...
[t=0.0004361s, 820 KB] done reading input!
[t=0.001694s, 1160 KB] Initializing landmark count heuristic...
[t=0.0017133s, 1160 KB] Generating landmark graph...
[t=0.0017325s, 1160 KB] Building a landmark graph with reasonable orders.
[t=0.0017972s, 1160 KB] Initializing Exploration...
[t=0.0018671s, 1176 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0022127s, 1196 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0022315s, 1196 KB] Landmarks generation time: 0.000447s
[t=0.0022426s, 1196 KB] Discovered 17 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0022537s, 1196 KB] 37 edges
[t=0.0022608s, 1196 KB] approx. reasonable orders
[t=0.0022854s, 1196 KB] approx. obedient reasonable orders
[t=0.0023076s, 1196 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0023144s, 1196 KB] Landmarks generation time: 0.0005949s
[t=0.002321s, 1196 KB] Discovered 17 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0023278s, 1196 KB] 37 edges
[t=0.0023339s, 1196 KB] Landmark graph generation time: 0.0006224s
[t=0.0023406s, 1196 KB] Landmark graph contains 17 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0023473s, 1196 KB] Landmark graph contains 37 orderings.
[t=0.0024063s, 1196 KB] Simplifying 126 unary operators... done! [126 unary operators]
[t=0.0024561s, 1208 KB] time to simplify: 5.17e-05s
[t=0.0024728s, 1208 KB] Initializing additive heuristic...
[t=0.0024791s, 1208 KB] Initializing FF heuristic...
[t=0.0025269s, 1208 KB] Building successor generator...done!
[t=0.0025771s, 1220 KB] peak memory difference for successor generator creation: 12 KB
[t=0.0025836s, 1220 KB] time for successor generation creation: 3.79e-05s
[t=0.0025914s, 1220 KB] Variables: 6
[t=0.0025978s, 1220 KB] FactPairs: 43
[t=0.0026039s, 1220 KB] Bytes per state: 4
[t=0.0027961s, 1232 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.002807s, 1232 KB] 4 initial landmarks, 2 goal landmarks
[t=0.0028244s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0028583s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0028654s, 1232 KB] g=0, 1 evaluated, 0 expanded
[t=0.0028811s, 1232 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0028877s, 1232 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0029214s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0029281s, 1232 KB] g=1, 4 evaluated, 3 expanded
[t=0.0029547s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0029611s, 1232 KB] g=2, 6 evaluated, 5 expanded
[t=0.0030334s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0030399s, 1232 KB] g=2, 13 evaluated, 12 expanded
[t=0.0030661s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0030725s, 1232 KB] g=3, 15 evaluated, 14 expanded
[t=0.0031087s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0031152s, 1232 KB] g=4, 18 evaluated, 17 expanded
[t=0.003169s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0031755s, 1232 KB] g=5, 23 evaluated, 22 expanded
[t=0.003227s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0032335s, 1232 KB] g=4, 28 evaluated, 27 expanded
[t=0.0032686s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0032752s, 1232 KB] g=5, 31 evaluated, 30 expanded
[t=0.0033388s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0033454s, 1232 KB] g=6, 37 evaluated, 36 expanded
[t=0.0033713s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0033799s, 1232 KB] g=7, 39 evaluated, 38 expanded
[t=0.0033968s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0034033s, 1232 KB] g=7, 40 evaluated, 39 expanded
[t=0.003502s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0035086s, 1232 KB] g=8, 50 evaluated, 49 expanded
[t=0.0037307s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0037373s, 1232 KB] g=10, 73 evaluated, 72 expanded
[t=0.0038003s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0038069s, 1232 KB] g=11, 79 evaluated, 78 expanded
[t=0.0038304s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0038367s, 1232 KB] g=12, 81 evaluated, 80 expanded
[t=0.0039012s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0039077s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.003914s, 1232 KB] g=14, 88 evaluated, 87 expanded
[t=0.0039376s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0039442s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0039505s, 1232 KB] g=15, 90 evaluated, 89 expanded
[t=0.0039741s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0039805s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0039868s, 1232 KB] g=16, 92 evaluated, 91 expanded
[t=0.0040131s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0040195s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0040258s, 1232 KB] g=17, 94 evaluated, 93 expanded
[t=0.0040407s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0040472s, 1232 KB] g=18, 95 evaluated, 94 expanded
[t=0.0040621s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0040684s, 1232 KB] g=19, 96 evaluated, 95 expanded
[t=0.0041019s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0041084s, 1232 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0041149s, 1232 KB] g=20, 99 evaluated, 98 expanded
[t=0.00413s, 1232 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0041364s, 1232 KB] g=21, 100 evaluated, 99 expanded
[t=0.0041501s, 1232 KB] Solution found!
[t=0.0041571s, 1232 KB] Actual search time: 0.0013449s
drive obj8 obj2 obj12 (1)
load obj8 obj16 obj12 (1)
drive obj8 obj12 obj2 (1)
unload obj8 obj16 obj2 (1)
load obj7 obj16 obj2 (1)
fly obj7 obj2 obj0 (1)
unload obj7 obj16 obj0 (1)
load obj6 obj16 obj0 (1)
drive obj6 obj0 obj10 (1)
unload obj6 obj16 obj10 (1)
drive obj6 obj10 obj0 (1)
drive obj8 obj2 obj9 (1)
drive obj6 obj0 obj4 (1)
load obj6 obj15 obj4 (1)
drive obj6 obj4 obj0 (1)
unload obj6 obj15 obj0 (1)
load obj7 obj15 obj0 (1)
fly obj7 obj0 obj5 (1)
unload obj7 obj15 obj5 (1)
load obj11 obj15 obj5 (1)
drive obj11 obj5 obj9 (1)
unload obj11 obj15 obj9 (1)
[t=0.0041632s, 1232 KB] Plan length: 22 step(s).
[t=0.0041632s, 1232 KB] Plan cost: 22
[t=0.0041632s, 1232 KB] Expanded 100 state(s).
[t=0.0041632s, 1232 KB] Reopened 0 state(s).
[t=0.0041632s, 1232 KB] Evaluated 101 state(s).
[t=0.0041632s, 1232 KB] Evaluations: 202
[t=0.0041632s, 1232 KB] Generated 1404 state(s).
[t=0.0041632s, 1232 KB] Dead ends: 0 state(s).
[t=0.0041632s, 1232 KB] Number of registered states: 101
[t=0.0041632s, 1232 KB] Int hash set load factor: 101/128 = 0.789062
[t=0.0041632s, 1232 KB] Int hash set resizes: 7
[t=0.0041632s, 1232 KB] Search time: 0.0013681s
[t=0.0041632s, 1232 KB] Total time: 0.0041632s
Solution found.
search exit code: 0

