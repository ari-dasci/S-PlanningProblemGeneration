INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_21.pddl --sas-file temp_problems/sas_plan_21
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.007s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
287 relevant atoms
124 auxiliary atoms
411 final queue length
506 total queue pushes
Completing instantiation... [0.000s CPU, 0.006s wall-clock]
Instantiating: [0.000s CPU, 0.014s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.008s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
12 propositions removed
Detecting unreachable propositions: [0.016s CPU, 0.007s wall-clock]
Reordering and filtering variables...
9 of 10 variables necessary.
0 of 10 mutex groups necessary.
122 of 140 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.016s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 56
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 122
Translator axioms: 0
Translator task size: 533
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.031s CPU, 0.048s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_21
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_21 < temp_problems/sas_plan_21
[t=0.0001805s, 724 KB] reading input...
[t=0.0014938s, 748 KB] done reading input!
[t=0.0048354s, 1088 KB] Initializing landmark count heuristic...
[t=0.0048721s, 1096 KB] Generating landmark graph...
[t=0.0049018s, 1096 KB] Building a landmark graph with reasonable orders.
[t=0.004993s, 1096 KB] Initializing Exploration...
[t=0.0051608s, 1112 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0059371s, 1136 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0059698s, 1136 KB] Landmarks generation time: 0.0010048s
[t=0.0059806s, 1136 KB] Discovered 21 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0059905s, 1136 KB] 31 edges
[t=0.0059991s, 1136 KB] approx. reasonable orders
[t=0.0060881s, 1136 KB] approx. obedient reasonable orders
[t=0.0061183s, 1136 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0061292s, 1136 KB] Landmarks generation time: 0.0012511s
[t=0.0061396s, 1136 KB] Discovered 21 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0061495s, 1136 KB] 31 edges
[t=0.006158s, 1136 KB] Landmark graph generation time: 0.00129s
[t=0.0061674s, 1136 KB] Landmark graph contains 21 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0061773s, 1136 KB] Landmark graph contains 31 orderings.
[t=0.0064115s, 1136 KB] Simplifying 122 unary operators... done! [122 unary operators]
[t=0.0065137s, 1136 KB] time to simplify: 0.0001084s
[t=0.006552s, 1136 KB] Initializing additive heuristic...
[t=0.0065616s, 1136 KB] Initializing FF heuristic...
[t=0.0066738s, 1136 KB] Building successor generator...done!
[t=0.0068087s, 1144 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0068192s, 1144 KB] time for successor generation creation: 0.0001151s
[t=0.0068329s, 1144 KB] Variables: 9
[t=0.0068423s, 1144 KB] FactPairs: 56
[t=0.0068508s, 1144 KB] Bytes per state: 4
[t=0.0071351s, 1164 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0071574s, 1164 KB] 7 initial landmarks, 6 goal landmarks
[t=0.0071957s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0072084s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.007217s, 1164 KB] g=0, 1 evaluated, 0 expanded
[t=0.0072652s, 1164 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.007277s, 1164 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0073011s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0073122s, 1164 KB] g=1, 2 evaluated, 1 expanded
[t=0.0073749s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.007389s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0073982s, 1164 KB] g=2, 4 evaluated, 3 expanded
[t=0.0074366s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0074473s, 1164 KB] g=3, 5 evaluated, 4 expanded
[t=0.0074851s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0074963s, 1164 KB] g=4, 6 evaluated, 5 expanded
[t=0.0075793s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0075905s, 1164 KB] g=3, 9 evaluated, 8 expanded
[t=0.0076287s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0076411s, 1164 KB] g=5, 10 evaluated, 9 expanded
[t=0.0077707s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0077901s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0077991s, 1164 KB] g=6, 14 evaluated, 13 expanded
[t=0.0078556s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0078662s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0078739s, 1164 KB] g=7, 16 evaluated, 15 expanded
[t=0.0079358s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0079497s, 1164 KB] g=8, 18 evaluated, 17 expanded
[t=0.0079999s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0080091s, 1164 KB] g=8, 20 evaluated, 19 expanded
[t=0.0080938s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.008114s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0081239s, 1164 KB] g=9, 22 evaluated, 21 expanded
[t=0.0081786s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0081883s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0081963s, 1164 KB] g=10, 24 evaluated, 23 expanded
[t=0.0082705s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0082843s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0082923s, 1164 KB] g=12, 26 evaluated, 25 expanded
[t=0.0083456s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.008355s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0083634s, 1164 KB] g=13, 28 evaluated, 27 expanded
[t=0.0084133s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0084225s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0084299s, 1164 KB] g=14, 30 evaluated, 29 expanded
[t=0.0084788s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0084895s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0084981s, 1164 KB] g=15, 32 evaluated, 31 expanded
[t=0.0085392s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0085513s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0085603s, 1164 KB] g=16, 33 evaluated, 32 expanded
[t=0.0085877s, 1164 KB] Solution found!
[t=0.0085978s, 1164 KB] Actual search time: 0.0014334s
drive obj8 obj2 obj4 (1)
load obj8 obj9 obj4 (1)
drive obj8 obj4 obj2 (1)
unload obj8 obj9 obj2 (1)
load obj12 obj6 obj0 (1)
load obj12 obj13 obj0 (1)
load obj12 obj11 obj0 (1)
load obj10 obj16 obj5 (1)
drive obj10 obj5 obj4 (1)
unload obj10 obj16 obj4 (1)
fly obj12 obj0 obj2 (1)
unload obj12 obj6 obj2 (1)
load obj12 obj15 obj2 (1)
unload obj12 obj13 obj2 (1)
unload obj12 obj11 obj2 (1)
fly obj12 obj2 obj0 (1)
unload obj12 obj15 obj0 (1)
[t=0.0086064s, 1164 KB] Plan length: 17 step(s).
[t=0.0086064s, 1164 KB] Plan cost: 17
[t=0.0086064s, 1164 KB] Expanded 33 state(s).
[t=0.0086064s, 1164 KB] Reopened 0 state(s).
[t=0.0086064s, 1164 KB] Evaluated 34 state(s).
[t=0.0086064s, 1164 KB] Evaluations: 68
[t=0.0086064s, 1164 KB] Generated 407 state(s).
[t=0.0086064s, 1164 KB] Dead ends: 0 state(s).
[t=0.0086064s, 1164 KB] Number of registered states: 34
[t=0.0086064s, 1164 KB] Int hash set load factor: 34/64 = 0.53125
[t=0.0086064s, 1164 KB] Int hash set resizes: 6
[t=0.0086064s, 1164 KB] Search time: 0.0014738s
[t=0.0086064s, 1164 KB] Total time: 0.0086064s
Solution found.
search exit code: 0

