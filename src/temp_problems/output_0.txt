INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_0.pddl --sas-file temp_problems/sas_plan_0
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.010s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.005s wall-clock]
268 relevant atoms
123 auxiliary atoms
391 final queue length
466 total queue pushes
Completing instantiation... [0.000s CPU, 0.005s wall-clock]
Instantiating: [0.000s CPU, 0.015s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
2 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.016s CPU, 0.001s wall-clock]
Translating task: [0.016s CPU, 0.006s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
118 of 118 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 61
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 118
Translator axioms: 0
Translator task size: 514
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.005s wall-clock]
Done! [0.031s CPU, 0.044s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_0
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_0 < temp_problems/sas_plan_0
[t=2.98e-05s, 724 KB] reading input...
[t=0.001211s, 744 KB] done reading input!
[t=0.0044679s, 1092 KB] Initializing landmark count heuristic...
[t=0.0045078s, 1100 KB] Generating landmark graph...
[t=0.0045361s, 1100 KB] Building a landmark graph with reasonable orders.
[t=0.0046274s, 1100 KB] Initializing Exploration...
[t=0.0047623s, 1112 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0055046s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0055395s, 1144 KB] Landmarks generation time: 0.0009391s
[t=0.005553s, 1144 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0055629s, 1144 KB] 33 edges
[t=0.0055711s, 1144 KB] approx. reasonable orders
[t=0.005674s, 1144 KB] approx. obedient reasonable orders
[t=0.0057197s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0057386s, 1144 KB] Landmarks generation time: 0.0012314s
[t=0.0057544s, 1144 KB] Discovered 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0057646s, 1144 KB] 34 edges
[t=0.0057723s, 1144 KB] Landmark graph generation time: 0.0012684s
[t=0.0057816s, 1144 KB] Landmark graph contains 21 landmarks, of which 1 are disjunctive and 0 are conjunctive.
[t=0.0057915s, 1144 KB] Landmark graph contains 34 orderings.
[t=0.0059175s, 1144 KB] Simplifying 118 unary operators... done! [118 unary operators]
[t=0.0060096s, 1144 KB] time to simplify: 9.77e-05s
[t=0.0060433s, 1144 KB] Initializing additive heuristic...
[t=0.006052s, 1144 KB] Initializing FF heuristic...
[t=0.0061605s, 1144 KB] Building successor generator...done!
[t=0.006276s, 1144 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0062855s, 1144 KB] time for successor generation creation: 9.47e-05s
[t=0.0062984s, 1144 KB] Variables: 9
[t=0.0063061s, 1144 KB] FactPairs: 61
[t=0.0063138s, 1144 KB] Bytes per state: 4
[t=0.0066239s, 1164 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0066442s, 1164 KB] 7 initial landmarks, 6 goal landmarks
[t=0.0066889s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0066995s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0067074s, 1164 KB] g=0, 1 evaluated, 0 expanded
[t=0.0067363s, 1164 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0067449s, 1164 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0068141s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0068243s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0068425s, 1164 KB] g=1, 4 evaluated, 3 expanded
[t=0.0069204s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0069333s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0069416s, 1164 KB] g=2, 7 evaluated, 6 expanded
[t=0.0069753s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0069863s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0069948s, 1164 KB] g=3, 8 evaluated, 7 expanded
[t=0.0070508s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0070636s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0070726s, 1164 KB] g=4, 10 evaluated, 9 expanded
[t=0.0071296s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0071404s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0071489s, 1164 KB] g=5, 12 evaluated, 11 expanded
[t=0.0072059s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0072177s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0072263s, 1164 KB] g=6, 14 evaluated, 13 expanded
[t=0.0073313s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0073509s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0073611s, 1164 KB] g=7, 17 evaluated, 16 expanded
[t=0.00741s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0074188s, 1164 KB] g=8, 19 evaluated, 18 expanded
[t=0.0074673s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0074756s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0074828s, 1164 KB] g=9, 21 evaluated, 20 expanded
[t=0.0075664s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0075847s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0075931s, 1164 KB] g=11, 23 evaluated, 22 expanded
[t=0.0076449s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0076537s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0076611s, 1164 KB] g=12, 25 evaluated, 24 expanded
[t=0.0077115s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0077201s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0077275s, 1164 KB] g=13, 27 evaluated, 26 expanded
[t=0.0077764s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0077848s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0077921s, 1164 KB] g=14, 29 evaluated, 28 expanded
[t=0.0078202s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0078281s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0078351s, 1164 KB] g=15, 30 evaluated, 29 expanded
[t=0.0078648s, 1164 KB] Solution found!
[t=0.0078738s, 1164 KB] Actual search time: 0.001223s
load obj9 obj17 obj2 (1)
load obj9 obj10 obj2 (1)
fly obj9 obj2 obj0 (1)
load obj9 obj8 obj0 (1)
unload obj9 obj17 obj0 (1)
load obj9 obj14 obj0 (1)
load obj12 obj15 obj4 (1)
drive obj12 obj4 obj0 (1)
unload obj12 obj15 obj0 (1)
fly obj9 obj0 obj5 (1)
unload obj9 obj8 obj5 (1)
load obj9 obj16 obj5 (1)
unload obj9 obj14 obj5 (1)
unload obj9 obj10 obj5 (1)
fly obj9 obj5 obj0 (1)
unload obj9 obj16 obj0 (1)
[t=0.0078815s, 1164 KB] Plan length: 16 step(s).
[t=0.0078815s, 1164 KB] Plan cost: 16
[t=0.0078815s, 1164 KB] Expanded 30 state(s).
[t=0.0078815s, 1164 KB] Reopened 0 state(s).
[t=0.0078815s, 1164 KB] Evaluated 31 state(s).
[t=0.0078815s, 1164 KB] Evaluations: 62
[t=0.0078815s, 1164 KB] Generated 365 state(s).
[t=0.0078815s, 1164 KB] Dead ends: 0 state(s).
[t=0.0078815s, 1164 KB] Number of registered states: 31
[t=0.0078815s, 1164 KB] Int hash set load factor: 31/32 = 0.96875
[t=0.0078815s, 1164 KB] Int hash set resizes: 5
[t=0.0078815s, 1164 KB] Search time: 0.0012597s
[t=0.0078815s, 1164 KB] Total time: 0.0078815s
Solution found.
search exit code: 0

