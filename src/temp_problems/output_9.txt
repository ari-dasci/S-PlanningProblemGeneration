INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_9.pddl --sas-file temp_problems/sas_plan_9
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.010s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.008s wall-clock]
319 relevant atoms
136 auxiliary atoms
455 final queue length
577 total queue pushes
Completing instantiation... [0.000s CPU, 0.007s wall-clock]
Instantiating: [0.000s CPU, 0.021s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.016s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.001s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.016s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.008s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
10 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.005s wall-clock]
Reordering and filtering variables...
10 of 10 variables necessary.
0 of 10 mutex groups necessary.
168 of 168 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 10
Translator derived variables: 0
Translator facts: 66
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 168
Translator axioms: 0
Translator task size: 727
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.007s wall-clock]
Done! [0.031s CPU, 0.059s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_9
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_9 < temp_problems/sas_plan_9
[t=1.41e-05s, 724 KB] reading input...
[t=0.0016309s, 756 KB] done reading input!
[t=0.004607s, 1104 KB] Initializing landmark count heuristic...
[t=0.0046369s, 1112 KB] Generating landmark graph...
[t=0.0046687s, 1112 KB] Building a landmark graph with reasonable orders.
[t=0.0047468s, 1112 KB] Initializing Exploration...
[t=0.0049369s, 1132 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0060588s, 1164 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0060958s, 1164 KB] Landmarks generation time: 0.0013791s
[t=0.0061103s, 1164 KB] Discovered 24 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0061213s, 1164 KB] 32 edges
[t=0.0061308s, 1164 KB] approx. reasonable orders
[t=0.0062316s, 1164 KB] approx. obedient reasonable orders
[t=0.0062631s, 1164 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0062734s, 1164 KB] Landmarks generation time: 0.0016312s
[t=0.0062818s, 1164 KB] Discovered 24 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0062902s, 1164 KB] 32 edges
[t=0.0062971s, 1164 KB] Landmark graph generation time: 0.001664s
[t=0.0063057s, 1164 KB] Landmark graph contains 24 landmarks, of which 6 are disjunctive and 0 are conjunctive.
[t=0.0063152s, 1164 KB] Landmark graph contains 32 orderings.
[t=0.0064585s, 1164 KB] Simplifying 168 unary operators... done! [168 unary operators]
[t=0.0065856s, 1164 KB] time to simplify: 0.0001363s
[t=0.0066352s, 1164 KB] Initializing additive heuristic...
[t=0.0066468s, 1164 KB] Initializing FF heuristic...
[t=0.0067529s, 1164 KB] Building successor generator...done!
[t=0.0069076s, 1172 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0069195s, 1172 KB] time for successor generation creation: 0.0001265s
[t=0.0069339s, 1172 KB] Variables: 10
[t=0.0069431s, 1172 KB] FactPairs: 66
[t=0.0069513s, 1172 KB] Bytes per state: 4
[t=0.0072761s, 1184 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.007299s, 1184 KB] 7 initial landmarks, 7 goal landmarks
[t=0.007344s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0073571s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0073661s, 1184 KB] g=0, 1 evaluated, 0 expanded
[t=0.0073986s, 1184 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0074157s, 1184 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0074391s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0074491s, 1184 KB] g=1, 2 evaluated, 1 expanded
[t=0.0075456s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.007561s, 1184 KB] g=1, 5 evaluated, 4 expanded
[t=0.0076034s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0076134s, 1184 KB] g=2, 6 evaluated, 5 expanded
[t=0.007744s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0077619s, 1184 KB] g=2, 10 evaluated, 9 expanded
[t=0.0078646s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0078786s, 1184 KB] g=3, 13 evaluated, 12 expanded
[t=0.0080666s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0080812s, 1184 KB] g=3, 20 evaluated, 19 expanded
[t=0.0082938s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0083094s, 1184 KB] g=4, 28 evaluated, 27 expanded
[t=0.0083436s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0083525s, 1184 KB] g=4, 29 evaluated, 28 expanded
[t=0.0085164s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.008531s, 1184 KB] g=5, 35 evaluated, 34 expanded
[t=0.0086896s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0087078s, 1184 KB] g=6, 41 evaluated, 40 expanded
[t=0.0087432s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0087572s, 1184 KB] g=7, 42 evaluated, 41 expanded
[t=0.0088694s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0088821s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0088902s, 1184 KB] g=8, 46 evaluated, 45 expanded
[t=0.0090162s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0090264s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.009034s, 1184 KB] g=9, 51 evaluated, 50 expanded
[t=0.0091428s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0091561s, 1184 KB] g=10, 55 evaluated, 54 expanded
[t=0.0092022s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0092128s, 1184 KB] g=11, 56 evaluated, 55 expanded
[t=0.0092884s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0092986s, 1184 KB] g=11, 59 evaluated, 58 expanded
[t=0.0093319s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0093423s, 1184 KB] g=12, 60 evaluated, 59 expanded
[t=0.0094417s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0094525s, 1184 KB] g=13, 64 evaluated, 63 expanded
[t=0.0095427s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0095544s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0095628s, 1184 KB] g=14, 67 evaluated, 66 expanded
[t=0.0096595s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0096724s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0096805s, 1184 KB] g=15, 71 evaluated, 70 expanded
[t=0.0097168s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0097272s, 1184 KB] g=16, 72 evaluated, 71 expanded
[t=0.0098136s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0098256s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0098351s, 1184 KB] g=17, 75 evaluated, 74 expanded
[t=0.0099084s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0099364s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0099472s, 1184 KB] g=18, 78 evaluated, 77 expanded
[t=0.0100393s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0100497s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0100593s, 1184 KB] g=20, 81 evaluated, 80 expanded
[t=0.0100935s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0101032s, 1184 KB] g=21, 82 evaluated, 81 expanded
[t=0.0101588s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.010169s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0101784s, 1184 KB] g=22, 84 evaluated, 83 expanded
[t=0.0102192s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.010229s, 1184 KB] g=23, 85 evaluated, 84 expanded
[t=0.0102594s, 1184 KB] Solution found!
[t=0.0102702s, 1184 KB] Actual search time: 0.0029657s
fly obj4 obj3 obj8 (1)
load obj4 obj9 obj8 (1)
load obj4 obj16 obj8 (1)
load obj4 obj14 obj8 (1)
fly obj4 obj8 obj3 (1)
unload obj4 obj9 obj3 (1)
fly obj4 obj3 obj0 (1)
load obj4 obj2 obj0 (1)
load obj12 obj15 obj3 (1)
drive obj12 obj3 obj0 (1)
fly obj4 obj0 obj10 (1)
unload obj4 obj16 obj10 (1)
fly obj4 obj10 obj5 (1)
load obj4 obj7 obj5 (1)
unload obj4 obj14 obj5 (1)
fly obj4 obj5 obj0 (1)
unload obj4 obj7 obj0 (1)
unload obj12 obj15 obj0 (1)
fly obj4 obj0 obj10 (1)
load obj4 obj11 obj10 (1)
fly obj4 obj10 obj0 (1)
unload obj4 obj11 obj0 (1)
fly obj4 obj0 obj8 (1)
unload obj4 obj2 obj8 (1)
[t=0.0102804s, 1184 KB] Plan length: 24 step(s).
[t=0.0102804s, 1184 KB] Plan cost: 24
[t=0.0102804s, 1184 KB] Expanded 85 state(s).
[t=0.0102804s, 1184 KB] Reopened 0 state(s).
[t=0.0102804s, 1184 KB] Evaluated 86 state(s).
[t=0.0102804s, 1184 KB] Evaluations: 172
[t=0.0102804s, 1184 KB] Generated 993 state(s).
[t=0.0102804s, 1184 KB] Dead ends: 0 state(s).
[t=0.0102804s, 1184 KB] Number of registered states: 86
[t=0.0102804s, 1184 KB] Int hash set load factor: 86/128 = 0.671875
[t=0.0102804s, 1184 KB] Int hash set resizes: 7
[t=0.0102804s, 1184 KB] Search time: 0.003007s
[t=0.0102804s, 1184 KB] Total time: 0.0102804s
Solution found.
search exit code: 0

