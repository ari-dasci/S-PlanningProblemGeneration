INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_1.pddl --sas-file temp_problems/sas_plan_1
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.010s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.006s wall-clock]
290 relevant atoms
120 auxiliary atoms
410 final queue length
509 total queue pushes
Completing instantiation... [0.000s CPU, 0.007s wall-clock]
Instantiating: [0.000s CPU, 0.019s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.016s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.016s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.001s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.007s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.004s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
144 of 144 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.002s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 64
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 144
Translator axioms: 0
Translator task size: 643
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.006s wall-clock]
Done! [0.047s CPU, 0.053s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_1
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_1 < temp_problems/sas_plan_1
[t=1.57e-05s, 724 KB] reading input...
[t=0.0013191s, 752 KB] done reading input!
[t=0.0041099s, 1088 KB] Initializing landmark count heuristic...
[t=0.004155s, 1088 KB] Generating landmark graph...
[t=0.0041951s, 1088 KB] Building a landmark graph with reasonable orders.
[t=0.0042887s, 1096 KB] Initializing Exploration...
[t=0.004468s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0055112s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0055456s, 1144 KB] Landmarks generation time: 0.0013005s
[t=0.0055575s, 1144 KB] Discovered 26 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0055679s, 1144 KB] 34 edges
[t=0.0055771s, 1144 KB] approx. reasonable orders
[t=0.0057114s, 1144 KB] approx. obedient reasonable orders
[t=0.0057498s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0057603s, 1144 KB] Landmarks generation time: 0.0015919s
[t=0.0057702s, 1144 KB] Discovered 26 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0057817s, 1144 KB] 34 edges
[t=0.00579s, 1144 KB] Landmark graph generation time: 0.0016439s
[t=0.0058105s, 1144 KB] Landmark graph contains 26 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0058216s, 1144 KB] Landmark graph contains 34 orderings.
[t=0.0059824s, 1144 KB] Simplifying 144 unary operators... done! [144 unary operators]
[t=0.0061098s, 1144 KB] time to simplify: 0.0001348s
[t=0.0061471s, 1144 KB] Initializing additive heuristic...
[t=0.0061552s, 1144 KB] Initializing FF heuristic...
[t=0.0062652s, 1144 KB] Building successor generator...done!
[t=0.0064116s, 1148 KB] peak memory difference for successor generator creation: 4 KB
[t=0.006422s, 1148 KB] time for successor generation creation: 0.0001243s
[t=0.0064349s, 1148 KB] Variables: 11
[t=0.006443s, 1148 KB] FactPairs: 64
[t=0.0064506s, 1148 KB] Bytes per state: 4
[t=0.0067607s, 1168 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0067873s, 1168 KB] 8 initial landmarks, 8 goal landmarks
[t=0.0068352s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.006849s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0068587s, 1168 KB] g=0, 1 evaluated, 0 expanded
[t=0.0068907s, 1168 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0069019s, 1168 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0069265s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0069377s, 1168 KB] g=1, 2 evaluated, 1 expanded
[t=0.0070646s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0070843s, 1168 KB] g=1, 5 evaluated, 4 expanded
[t=0.0071229s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0071349s, 1168 KB] g=2, 6 evaluated, 5 expanded
[t=0.0073387s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0073575s, 1168 KB] g=2, 13 evaluated, 12 expanded
[t=0.007391s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0074s, 1168 KB] g=3, 14 evaluated, 13 expanded
[t=0.0076136s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.007632s, 1168 KB] g=3, 22 evaluated, 21 expanded
[t=0.0076674s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0076774s, 1168 KB] g=4, 23 evaluated, 22 expanded
[t=0.007899s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0079177s, 1168 KB] g=4, 32 evaluated, 31 expanded
[t=0.0079597s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0079727s, 1168 KB] g=5, 33 evaluated, 32 expanded
[t=0.0080824s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0081005s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0081111s, 1168 KB] g=6, 37 evaluated, 36 expanded
[t=0.0082199s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0082343s, 1168 KB] g=7, 41 evaluated, 40 expanded
[t=0.0082908s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0083035s, 1168 KB] g=8, 43 evaluated, 42 expanded
[t=0.0083664s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0083787s, 1168 KB] g=8, 45 evaluated, 44 expanded
[t=0.0084113s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0084213s, 1168 KB] g=9, 46 evaluated, 45 expanded
[t=0.0086109s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0086243s, 1168 KB] g=10, 54 evaluated, 53 expanded
[t=0.008656s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0086655s, 1168 KB] g=9, 55 evaluated, 54 expanded
[t=0.0088319s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.008844s, 1168 KB] g=11, 62 evaluated, 61 expanded
[t=0.0089391s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0089502s, 1168 KB] g=10, 65 evaluated, 64 expanded
[t=0.0090685s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0090804s, 1168 KB] g=12, 70 evaluated, 69 expanded
[t=0.0091362s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0091479s, 1168 KB] g=13, 72 evaluated, 71 expanded
[t=0.0092001s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0092113s, 1168 KB] g=14, 74 evaluated, 73 expanded
[t=0.0092693s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0092786s, 1168 KB] g=14, 76 evaluated, 75 expanded
[t=0.0093359s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0093461s, 1168 KB] g=15, 77 evaluated, 76 expanded
[t=0.0093998s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0094087s, 1168 KB] g=15, 79 evaluated, 78 expanded
[t=0.0094365s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0094449s, 1168 KB] g=16, 80 evaluated, 79 expanded
[t=0.0095075s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0095178s, 1168 KB] g=17, 82 evaluated, 81 expanded
[t=0.0095684s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0095782s, 1168 KB] g=18, 84 evaluated, 83 expanded
[t=0.0096083s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0096176s, 1168 KB] g=18, 85 evaluated, 84 expanded
[t=0.009669s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0096787s, 1168 KB] g=19, 87 evaluated, 86 expanded
[t=0.0097083s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0097172s, 1168 KB] g=19, 88 evaluated, 87 expanded
[t=0.009748s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0097564s, 1168 KB] g=20, 89 evaluated, 88 expanded
[t=0.0097937s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0098037s, 1168 KB] g=20, 90 evaluated, 89 expanded
[t=0.0098668s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0098833s, 1168 KB] g=21, 93 evaluated, 92 expanded
[t=0.009936s, 1168 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0099461s, 1168 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0099548s, 1168 KB] g=22, 95 evaluated, 94 expanded
[t=0.0099828s, 1168 KB] Solution found!
[t=0.0099946s, 1168 KB] Actual search time: 0.0031992s
load obj3 obj2 obj0 (1)
load obj3 obj12 obj0 (1)
load obj13 obj16 obj9 (1)
load obj13 obj14 obj9 (1)
fly obj3 obj0 obj4 (1)
load obj3 obj5 obj4 (1)
drive obj13 obj9 obj6 (1)
fly obj3 obj4 obj6 (1)
load obj3 obj8 obj6 (1)
unload obj3 obj5 obj6 (1)
unload obj3 obj2 obj6 (1)
unload obj3 obj12 obj6 (1)
fly obj3 obj6 obj0 (1)
unload obj13 obj16 obj6 (1)
unload obj13 obj14 obj6 (1)
fly obj3 obj0 obj9 (1)
unload obj3 obj8 obj9 (1)
load obj3 obj15 obj9 (1)
load obj3 obj10 obj9 (1)
fly obj3 obj9 obj0 (1)
unload obj3 obj10 obj0 (1)
fly obj3 obj0 obj4 (1)
unload obj3 obj15 obj4 (1)
[t=0.0100044s, 1168 KB] Plan length: 23 step(s).
[t=0.0100044s, 1168 KB] Plan cost: 23
[t=0.0100044s, 1168 KB] Expanded 95 state(s).
[t=0.0100044s, 1168 KB] Reopened 0 state(s).
[t=0.0100044s, 1168 KB] Evaluated 96 state(s).
[t=0.0100044s, 1168 KB] Evaluations: 192
[t=0.0100044s, 1168 KB] Generated 1128 state(s).
[t=0.0100044s, 1168 KB] Dead ends: 0 state(s).
[t=0.0100044s, 1168 KB] Number of registered states: 96
[t=0.0100044s, 1168 KB] Int hash set load factor: 96/128 = 0.75
[t=0.0100044s, 1168 KB] Int hash set resizes: 7
[t=0.0100044s, 1168 KB] Search time: 0.0032466s
[t=0.0100044s, 1168 KB] Total time: 0.0100044s
Solution found.
search exit code: 0

