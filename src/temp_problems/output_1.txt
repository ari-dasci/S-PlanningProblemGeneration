INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_1.pddl --sas-file temp_problems/sas_plan_1
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
286 relevant atoms
141 auxiliary atoms
427 final queue length
525 total queue pushes
Completing instantiation... [0.000s CPU, 0.016s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.004s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
8 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
8 of 8 variables necessary.
0 of 8 mutex groups necessary.
140 of 140 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 8
Translator derived variables: 0
Translator facts: 61
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 140
Translator axioms: 0
Translator task size: 604
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.020s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_1
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_1 < temp_problems/sas_plan_1
[t=2.18e-05s, 728 KB] reading input...
[t=0.0006851s, 756 KB] done reading input!
[t=0.0022541s, 1096 KB] Initializing landmark count heuristic...
[t=0.0022792s, 1104 KB] Generating landmark graph...
[t=0.0023028s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0023704s, 1104 KB] Initializing Exploration...
[t=0.0024659s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0031294s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.003158s, 1152 KB] Landmarks generation time: 0.0008022s
[t=0.00317s, 1152 KB] Discovered 28 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0031818s, 1152 KB] 64 edges
[t=0.0031917s, 1152 KB] approx. reasonable orders
[t=0.0032588s, 1152 KB] approx. obedient reasonable orders
[t=0.0032943s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.003305s, 1152 KB] Landmarks generation time: 0.0010172s
[t=0.003315s, 1152 KB] Discovered 28 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0033291s, 1152 KB] 64 edges
[t=0.0033391s, 1152 KB] Landmark graph generation time: 0.0010624s
[t=0.0033495s, 1152 KB] Landmark graph contains 28 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0033595s, 1152 KB] Landmark graph contains 64 orderings.
[t=0.0034764s, 1152 KB] Simplifying 140 unary operators... done! [140 unary operators]
[t=0.0035696s, 1164 KB] time to simplify: 9.81e-05s
[t=0.0035989s, 1164 KB] Initializing additive heuristic...
[t=0.0036091s, 1164 KB] Initializing FF heuristic...
[t=0.0036888s, 1164 KB] Building successor generator...done!
[t=0.0037829s, 1168 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0037941s, 1168 KB] time for successor generation creation: 7.05e-05s
[t=0.0038058s, 1168 KB] Variables: 8
[t=0.0038325s, 1168 KB] FactPairs: 61
[t=0.0038423s, 1168 KB] Bytes per state: 4
[t=0.0041102s, 1188 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0041323s, 1188 KB] 7 initial landmarks, 5 goal landmarks
[t=0.0041663s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0041839s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0041938s, 1188 KB] g=0, 1 evaluated, 0 expanded
[t=0.0042305s, 1188 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0042413s, 1188 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0042928s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0043029s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0043112s, 1188 KB] g=1, 4 evaluated, 3 expanded
[t=0.0043643s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0043764s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0043895s, 1188 KB] g=2, 7 evaluated, 6 expanded
[t=0.0044155s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0044261s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0044356s, 1188 KB] g=3, 8 evaluated, 7 expanded
[t=0.0044784s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.004489s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0044988s, 1188 KB] g=4, 10 evaluated, 9 expanded
[t=0.0045424s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0045566s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0045666s, 1188 KB] g=5, 12 evaluated, 11 expanded
[t=0.0046254s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0046377s, 1188 KB] g=6, 15 evaluated, 14 expanded
[t=0.0046875s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0047082s, 1188 KB] g=6, 17 evaluated, 16 expanded
[t=0.0047814s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0047936s, 1188 KB] g=7, 21 evaluated, 20 expanded
[t=0.0048308s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0048439s, 1188 KB] g=7, 23 evaluated, 22 expanded
[t=0.0049125s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0049243s, 1188 KB] g=8, 27 evaluated, 26 expanded
[t=0.0049621s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0049736s, 1188 KB] g=8, 29 evaluated, 28 expanded
[t=0.0050443s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0050574s, 1188 KB] g=9, 33 evaluated, 32 expanded
[t=0.005097s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0051079s, 1188 KB] g=9, 35 evaluated, 34 expanded
[t=0.005206s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0052198s, 1188 KB] g=10, 40 evaluated, 39 expanded
[t=0.0052816s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0052925s, 1188 KB] g=10, 43 evaluated, 42 expanded
[t=0.0054038s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0054145s, 1188 KB] g=11, 50 evaluated, 49 expanded
[t=0.0054431s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0054533s, 1188 KB] g=11, 51 evaluated, 50 expanded
[t=0.0056289s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0056471s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0056724s, 1188 KB] g=12, 59 evaluated, 58 expanded
[t=0.0057785s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0057973s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0058062s, 1188 KB] g=14, 63 evaluated, 62 expanded
[t=0.0058312s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0058413s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.005855s, 1188 KB] g=15, 64 evaluated, 63 expanded
[t=0.0058853s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0058948s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0059037s, 1188 KB] g=16, 65 evaluated, 64 expanded
[t=0.0059597s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.005972s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0059814s, 1188 KB] g=17, 68 evaluated, 67 expanded
[t=0.0060061s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0060157s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0060249s, 1188 KB] g=18, 69 evaluated, 68 expanded
[t=0.0060594s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0060677s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0060761s, 1188 KB] g=19, 71 evaluated, 70 expanded
[t=0.0061087s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0061218s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0061324s, 1188 KB] g=20, 73 evaluated, 72 expanded
[t=0.0061583s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0061712s, 1188 KB] g=21, 74 evaluated, 73 expanded
[t=0.006195s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0062089s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0062185s, 1188 KB] g=22, 75 evaluated, 74 expanded
[t=0.0062406s, 1188 KB] Solution found!
[t=0.0062515s, 1188 KB] Actual search time: 0.0021103s
load obj6 obj9 obj4 (1)
load obj6 obj5 obj4 (1)
drive obj6 obj4 obj0 (1)
unload obj6 obj9 obj0 (1)
unload obj6 obj5 obj0 (1)
load obj2 obj9 obj0 (1)
load obj2 obj5 obj0 (1)
load obj2 obj11 obj0 (1)
drive obj13 obj10 obj15 (1)
load obj13 obj16 obj15 (1)
drive obj13 obj15 obj7 (1)
unload obj13 obj16 obj7 (1)
drive obj6 obj0 obj3 (1)
load obj6 obj12 obj3 (1)
drive obj6 obj3 obj0 (1)
unload obj6 obj12 obj0 (1)
load obj2 obj12 obj0 (1)
fly obj2 obj0 obj14 (1)
unload obj2 obj9 obj14 (1)
unload obj2 obj12 obj14 (1)
fly obj2 obj14 obj7 (1)
unload obj2 obj5 obj7 (1)
unload obj2 obj11 obj7 (1)
[t=0.0062684s, 1188 KB] Plan length: 23 step(s).
[t=0.0062684s, 1188 KB] Plan cost: 23
[t=0.0062684s, 1188 KB] Expanded 75 state(s).
[t=0.0062684s, 1188 KB] Reopened 0 state(s).
[t=0.0062684s, 1188 KB] Evaluated 76 state(s).
[t=0.0062684s, 1188 KB] Evaluations: 152
[t=0.0062684s, 1188 KB] Generated 884 state(s).
[t=0.0062684s, 1188 KB] Dead ends: 0 state(s).
[t=0.0062684s, 1188 KB] Number of registered states: 76
[t=0.0062684s, 1188 KB] Int hash set load factor: 76/128 = 0.59375
[t=0.0062684s, 1188 KB] Int hash set resizes: 7
[t=0.0062684s, 1188 KB] Search time: 0.0021605s
[t=0.0062684s, 1188 KB] Total time: 0.0062684s
Solution found.
search exit code: 0

