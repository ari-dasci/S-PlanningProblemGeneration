INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_1.pddl --sas-file temp_problems/sas_plan_1
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.010s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.005s wall-clock]
247 relevant atoms
104 auxiliary atoms
351 final queue length
409 total queue pushes
Completing instantiation... [0.000s CPU, 0.004s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.000s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.005s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
102 of 102 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 59
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 102
Translator axioms: 0
Translator task size: 430
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.000s CPU, 0.045s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_1
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_1 < temp_problems/sas_plan_1
[t=2.25e-05s, 728 KB] reading input...
[t=0.0009867s, 748 KB] done reading input!
[t=0.0039861s, 1096 KB] Initializing landmark count heuristic...
[t=0.0040167s, 1104 KB] Generating landmark graph...
[t=0.0040434s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0041063s, 1104 KB] Initializing Exploration...
[t=0.0042147s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0050045s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0050347s, 1152 KB] Landmarks generation time: 0.0009501s
[t=0.0050457s, 1152 KB] Discovered 27 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0050559s, 1152 KB] 46 edges
[t=0.0050649s, 1152 KB] approx. reasonable orders
[t=0.0052587s, 1152 KB] approx. obedient reasonable orders
[t=0.0053173s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0053273s, 1152 KB] Landmarks generation time: 0.0013042s
[t=0.0053372s, 1152 KB] Discovered 27 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0053474s, 1152 KB] 47 edges
[t=0.0053561s, 1152 KB] Landmark graph generation time: 0.0013435s
[t=0.0053654s, 1152 KB] Landmark graph contains 27 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.005375s, 1152 KB] Landmark graph contains 47 orderings.
[t=0.0054999s, 1152 KB] Simplifying 102 unary operators... done! [102 unary operators]
[t=0.0055802s, 1152 KB] time to simplify: 8.58e-05s
[t=0.0056103s, 1152 KB] Initializing additive heuristic...
[t=0.0056183s, 1152 KB] Initializing FF heuristic...
[t=0.0057458s, 1152 KB] Building successor generator...done!
[t=0.0058986s, 1152 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0059109s, 1152 KB] time for successor generation creation: 7.69e-05s
[t=0.0059253s, 1152 KB] Variables: 9
[t=0.0059346s, 1152 KB] FactPairs: 59
[t=0.005943s, 1152 KB] Bytes per state: 4
[t=0.0062406s, 1164 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0062625s, 1164 KB] 9 initial landmarks, 8 goal landmarks
[t=0.0063043s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0063157s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0063234s, 1164 KB] g=0, 1 evaluated, 0 expanded
[t=0.0063504s, 1164 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0063591s, 1164 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.006422s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0064313s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0064383s, 1164 KB] g=1, 4 evaluated, 3 expanded
[t=0.0065067s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0065153s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0065222s, 1164 KB] g=2, 7 evaluated, 6 expanded
[t=0.0065888s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.006597s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0066039s, 1164 KB] g=3, 10 evaluated, 9 expanded
[t=0.00667s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0066782s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0066849s, 1164 KB] g=4, 13 evaluated, 12 expanded
[t=0.006754s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0067843s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0067914s, 1164 KB] g=6, 16 evaluated, 15 expanded
[t=0.0068607s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0068698s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.006878s, 1164 KB] g=7, 19 evaluated, 18 expanded
[t=0.006966s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0069844s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0069994s, 1164 KB] g=9, 22 evaluated, 21 expanded
[t=0.0070828s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.007094s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0071035s, 1164 KB] g=10, 25 evaluated, 24 expanded
[t=0.0071803s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0071981s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0072068s, 1164 KB] g=11, 28 evaluated, 27 expanded
[t=0.007282s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0073021s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0073107s, 1164 KB] g=12, 31 evaluated, 30 expanded
[t=0.0073893s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0074052s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0074142s, 1164 KB] g=13, 34 evaluated, 33 expanded
[t=0.0074878s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0074994s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0075074s, 1164 KB] g=14, 37 evaluated, 36 expanded
[t=0.0075903s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0076043s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0076127s, 1164 KB] g=15, 40 evaluated, 39 expanded
[t=0.0076545s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0076639s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0076716s, 1164 KB] g=16, 41 evaluated, 40 expanded
[t=0.0077152s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0077398s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0077474s, 1164 KB] g=17, 43 evaluated, 42 expanded
[t=0.0078062s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0078168s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0078248s, 1164 KB] g=18, 45 evaluated, 44 expanded
[t=0.0078561s, 1164 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0078645s, 1164 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.007874s, 1164 KB] g=19, 46 evaluated, 45 expanded
[t=0.007899s, 1164 KB] Solution found!
[t=0.0079084s, 1164 KB] Actual search time: 0.0016386s
load obj7 obj9 obj2 (1)
load obj7 obj17 obj2 (1)
load obj7 obj14 obj2 (1)
load obj7 obj11 obj2 (1)
fly obj7 obj2 obj0 (1)
load obj7 obj13 obj0 (1)
unload obj7 obj11 obj0 (1)
fly obj7 obj0 obj5 (1)
unload obj7 obj9 obj5 (1)
load obj7 obj8 obj5 (1)
unload obj7 obj17 obj5 (1)
load obj7 obj16 obj5 (1)
load obj7 obj15 obj5 (1)
unload obj7 obj14 obj5 (1)
unload obj7 obj13 obj5 (1)
fly obj7 obj5 obj0 (1)
unload obj7 obj8 obj0 (1)
unload obj7 obj15 obj0 (1)
fly obj7 obj0 obj2 (1)
unload obj7 obj16 obj2 (1)
[t=0.0079165s, 1164 KB] Plan length: 20 step(s).
[t=0.0079165s, 1164 KB] Plan cost: 20
[t=0.0079165s, 1164 KB] Expanded 46 state(s).
[t=0.0079165s, 1164 KB] Reopened 0 state(s).
[t=0.0079165s, 1164 KB] Evaluated 47 state(s).
[t=0.0079165s, 1164 KB] Evaluations: 94
[t=0.0079165s, 1164 KB] Generated 532 state(s).
[t=0.0079165s, 1164 KB] Dead ends: 0 state(s).
[t=0.0079165s, 1164 KB] Number of registered states: 47
[t=0.0079165s, 1164 KB] Int hash set load factor: 47/64 = 0.734375
[t=0.0079165s, 1164 KB] Int hash set resizes: 6
[t=0.0079165s, 1164 KB] Search time: 0.0016785s
[t=0.0079165s, 1164 KB] Total time: 0.0079165s
Solution found.
search exit code: 0

