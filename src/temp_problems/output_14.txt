INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_14.pddl --sas-file temp_problems/sas_plan_14
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
318 relevant atoms
142 auxiliary atoms
460 final queue length
581 total queue pushes
Completing instantiation... [0.000s CPU, 0.003s wall-clock]
Instantiating: [0.000s CPU, 0.011s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.005s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
164 of 164 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 66
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 164
Translator axioms: 0
Translator task size: 719
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.003s wall-clock]
Done! [0.000s CPU, 0.025s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_14
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_14 < temp_problems/sas_plan_14
[t=1.07e-05s, 736 KB] reading input...
[t=0.0005892s, 764 KB] done reading input!
[t=0.0017326s, 1116 KB] Initializing landmark count heuristic...
[t=0.0017526s, 1116 KB] Generating landmark graph...
[t=0.001773s, 1120 KB] Building a landmark graph with reasonable orders.
[t=0.0018292s, 1120 KB] Initializing Exploration...
[t=0.001907s, 1144 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0022728s, 1168 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0022855s, 1168 KB] Landmarks generation time: 0.0004696s
[t=0.0022929s, 1168 KB] Discovered 19 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0023002s, 1168 KB] 25 edges
[t=0.002307s, 1168 KB] approx. reasonable orders
[t=0.0023396s, 1168 KB] approx. obedient reasonable orders
[t=0.002353s, 1168 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0023598s, 1168 KB] Landmarks generation time: 0.0006009s
[t=0.0023665s, 1168 KB] Discovered 19 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0023734s, 1168 KB] 25 edges
[t=0.0023799s, 1168 KB] Landmark graph generation time: 0.000629s
[t=0.0023868s, 1168 KB] Landmark graph contains 19 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0023937s, 1168 KB] Landmark graph contains 25 orderings.
[t=0.0024542s, 1168 KB] Simplifying 164 unary operators... done! [164 unary operators]
[t=0.0025383s, 1168 KB] time to simplify: 8.6e-05s
[t=0.002558s, 1168 KB] Initializing additive heuristic...
[t=0.0025646s, 1168 KB] Initializing FF heuristic...
[t=0.0026108s, 1168 KB] Building successor generator...done!
[t=0.0026798s, 1176 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0026882s, 1176 KB] time for successor generation creation: 5.57e-05s
[t=0.0026964s, 1176 KB] Variables: 11
[t=0.0027033s, 1176 KB] FactPairs: 66
[t=0.0027098s, 1176 KB] Bytes per state: 4
[t=0.0028914s, 1196 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0029014s, 1196 KB] 6 initial landmarks, 6 goal landmarks
[t=0.0029236s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0029307s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0029376s, 1196 KB] g=0, 1 evaluated, 0 expanded
[t=0.002954s, 1196 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0029608s, 1196 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.002973s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0029796s, 1196 KB] g=1, 2 evaluated, 1 expanded
[t=0.0030193s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0030259s, 1196 KB] g=1, 5 evaluated, 4 expanded
[t=0.0030436s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0030504s, 1196 KB] g=2, 6 evaluated, 5 expanded
[t=0.0031278s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0031346s, 1196 KB] g=2, 13 evaluated, 12 expanded
[t=0.0031594s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.003166s, 1196 KB] g=3, 15 evaluated, 14 expanded
[t=0.0032034s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.00321s, 1196 KB] g=3, 18 evaluated, 17 expanded
[t=0.0032257s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0032326s, 1196 KB] g=4, 19 evaluated, 18 expanded
[t=0.0033049s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0033116s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.003318s, 1196 KB] g=5, 26 evaluated, 25 expanded
[t=0.0033625s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0033691s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0033793s, 1196 KB] g=6, 30 evaluated, 29 expanded
[t=0.0034283s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0034349s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0034415s, 1196 KB] g=8, 34 evaluated, 33 expanded
[t=0.0034883s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0034951s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0035016s, 1196 KB] g=9, 38 evaluated, 37 expanded
[t=0.0035171s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0035236s, 1196 KB] g=10, 39 evaluated, 38 expanded
[t=0.0035592s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0035658s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.003572s, 1196 KB] g=12, 42 evaluated, 41 expanded
[t=0.0035872s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0035936s, 1196 KB] g=13, 43 evaluated, 42 expanded
[t=0.0036189s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0036252s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0036316s, 1196 KB] g=15, 45 evaluated, 44 expanded
[t=0.0036558s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0036623s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0036686s, 1196 KB] g=16, 47 evaluated, 46 expanded
[t=0.0036922s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0036985s, 1196 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0037049s, 1196 KB] g=17, 49 evaluated, 48 expanded
[t=0.003721s, 1196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0037276s, 1196 KB] g=18, 50 evaluated, 49 expanded
[t=0.0037415s, 1196 KB] Solution found!
[t=0.0037484s, 1196 KB] Actual search time: 0.000841s
load obj8 obj16 obj3 (1)
load obj8 obj15 obj3 (1)
load obj8 obj14 obj3 (1)
fly obj8 obj3 obj0 (1)
unload obj8 obj14 obj0 (1)
load obj8 obj11 obj0 (1)
fly obj8 obj0 obj9 (1)
unload obj8 obj16 obj9 (1)
load obj8 obj12 obj9 (1)
fly obj8 obj9 obj0 (1)
fly obj8 obj0 obj3 (1)
unload obj8 obj11 obj3 (1)
fly obj8 obj3 obj0 (1)
fly obj8 obj0 obj5 (1)
unload obj8 obj15 obj5 (1)
load obj8 obj13 obj5 (1)
unload obj8 obj12 obj5 (1)
fly obj8 obj5 obj0 (1)
unload obj8 obj13 obj0 (1)
[t=0.0037549s, 1196 KB] Plan length: 19 step(s).
[t=0.0037549s, 1196 KB] Plan cost: 19
[t=0.0037549s, 1196 KB] Expanded 50 state(s).
[t=0.0037549s, 1196 KB] Reopened 0 state(s).
[t=0.0037549s, 1196 KB] Evaluated 51 state(s).
[t=0.0037549s, 1196 KB] Evaluations: 102
[t=0.0037549s, 1196 KB] Generated 699 state(s).
[t=0.0037549s, 1196 KB] Dead ends: 0 state(s).
[t=0.0037549s, 1196 KB] Number of registered states: 51
[t=0.0037549s, 1196 KB] Int hash set load factor: 51/64 = 0.796875
[t=0.0037549s, 1196 KB] Int hash set resizes: 6
[t=0.0037549s, 1196 KB] Search time: 0.0008641s
[t=0.0037549s, 1196 KB] Total time: 0.0037549s
Solution found.
search exit code: 0

