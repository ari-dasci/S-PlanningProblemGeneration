INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_14.pddl --sas-file temp_problems/sas_plan_14
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.034s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.016s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.010s wall-clock]
297 relevant atoms
135 auxiliary atoms
432 final queue length
535 total queue pushes
Completing instantiation... [0.016s CPU, 0.007s wall-clock]
Instantiating: [0.016s CPU, 0.035s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.003s wall-clock]
Computing fact groups: [0.000s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.008s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
146 of 146 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 65
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 146
Translator axioms: 0
Translator task size: 652
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.016s CPU, 0.097s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_14
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_14 < temp_problems/sas_plan_14
[t=2.08e-05s, 728 KB] reading input...
[t=0.0014934s, 756 KB] done reading input!
[t=0.0049183s, 1100 KB] Initializing landmark count heuristic...
[t=0.0049697s, 1108 KB] Generating landmark graph...
[t=0.0050013s, 1108 KB] Building a landmark graph with reasonable orders.
[t=0.0051186s, 1112 KB] Initializing Exploration...
[t=0.0052954s, 1128 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0061483s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.00618s, 1160 KB] Landmarks generation time: 0.0010976s
[t=0.0061895s, 1160 KB] Discovered 20 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0061987s, 1160 KB] 21 edges
[t=0.0062071s, 1160 KB] approx. reasonable orders
[t=0.0062769s, 1160 KB] approx. obedient reasonable orders
[t=0.0063015s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0063103s, 1160 KB] Landmarks generation time: 0.0013354s
[t=0.0063189s, 1160 KB] Discovered 20 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0063279s, 1160 KB] 21 edges
[t=0.006336s, 1160 KB] Landmark graph generation time: 0.00137s
[t=0.0063442s, 1160 KB] Landmark graph contains 20 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0063662s, 1160 KB] Landmark graph contains 21 orderings.
[t=0.0065019s, 1160 KB] Simplifying 146 unary operators... done! [146 unary operators]
[t=0.0066317s, 1160 KB] time to simplify: 0.0001346s
[t=0.0066704s, 1160 KB] Initializing additive heuristic...
[t=0.0066785s, 1160 KB] Initializing FF heuristic...
[t=0.0067845s, 1160 KB] Building successor generator...done!
[t=0.0069215s, 1160 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0069304s, 1160 KB] time for successor generation creation: 0.0001187s
[t=0.0069433s, 1160 KB] Variables: 11
[t=0.0069508s, 1160 KB] FactPairs: 65
[t=0.0069579s, 1160 KB] Bytes per state: 4
[t=0.0073511s, 1180 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.00738s, 1180 KB] 7 initial landmarks, 6 goal landmarks
[t=0.0074189s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0074275s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0074345s, 1180 KB] g=0, 1 evaluated, 0 expanded
[t=0.0074626s, 1180 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.00747s, 1180 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0075129s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0075206s, 1180 KB] g=1, 3 evaluated, 2 expanded
[t=0.0075564s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0075641s, 1180 KB] g=1, 4 evaluated, 3 expanded
[t=0.0075979s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0076055s, 1180 KB] g=2, 5 evaluated, 4 expanded
[t=0.0076615s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0076698s, 1180 KB] g=3, 7 evaluated, 6 expanded
[t=0.0077489s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0077577s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.007765s, 1180 KB] g=4, 10 evaluated, 9 expanded
[t=0.0077961s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0078037s, 1180 KB] g=5, 11 evaluated, 10 expanded
[t=0.0078398s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0078478s, 1180 KB] g=5, 12 evaluated, 11 expanded
[t=0.0078787s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0078867s, 1180 KB] g=6, 13 evaluated, 12 expanded
[t=0.0079977s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0080087s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0080215s, 1180 KB] g=7, 17 evaluated, 16 expanded
[t=0.0080831s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0080931s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0081009s, 1180 KB] g=8, 19 evaluated, 18 expanded
[t=0.0081601s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0081706s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0081792s, 1180 KB] g=9, 21 evaluated, 20 expanded
[t=0.0082126s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0082217s, 1180 KB] g=10, 22 evaluated, 21 expanded
[t=0.0082552s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.008265s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0082733s, 1180 KB] g=11, 23 evaluated, 22 expanded
[t=0.0083073s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0083165s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0083245s, 1180 KB] g=12, 24 evaluated, 23 expanded
[t=0.0083586s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.008368s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0083758s, 1180 KB] g=13, 25 evaluated, 24 expanded
[t=0.0084102s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0084189s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0084266s, 1180 KB] g=14, 26 evaluated, 25 expanded
[t=0.0084817s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.008491s, 1180 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0084991s, 1180 KB] g=15, 28 evaluated, 27 expanded
[t=0.0085325s, 1180 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0085419s, 1180 KB] g=16, 29 evaluated, 28 expanded
[t=0.008576s, 1180 KB] Solution found!
[t=0.0085988s, 1180 KB] Actual search time: 0.0012136s
fly obj6 obj0 obj8 (1)
load obj6 obj12 obj8 (1)
fly obj6 obj8 obj7 (1)
load obj6 obj15 obj7 (1)
fly obj6 obj7 obj0 (1)
load obj6 obj5 obj0 (1)
load obj6 obj3 obj0 (1)
load obj6 obj2 obj0 (1)
unload obj6 obj15 obj0 (1)
fly obj6 obj0 obj7 (1)
unload obj6 obj5 obj7 (1)
unload obj6 obj3 obj7 (1)
unload obj6 obj2 obj7 (1)
unload obj6 obj12 obj7 (1)
load obj13 obj14 obj8 (1)
drive obj13 obj8 obj10 (1)
unload obj13 obj14 obj10 (1)
[t=0.0086076s, 1180 KB] Plan length: 17 step(s).
[t=0.0086076s, 1180 KB] Plan cost: 17
[t=0.0086076s, 1180 KB] Expanded 29 state(s).
[t=0.0086076s, 1180 KB] Reopened 0 state(s).
[t=0.0086076s, 1180 KB] Evaluated 30 state(s).
[t=0.0086076s, 1180 KB] Evaluations: 60
[t=0.0086076s, 1180 KB] Generated 392 state(s).
[t=0.0086076s, 1180 KB] Dead ends: 0 state(s).
[t=0.0086076s, 1180 KB] Number of registered states: 30
[t=0.0086076s, 1180 KB] Int hash set load factor: 30/32 = 0.9375
[t=0.0086076s, 1180 KB] Int hash set resizes: 5
[t=0.0086076s, 1180 KB] Search time: 0.0012603s
[t=0.0086076s, 1180 KB] Total time: 0.0086076s
Solution found.
search exit code: 0

