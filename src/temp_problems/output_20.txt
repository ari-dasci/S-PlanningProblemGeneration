INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_20.pddl --sas-file temp_problems/sas_plan_20
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
273 relevant atoms
129 auxiliary atoms
402 final queue length
485 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.000s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
9 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
128 of 128 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 63
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 128
Translator axioms: 0
Translator task size: 570
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.016s wall-clock]
Done! [0.000s CPU, 0.016s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_20
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_20 < temp_problems/sas_plan_20
[t=7.9e-06s, 724 KB] reading input...
[t=0.000465s, 748 KB] done reading input!
[t=0.0015898s, 1084 KB] Initializing landmark count heuristic...
[t=0.0016071s, 1084 KB] Generating landmark graph...
[t=0.001622s, 1084 KB] Building a landmark graph with reasonable orders.
[t=0.0016841s, 1092 KB] Initializing Exploration...
[t=0.0017802s, 1108 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0022584s, 1132 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0022806s, 1132 KB] Landmarks generation time: 0.0006204s
[t=0.0022903s, 1132 KB] Discovered 24 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.002299s, 1132 KB] 35 edges
[t=0.0023076s, 1132 KB] approx. reasonable orders
[t=0.0023661s, 1132 KB] approx. obedient reasonable orders
[t=0.0023871s, 1132 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.002396s, 1132 KB] Landmarks generation time: 0.0007823s
[t=0.0024046s, 1132 KB] Discovered 24 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0024132s, 1132 KB] 35 edges
[t=0.0024213s, 1132 KB] Landmark graph generation time: 0.0008162s
[t=0.0024295s, 1132 KB] Landmark graph contains 24 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0024382s, 1132 KB] Landmark graph contains 35 orderings.
[t=0.0025127s, 1132 KB] Simplifying 128 unary operators... done! [128 unary operators]
[t=0.0025815s, 1152 KB] time to simplify: 7.14e-05s
[t=0.0026039s, 1152 KB] Initializing additive heuristic...
[t=0.0026119s, 1152 KB] Initializing FF heuristic...
[t=0.0026675s, 1152 KB] Building successor generator...done!
[t=0.0027352s, 1152 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0027431s, 1152 KB] time for successor generation creation: 5.19e-05s
[t=0.0027525s, 1152 KB] Variables: 9
[t=0.0027602s, 1152 KB] FactPairs: 63
[t=0.002768s, 1152 KB] Bytes per state: 4
[t=0.0029734s, 1172 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0029883s, 1172 KB] 8 initial landmarks, 6 goal landmarks
[t=0.0030134s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0030231s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0030315s, 1172 KB] g=0, 1 evaluated, 0 expanded
[t=0.0030498s, 1172 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.003058s, 1172 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0030856s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0030941s, 1172 KB] g=1, 3 evaluated, 2 expanded
[t=0.0031267s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0031354s, 1172 KB] g=1, 5 evaluated, 4 expanded
[t=0.0031565s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.003165s, 1172 KB] g=2, 6 evaluated, 5 expanded
[t=0.0032274s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0032371s, 1172 KB] g=2, 11 evaluated, 10 expanded
[t=0.0032702s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0032791s, 1172 KB] g=3, 13 evaluated, 12 expanded
[t=0.0033111s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0033201s, 1172 KB] g=3, 15 evaluated, 14 expanded
[t=0.0033404s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0033487s, 1172 KB] g=4, 16 evaluated, 15 expanded
[t=0.0033743s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0033852s, 1172 KB] g=4, 17 evaluated, 16 expanded
[t=0.0034431s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0034556s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0034647s, 1172 KB] g=5, 21 evaluated, 20 expanded
[t=0.0034986s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0035175s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0035282s, 1172 KB] g=6, 23 evaluated, 22 expanded
[t=0.0035621s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.003571s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0035797s, 1172 KB] g=7, 25 evaluated, 24 expanded
[t=0.0036145s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.003624s, 1172 KB] g=8, 27 evaluated, 26 expanded
[t=0.0036798s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0036921s, 1172 KB] g=9, 30 evaluated, 29 expanded
[t=0.0037455s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0037569s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0037657s, 1172 KB] g=10, 33 evaluated, 32 expanded
[t=0.0038023s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0038129s, 1172 KB] g=11, 35 evaluated, 34 expanded
[t=0.0038516s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0038623s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.003871s, 1172 KB] g=12, 37 evaluated, 36 expanded
[t=0.0039295s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0039416s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0039512s, 1172 KB] g=13, 40 evaluated, 39 expanded
[t=0.0039855s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0039966s, 1172 KB] g=14, 42 evaluated, 41 expanded
[t=0.0040489s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0040599s, 1172 KB] g=15, 45 evaluated, 44 expanded
[t=0.0040978s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0041086s, 1172 KB] g=16, 47 evaluated, 46 expanded
[t=0.0041325s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0041415s, 1172 KB] g=16, 48 evaluated, 47 expanded
[t=0.0041663s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0041754s, 1172 KB] g=17, 49 evaluated, 48 expanded
[t=0.0041956s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0042043s, 1172 KB] g=17, 50 evaluated, 49 expanded
[t=0.0042369s, 1172 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0042454s, 1172 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0042536s, 1172 KB] g=18, 52 evaluated, 51 expanded
[t=0.0042747s, 1172 KB] Solution found!
[t=0.004284s, 1172 KB] Actual search time: 0.0012879s
load obj3 obj8 obj0 (1)
load obj3 obj4 obj0 (1)
load obj3 obj2 obj0 (1)
fly obj3 obj0 obj5 (1)
unload obj3 obj4 obj5 (1)
unload obj3 obj2 obj5 (1)
load obj3 obj10 obj5 (1)
fly obj3 obj5 obj7 (1)
unload obj3 obj8 obj7 (1)
unload obj3 obj10 obj7 (1)
drive obj13 obj7 obj11 (1)
load obj13 obj14 obj11 (1)
load obj13 obj12 obj11 (1)
drive obj13 obj11 obj7 (1)
unload obj13 obj14 obj7 (1)
load obj3 obj14 obj7 (1)
fly obj3 obj7 obj5 (1)
unload obj3 obj14 obj5 (1)
unload obj13 obj12 obj7 (1)
[t=0.0042923s, 1172 KB] Plan length: 19 step(s).
[t=0.0042923s, 1172 KB] Plan cost: 19
[t=0.0042923s, 1172 KB] Expanded 52 state(s).
[t=0.0042923s, 1172 KB] Reopened 0 state(s).
[t=0.0042923s, 1172 KB] Evaluated 53 state(s).
[t=0.0042923s, 1172 KB] Evaluations: 106
[t=0.0042923s, 1172 KB] Generated 586 state(s).
[t=0.0042923s, 1172 KB] Dead ends: 0 state(s).
[t=0.0042923s, 1172 KB] Number of registered states: 53
[t=0.0042923s, 1172 KB] Int hash set load factor: 53/64 = 0.828125
[t=0.0042923s, 1172 KB] Int hash set resizes: 6
[t=0.0042923s, 1172 KB] Search time: 0.0013197s
[t=0.0042923s, 1172 KB] Total time: 0.0042923s
Solution found.
search exit code: 0

