INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_20.pddl --sas-file temp_problems/sas_plan_20
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.006s wall-clock]
290 relevant atoms
122 auxiliary atoms
412 final queue length
506 total queue pushes
Completing instantiation... [0.016s CPU, 0.006s wall-clock]
Instantiating: [0.016s CPU, 0.018s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.006s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
138 of 138 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.002s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 62
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 138
Translator axioms: 0
Translator task size: 576
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.016s CPU, 0.049s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_20
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_20 < temp_problems/sas_plan_20
[t=1.73e-05s, 724 KB] reading input...
[t=0.0014274s, 752 KB] done reading input!
[t=0.0041473s, 1096 KB] Initializing landmark count heuristic...
[t=0.0041865s, 1104 KB] Generating landmark graph...
[t=0.0042195s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0043147s, 1104 KB] Initializing Exploration...
[t=0.0044735s, 1120 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0052461s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0052751s, 1144 KB] Landmarks generation time: 0.0009907s
[t=0.0052865s, 1144 KB] Discovered 19 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0052971s, 1144 KB] 24 edges
[t=0.0053062s, 1144 KB] approx. reasonable orders
[t=0.0053142s, 1144 KB] approx. obedient reasonable orders
[t=0.0053345s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0053454s, 1144 KB] Landmarks generation time: 0.0011532s
[t=0.0053548s, 1144 KB] Discovered 19 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0053648s, 1144 KB] 24 edges
[t=0.0053728s, 1144 KB] Landmark graph generation time: 0.0011903s
[t=0.005382s, 1144 KB] Landmark graph contains 19 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0053922s, 1144 KB] Landmark graph contains 24 orderings.
[t=0.0055248s, 1144 KB] Simplifying 138 unary operators... done! [138 unary operators]
[t=0.0056445s, 1156 KB] time to simplify: 0.0001256s
[t=0.0056789s, 1156 KB] Initializing additive heuristic...
[t=0.0056882s, 1156 KB] Initializing FF heuristic...
[t=0.0057896s, 1156 KB] Building successor generator...done!
[t=0.0059044s, 1156 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0059128s, 1156 KB] time for successor generation creation: 9.62e-05s
[t=0.0059238s, 1156 KB] Variables: 9
[t=0.0059314s, 1156 KB] FactPairs: 62
[t=0.0059391s, 1156 KB] Bytes per state: 4
[t=0.0062741s, 1176 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.006297s, 1176 KB] 7 initial landmarks, 7 goal landmarks
[t=0.0063333s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0063437s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0063519s, 1176 KB] g=0, 1 evaluated, 0 expanded
[t=0.0063873s, 1176 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0063985s, 1176 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0064214s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0064309s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0064399s, 1176 KB] g=1, 2 evaluated, 1 expanded
[t=0.0065189s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0065305s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0065393s, 1176 KB] g=2, 4 evaluated, 3 expanded
[t=0.0066455s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0066569s, 1176 KB] g=3, 7 evaluated, 6 expanded
[t=0.0067325s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0067429s, 1176 KB] g=3, 9 evaluated, 8 expanded
[t=0.0068716s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0068832s, 1176 KB] g=4, 13 evaluated, 12 expanded
[t=0.0069545s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0069645s, 1176 KB] g=4, 15 evaluated, 14 expanded
[t=0.0070913s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0071031s, 1176 KB] g=5, 19 evaluated, 18 expanded
[t=0.0071794s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0071904s, 1176 KB] g=5, 21 evaluated, 20 expanded
[t=0.007278s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0072946s, 1176 KB] g=6, 24 evaluated, 23 expanded
[t=0.0073312s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0073419s, 1176 KB] g=6, 25 evaluated, 24 expanded
[t=0.0074841s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0074987s, 1176 KB] g=7, 30 evaluated, 29 expanded
[t=0.0075504s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0075608s, 1176 KB] g=8, 32 evaluated, 31 expanded
[t=0.007626s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0076392s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0076484s, 1176 KB] g=9, 34 evaluated, 33 expanded
[t=0.0077089s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0077201s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0077296s, 1176 KB] g=10, 36 evaluated, 35 expanded
[t=0.0077679s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0077781s, 1176 KB] g=11, 37 evaluated, 36 expanded
[t=0.007815s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0078241s, 1176 KB] g=12, 38 evaluated, 37 expanded
[t=0.0078848s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0078959s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0079054s, 1176 KB] g=13, 40 evaluated, 39 expanded
[t=0.0079404s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0079516s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0079615s, 1176 KB] g=14, 41 evaluated, 40 expanded
[t=0.0079967s, 1176 KB] Solution found!
[t=0.0080071s, 1176 KB] Actual search time: 0.0017039s
fly obj9 obj0 obj2 (1)
load obj9 obj11 obj2 (1)
load obj17 obj15 obj0 (1)
load obj17 obj14 obj0 (1)
load obj17 obj13 obj0 (1)
fly obj17 obj0 obj2 (1)
unload obj17 obj13 obj2 (1)
fly obj9 obj2 obj6 (1)
load obj9 obj12 obj6 (1)
unload obj9 obj11 obj6 (1)
fly obj9 obj6 obj2 (1)
unload obj9 obj12 obj2 (1)
fly obj17 obj2 obj6 (1)
unload obj17 obj15 obj6 (1)
unload obj17 obj14 obj6 (1)
[t=0.0080163s, 1176 KB] Plan length: 15 step(s).
[t=0.0080163s, 1176 KB] Plan cost: 15
[t=0.0080163s, 1176 KB] Expanded 41 state(s).
[t=0.0080163s, 1176 KB] Reopened 0 state(s).
[t=0.0080163s, 1176 KB] Evaluated 42 state(s).
[t=0.0080163s, 1176 KB] Evaluations: 84
[t=0.0080163s, 1176 KB] Generated 568 state(s).
[t=0.0080163s, 1176 KB] Dead ends: 0 state(s).
[t=0.0080163s, 1176 KB] Number of registered states: 42
[t=0.0080163s, 1176 KB] Int hash set load factor: 42/64 = 0.65625
[t=0.0080163s, 1176 KB] Int hash set resizes: 6
[t=0.0080163s, 1176 KB] Search time: 0.0017451s
[t=0.0080163s, 1176 KB] Total time: 0.0080163s
Solution found.
search exit code: 0

