INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_20.pddl --sas-file temp_problems/sas_plan_20
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.016s CPU, 0.011s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.016s CPU, 0.002s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 23 rules.
Computing model... [0.016s CPU, 0.009s wall-clock]
369 relevant atoms
181 auxiliary atoms
550 final queue length
725 total queue pushes
Completing instantiation... [0.000s CPU, 0.009s wall-clock]
Instantiating: [0.031s CPU, 0.026s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.001s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.016s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.016s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.009s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
9 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.005s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
210 of 210 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 63
Translator goal facts: 4
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 210
Translator axioms: 0
Translator task size: 858
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.008s wall-clock]
Done! [0.078s CPU, 0.065s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_20
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_20 < temp_problems/sas_plan_20
[t=1.75e-05s, 724 KB] reading input...
[t=0.0018515s, 760 KB] done reading input!
[t=0.0046246s, 1100 KB] Initializing landmark count heuristic...
[t=0.0046659s, 1108 KB] Generating landmark graph...
[t=0.0047268s, 1112 KB] Building a landmark graph with reasonable orders.
[t=0.0048439s, 1112 KB] Initializing Exploration...
[t=0.0050691s, 1136 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.005977s, 1156 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0060233s, 1156 KB] Landmarks generation time: 0.0012244s
[t=0.0060371s, 1156 KB] Discovered 13 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0060464s, 1156 KB] 16 edges
[t=0.0060549s, 1156 KB] approx. reasonable orders
[t=0.0060838s, 1156 KB] approx. obedient reasonable orders
[t=0.0061013s, 1156 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0061106s, 1156 KB] Landmarks generation time: 0.0014401s
[t=0.0061192s, 1156 KB] Discovered 13 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0061277s, 1156 KB] 16 edges
[t=0.0061349s, 1156 KB] Landmark graph generation time: 0.0014728s
[t=0.006163s, 1156 KB] Landmark graph contains 13 landmarks, of which 5 are disjunctive and 0 are conjunctive.
[t=0.0061746s, 1156 KB] Landmark graph contains 16 orderings.
[t=0.0063452s, 1156 KB] Simplifying 210 unary operators... done! [210 unary operators]
[t=0.006511s, 1156 KB] time to simplify: 0.000173s
[t=0.0067232s, 1156 KB] Initializing additive heuristic...
[t=0.0067438s, 1156 KB] Initializing FF heuristic...
[t=0.0068901s, 1156 KB] Building successor generator...done!
[t=0.0070962s, 1172 KB] peak memory difference for successor generator creation: 16 KB
[t=0.0071082s, 1172 KB] time for successor generation creation: 0.000177s
[t=0.0071233s, 1172 KB] Variables: 9
[t=0.0071329s, 1172 KB] FactPairs: 63
[t=0.0071412s, 1172 KB] Bytes per state: 4
[t=0.0074819s, 1192 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0075043s, 1192 KB] 4 initial landmarks, 4 goal landmarks
[t=0.0075468s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0075582s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0075659s, 1192 KB] g=0, 1 evaluated, 0 expanded
[t=0.0076004s, 1192 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0076096s, 1192 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0076574s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0076681s, 1192 KB] g=1, 3 evaluated, 2 expanded
[t=0.0078284s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0078472s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0078561s, 1192 KB] g=2, 6 evaluated, 5 expanded
[t=0.0079515s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0079629s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0079715s, 1192 KB] g=3, 9 evaluated, 8 expanded
[t=0.0081134s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0081319s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0081397s, 1192 KB] g=4, 13 evaluated, 12 expanded
[t=0.008249s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0082616s, 1192 KB] g=5, 16 evaluated, 15 expanded
[t=0.0083643s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.008394s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0084027s, 1192 KB] g=6, 19 evaluated, 18 expanded
[t=0.0085164s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0085277s, 1192 KB] g=8, 22 evaluated, 21 expanded
[t=0.008568s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0085829s, 1192 KB] g=9, 23 evaluated, 22 expanded
[t=0.0086581s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0086684s, 1192 KB] g=9, 25 evaluated, 24 expanded
[t=0.0087229s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0087341s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0087425s, 1192 KB] g=10, 26 evaluated, 25 expanded
[t=0.0088192s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0088327s, 1192 KB] g=12, 28 evaluated, 27 expanded
[t=0.0088715s, 1192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0088813s, 1192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0088894s, 1192 KB] g=13, 29 evaluated, 28 expanded
[t=0.0089228s, 1192 KB] Solution found!
[t=0.0089337s, 1192 KB] Actual search time: 0.0014219s
fly obj15 obj12 obj3 (1)
load obj15 obj16 obj3 (1)
load obj15 obj10 obj3 (1)
load obj13 obj11 obj8 (1)
drive obj13 obj8 obj4 (1)
unload obj13 obj11 obj4 (1)
fly obj15 obj3 obj12 (1)
unload obj15 obj16 obj12 (1)
unload obj15 obj10 obj12 (1)
fly obj15 obj12 obj3 (1)
fly obj15 obj3 obj4 (1)
load obj15 obj7 obj4 (1)
fly obj15 obj4 obj3 (1)
unload obj15 obj7 obj3 (1)
[t=0.0089425s, 1192 KB] Plan length: 14 step(s).
[t=0.0089425s, 1192 KB] Plan cost: 14
[t=0.0089425s, 1192 KB] Expanded 29 state(s).
[t=0.0089425s, 1192 KB] Reopened 0 state(s).
[t=0.0089425s, 1192 KB] Evaluated 30 state(s).
[t=0.0089425s, 1192 KB] Evaluations: 60
[t=0.0089425s, 1192 KB] Generated 536 state(s).
[t=0.0089425s, 1192 KB] Dead ends: 0 state(s).
[t=0.0089425s, 1192 KB] Number of registered states: 30
[t=0.0089425s, 1192 KB] Int hash set load factor: 30/32 = 0.9375
[t=0.0089425s, 1192 KB] Int hash set resizes: 5
[t=0.0089425s, 1192 KB] Search time: 0.0014633s
[t=0.0089425s, 1192 KB] Total time: 0.0089425s
Solution found.
search exit code: 0

