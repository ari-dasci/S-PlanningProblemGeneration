INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_20.pddl --sas-file temp_problems/sas_plan_20
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.005s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.007s wall-clock]
282 relevant atoms
121 auxiliary atoms
403 final queue length
493 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.012s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.008s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
134 of 134 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 64
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 134
Translator axioms: 0
Translator task size: 596
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.008s wall-clock]
Done! [0.000s CPU, 0.028s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_20
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_20 < temp_problems/sas_plan_20
[t=7.1e-06s, 728 KB] reading input...
[t=0.0004768s, 752 KB] done reading input!
[t=0.0016835s, 1084 KB] Initializing landmark count heuristic...
[t=0.0017066s, 1084 KB] Generating landmark graph...
[t=0.0017282s, 1088 KB] Building a landmark graph with reasonable orders.
[t=0.001789s, 1096 KB] Initializing Exploration...
[t=0.0018566s, 1108 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0023987s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0024124s, 1160 KB] Landmarks generation time: 0.0006413s
[t=0.0024202s, 1160 KB] Discovered 35 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0024279s, 1160 KB] 82 edges
[t=0.0024347s, 1160 KB] approx. reasonable orders
[t=0.0024933s, 1160 KB] approx. obedient reasonable orders
[t=0.0025102s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0025173s, 1160 KB] Landmarks generation time: 0.0008028s
[t=0.0025241s, 1160 KB] Discovered 35 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.002531s, 1160 KB] 82 edges
[t=0.0025379s, 1160 KB] Landmark graph generation time: 0.0008333s
[t=0.0025447s, 1160 KB] Landmark graph contains 35 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0025515s, 1160 KB] Landmark graph contains 82 orderings.
[t=0.0026097s, 1160 KB] Simplifying 134 unary operators... done! [134 unary operators]
[t=0.0026561s, 1160 KB] time to simplify: 4.84e-05s
[t=0.0026763s, 1164 KB] Initializing additive heuristic...
[t=0.0026828s, 1164 KB] Initializing FF heuristic...
[t=0.0027264s, 1164 KB] Building successor generator...done!
[t=0.0027809s, 1164 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0027875s, 1164 KB] time for successor generation creation: 4.19e-05s
[t=0.0027952s, 1164 KB] Variables: 11
[t=0.002802s, 1164 KB] FactPairs: 64
[t=0.0028084s, 1164 KB] Bytes per state: 4
[t=0.0030015s, 1184 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0030152s, 1184 KB] 8 initial landmarks, 7 goal landmarks
[t=0.0030369s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0030442s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0030513s, 1184 KB] g=0, 1 evaluated, 0 expanded
[t=0.003068s, 1184 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0030748s, 1184 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.003116s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0031227s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0031294s, 1184 KB] g=1, 4 evaluated, 3 expanded
[t=0.0031712s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.003178s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0031844s, 1184 KB] g=2, 7 evaluated, 6 expanded
[t=0.0032238s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0032305s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0032368s, 1184 KB] g=3, 10 evaluated, 9 expanded
[t=0.0032747s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0032811s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0032877s, 1184 KB] g=4, 13 evaluated, 12 expanded
[t=0.0033232s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0033301s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0033381s, 1184 KB] g=5, 16 evaluated, 15 expanded
[t=0.0033942s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0034011s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0034199s, 1184 KB] g=6, 19 evaluated, 18 expanded
[t=0.0034463s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0034531s, 1184 KB] g=7, 21 evaluated, 20 expanded
[t=0.0034883s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0034951s, 1184 KB] g=7, 24 evaluated, 23 expanded
[t=0.0035114s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.003518s, 1184 KB] g=8, 25 evaluated, 24 expanded
[t=0.0035739s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0035804s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0035865s, 1184 KB] g=9, 31 evaluated, 30 expanded
[t=0.0036234s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0036298s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.003636s, 1184 KB] g=10, 34 evaluated, 33 expanded
[t=0.0036707s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0036775s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0036843s, 1184 KB] g=11, 37 evaluated, 36 expanded
[t=0.0037204s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0037269s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0037333s, 1184 KB] g=12, 40 evaluated, 39 expanded
[t=0.0037767s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0037832s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.00379s, 1184 KB] g=13, 43 evaluated, 42 expanded
[t=0.0038268s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0038333s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0038399s, 1184 KB] g=14, 46 evaluated, 45 expanded
[t=0.0038767s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0038834s, 1184 KB] g=15, 48 evaluated, 47 expanded
[t=0.0039093s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0039159s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0039223s, 1184 KB] g=16, 50 evaluated, 49 expanded
[t=0.0039492s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.003956s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0039625s, 1184 KB] g=18, 52 evaluated, 51 expanded
[t=0.0039893s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0039958s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0040021s, 1184 KB] g=19, 54 evaluated, 53 expanded
[t=0.0040275s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0040343s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0040406s, 1184 KB] g=20, 56 evaluated, 55 expanded
[t=0.0040662s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.004073s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0040797s, 1184 KB] g=21, 58 evaluated, 57 expanded
[t=0.0041039s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0041113s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0041182s, 1184 KB] g=22, 60 evaluated, 59 expanded
[t=0.0041421s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0041488s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0041553s, 1184 KB] g=23, 62 evaluated, 61 expanded
[t=0.0041695s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0041762s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0041825s, 1184 KB] g=24, 63 evaluated, 62 expanded
[t=0.0041988s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0042054s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0042121s, 1184 KB] g=25, 64 evaluated, 63 expanded
[t=0.0042314s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0042384s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0042451s, 1184 KB] g=26, 65 evaluated, 64 expanded
[t=0.0042618s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0042683s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0042745s, 1184 KB] g=27, 66 evaluated, 65 expanded
[t=0.0042934s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0042997s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0043059s, 1184 KB] g=28, 67 evaluated, 66 expanded
[t=0.0043213s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0043276s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0043339s, 1184 KB] g=29, 68 evaluated, 67 expanded
[t=0.004349s, 1184 KB] Solution found!
[t=0.0043566s, 1184 KB] Actual search time: 0.0013352s
load obj4 obj16 obj3 (1)
load obj4 obj15 obj3 (1)
load obj4 obj14 obj3 (1)
load obj4 obj13 obj3 (1)
load obj4 obj12 obj3 (1)
load obj4 obj11 obj3 (1)
drive obj4 obj3 obj0 (1)
load obj4 obj9 obj0 (1)
unload obj4 obj16 obj0 (1)
unload obj4 obj15 obj0 (1)
unload obj4 obj14 obj0 (1)
unload obj4 obj13 obj0 (1)
unload obj4 obj12 obj0 (1)
unload obj4 obj11 obj0 (1)
drive obj4 obj0 obj3 (1)
unload obj4 obj9 obj3 (1)
fly obj8 obj5 obj0 (1)
load obj8 obj16 obj0 (1)
load obj8 obj15 obj0 (1)
load obj8 obj14 obj0 (1)
load obj8 obj13 obj0 (1)
load obj8 obj12 obj0 (1)
load obj8 obj11 obj0 (1)
fly obj8 obj0 obj5 (1)
unload obj8 obj16 obj5 (1)
unload obj8 obj15 obj5 (1)
unload obj8 obj14 obj5 (1)
unload obj8 obj13 obj5 (1)
unload obj8 obj12 obj5 (1)
unload obj8 obj11 obj5 (1)
[t=0.0043628s, 1184 KB] Plan length: 30 step(s).
[t=0.0043628s, 1184 KB] Plan cost: 30
[t=0.0043628s, 1184 KB] Expanded 68 state(s).
[t=0.0043628s, 1184 KB] Reopened 0 state(s).
[t=0.0043628s, 1184 KB] Evaluated 69 state(s).
[t=0.0043628s, 1184 KB] Evaluations: 138
[t=0.0043628s, 1184 KB] Generated 929 state(s).
[t=0.0043628s, 1184 KB] Dead ends: 0 state(s).
[t=0.0043628s, 1184 KB] Number of registered states: 69
[t=0.0043628s, 1184 KB] Int hash set load factor: 69/128 = 0.539062
[t=0.0043628s, 1184 KB] Int hash set resizes: 7
[t=0.0043628s, 1184 KB] Search time: 0.0013625s
[t=0.0043628s, 1184 KB] Total time: 0.0043628s
Solution found.
search exit code: 0

