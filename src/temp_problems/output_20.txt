INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_20.pddl --sas-file temp_problems/sas_plan_20
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
467 relevant atoms
174 auxiliary atoms
641 final queue length
825 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.000s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.019s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
19 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
13 of 13 variables necessary.
0 of 13 mutex groups necessary.
258 of 258 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 13
Translator derived variables: 0
Translator facts: 99
Translator goal facts: 10
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 258
Translator axioms: 0
Translator task size: 1076
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.003s wall-clock]
Done! [0.000s CPU, 0.025s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_20
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_20 < temp_problems/sas_plan_20
[t=1.11e-05s, 732 KB] reading input...
[t=0.0010048s, 780 KB] done reading input!
[t=0.0021874s, 1124 KB] Initializing landmark count heuristic...
[t=0.0022116s, 1132 KB] Generating landmark graph...
[t=0.0022381s, 1132 KB] Building a landmark graph with reasonable orders.
[t=0.0023067s, 1132 KB] Initializing Exploration...
[t=0.0024263s, 1164 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.003144s, 1220 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0031597s, 1220 KB] Landmarks generation time: 0.0008745s
[t=0.00317s, 1220 KB] Discovered 32 landmarks, of which 12 are disjunctive and 0 are conjunctive.
[t=0.0031776s, 1220 KB] 50 edges
[t=0.0031852s, 1220 KB] approx. reasonable orders
[t=0.0032462s, 1220 KB] approx. obedient reasonable orders
[t=0.0032619s, 1220 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0032682s, 1220 KB] Landmarks generation time: 0.0010462s
[t=0.0032745s, 1220 KB] Discovered 32 landmarks, of which 12 are disjunctive and 0 are conjunctive.
[t=0.0032809s, 1220 KB] 50 edges
[t=0.0032868s, 1220 KB] Landmark graph generation time: 0.0010772s
[t=0.0032932s, 1220 KB] Landmark graph contains 32 landmarks, of which 12 are disjunctive and 0 are conjunctive.
[t=0.0032998s, 1220 KB] Landmark graph contains 50 orderings.
[t=0.0033796s, 1220 KB] Simplifying 258 unary operators... done! [258 unary operators]
[t=0.0034519s, 1220 KB] time to simplify: 7.45e-05s
[t=0.0034762s, 1220 KB] Initializing additive heuristic...
[t=0.0034823s, 1220 KB] Initializing FF heuristic...
[t=0.0035294s, 1220 KB] Building successor generator...done!
[t=0.0036239s, 1232 KB] peak memory difference for successor generator creation: 12 KB
[t=0.00363s, 1232 KB] time for successor generation creation: 8.27e-05s
[t=0.0036378s, 1232 KB] Variables: 13
[t=0.0036439s, 1232 KB] FactPairs: 99
[t=0.0036499s, 1232 KB] Bytes per state: 8
[t=0.0038259s, 1252 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0038363s, 1252 KB] 10 initial landmarks, 10 goal landmarks
[t=0.0038579s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0038643s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0038703s, 1252 KB] g=0, 1 evaluated, 0 expanded
[t=0.0038902s, 1252 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0038963s, 1252 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0039095s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0039154s, 1252 KB] g=1, 2 evaluated, 1 expanded
[t=0.003956s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0039621s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0039681s, 1252 KB] g=2, 4 evaluated, 3 expanded
[t=0.004007s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.004013s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0040192s, 1252 KB] g=3, 6 evaluated, 5 expanded
[t=0.0040574s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0040634s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0040693s, 1252 KB] g=4, 8 evaluated, 7 expanded
[t=0.0041084s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0041146s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0041209s, 1252 KB] g=5, 10 evaluated, 9 expanded
[t=0.0041427s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0041488s, 1252 KB] g=6, 11 evaluated, 10 expanded
[t=0.0042009s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0042072s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0042574s, 1252 KB] g=7, 14 evaluated, 13 expanded
[t=0.0043185s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0043263s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0043327s, 1252 KB] g=8, 16 evaluated, 15 expanded
[t=0.0043754s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0043817s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0043877s, 1252 KB] g=9, 18 evaluated, 17 expanded
[t=0.0044274s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0044336s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0044395s, 1252 KB] g=10, 20 evaluated, 19 expanded
[t=0.0044808s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0044869s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0044928s, 1252 KB] g=11, 22 evaluated, 21 expanded
[t=0.0045145s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0045204s, 1252 KB] g=12, 23 evaluated, 22 expanded
[t=0.0045566s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0045626s, 1252 KB] g=12, 25 evaluated, 24 expanded
[t=0.0045882s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0045943s, 1252 KB] g=13, 26 evaluated, 25 expanded
[t=0.0046328s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0046389s, 1252 KB] g=13, 28 evaluated, 27 expanded
[t=0.0046731s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0046791s, 1252 KB] g=14, 30 evaluated, 29 expanded
[t=0.0047573s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0047633s, 1252 KB] g=14, 35 evaluated, 34 expanded
[t=0.004783s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0047889s, 1252 KB] g=15, 36 evaluated, 35 expanded
[t=0.004872s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0048778s, 1252 KB] g=16, 42 evaluated, 41 expanded
[t=0.0048961s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0049021s, 1252 KB] g=15, 43 evaluated, 42 expanded
[t=0.0049727s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0049787s, 1252 KB] g=17, 48 evaluated, 47 expanded
[t=0.0050104s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0050163s, 1252 KB] g=18, 50 evaluated, 49 expanded
[t=0.0050482s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0050542s, 1252 KB] g=18, 52 evaluated, 51 expanded
[t=0.0050847s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0050909s, 1252 KB] g=19, 54 evaluated, 53 expanded
[t=0.0051096s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0051155s, 1252 KB] g=20, 55 evaluated, 54 expanded
[t=0.0051358s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0051418s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0051477s, 1252 KB] g=21, 56 evaluated, 55 expanded
[t=0.0051733s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0051796s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0051856s, 1252 KB] g=22, 57 evaluated, 56 expanded
[t=0.005206s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0052119s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0052178s, 1252 KB] g=23, 58 evaluated, 57 expanded
[t=0.0052386s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0052446s, 1252 KB] g=24, 59 evaluated, 58 expanded
[t=0.0052756s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0052815s, 1252 KB] g=24, 61 evaluated, 60 expanded
[t=0.0053004s, 1252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0053062s, 1252 KB] g=25, 62 evaluated, 61 expanded
[t=0.0053242s, 1252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0053301s, 1252 KB] g=25, 63 evaluated, 62 expanded
[t=0.0053621s, 1252 KB] Solution found!
[t=0.0053688s, 1252 KB] Actual search time: 0.0015274s
fly obj7 obj3 obj0 (1)
load obj7 obj9 obj0 (1)
load obj7 obj21 obj0 (1)
load obj7 obj19 obj0 (1)
load obj7 obj12 obj0 (1)
fly obj7 obj0 obj10 (1)
unload obj7 obj9 obj10 (1)
unload obj7 obj21 obj10 (1)
unload obj7 obj19 obj10 (1)
load obj7 obj15 obj10 (1)
load obj7 obj14 obj10 (1)
unload obj7 obj12 obj10 (1)
fly obj7 obj10 obj3 (1)
load obj7 obj5 obj3 (1)
load obj7 obj17 obj3 (1)
load obj7 obj16 obj3 (1)
unload obj7 obj15 obj3 (1)
unload obj7 obj14 obj3 (1)
fly obj7 obj3 obj0 (1)
fly obj7 obj0 obj10 (1)
unload obj7 obj5 obj10 (1)
unload obj7 obj17 obj10 (1)
unload obj7 obj16 obj10 (1)
load obj6 obj13 obj3 (1)
fly obj6 obj3 obj0 (1)
unload obj6 obj13 obj0 (1)
[t=0.0053748s, 1252 KB] Plan length: 26 step(s).
[t=0.0053748s, 1252 KB] Plan cost: 26
[t=0.0053748s, 1252 KB] Expanded 64 state(s).
[t=0.0053748s, 1252 KB] Reopened 0 state(s).
[t=0.0053748s, 1252 KB] Evaluated 65 state(s).
[t=0.0053748s, 1252 KB] Evaluations: 130
[t=0.0053748s, 1252 KB] Generated 1574 state(s).
[t=0.0053748s, 1252 KB] Dead ends: 0 state(s).
[t=0.0053748s, 1252 KB] Number of registered states: 65
[t=0.0053748s, 1252 KB] Int hash set load factor: 65/128 = 0.507812
[t=0.0053748s, 1252 KB] Int hash set resizes: 7
[t=0.0053748s, 1252 KB] Search time: 0.0015496s
[t=0.0053748s, 1252 KB] Total time: 0.0053748s
Solution found.
search exit code: 0

