INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_6.pddl --sas-file temp_problems/sas_plan_6
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.010s wall-clock]
Normalizing task... [0.000s CPU, 0.001s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.004s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.007s wall-clock]
334 relevant atoms
152 auxiliary atoms
486 final queue length
622 total queue pushes
Completing instantiation... [0.000s CPU, 0.006s wall-clock]
Instantiating: [0.000s CPU, 0.018s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.016s CPU, 0.008s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.016s CPU, 0.010s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
174 of 174 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.004s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 62
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 174
Translator axioms: 0
Translator task size: 718
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.023s wall-clock]
Done! [0.047s CPU, 0.081s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_6
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_6 < temp_problems/sas_plan_6
[t=2.38e-05s, 724 KB] reading input...
[t=0.001197s, 756 KB] done reading input!
[t=0.0032022s, 1108 KB] Initializing landmark count heuristic...
[t=0.0032218s, 1116 KB] Generating landmark graph...
[t=0.0032494s, 1116 KB] Building a landmark graph with reasonable orders.
[t=0.0033238s, 1116 KB] Initializing Exploration...
[t=0.0034615s, 1136 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0041672s, 1164 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0041881s, 1164 KB] Landmarks generation time: 0.0008898s
[t=0.0041952s, 1164 KB] Discovered 17 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0042025s, 1164 KB] 24 edges
[t=0.0042086s, 1164 KB] approx. reasonable orders
[t=0.0042372s, 1164 KB] approx. obedient reasonable orders
[t=0.0042527s, 1164 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0042592s, 1164 KB] Landmarks generation time: 0.0010337s
[t=0.0042657s, 1164 KB] Discovered 17 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0042725s, 1164 KB] 24 edges
[t=0.0042781s, 1164 KB] Landmark graph generation time: 0.001059s
[t=0.0042846s, 1164 KB] Landmark graph contains 17 landmarks, of which 7 are disjunctive and 0 are conjunctive.
[t=0.0042914s, 1164 KB] Landmark graph contains 24 orderings.
[t=0.0043886s, 1164 KB] Simplifying 174 unary operators... done! [174 unary operators]
[t=0.0044843s, 1176 KB] time to simplify: 9.89e-05s
[t=0.0045139s, 1176 KB] Initializing additive heuristic...
[t=0.0045197s, 1176 KB] Initializing FF heuristic...
[t=0.0045974s, 1176 KB] Building successor generator...done!
[t=0.0047049s, 1176 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0047113s, 1176 KB] time for successor generation creation: 9.53e-05s
[t=0.0047205s, 1176 KB] Variables: 9
[t=0.0047264s, 1176 KB] FactPairs: 62
[t=0.004732s, 1176 KB] Bytes per state: 4
[t=0.0049168s, 1188 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0049294s, 1188 KB] 5 initial landmarks, 5 goal landmarks
[t=0.0049623s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0049696s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0049756s, 1188 KB] g=0, 1 evaluated, 0 expanded
[t=0.0050035s, 1188 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0050098s, 1188 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0050274s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0050337s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0050395s, 1188 KB] g=1, 2 evaluated, 1 expanded
[t=0.0050923s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0050987s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0051046s, 1188 KB] g=2, 4 evaluated, 3 expanded
[t=0.0051806s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0051872s, 1188 KB] g=3, 7 evaluated, 6 expanded
[t=0.0052398s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0052463s, 1188 KB] g=3, 9 evaluated, 8 expanded
[t=0.005294s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0053009s, 1188 KB] g=4, 11 evaluated, 10 expanded
[t=0.0054103s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0054171s, 1188 KB] g=4, 16 evaluated, 15 expanded
[t=0.0055126s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0055192s, 1188 KB] g=5, 21 evaluated, 20 expanded
[t=0.0055854s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0055924s, 1188 KB] g=5, 24 evaluated, 23 expanded
[t=0.005665s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0056735s, 1188 KB] g=6, 28 evaluated, 27 expanded
[t=0.0057136s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0057201s, 1188 KB] g=7, 30 evaluated, 29 expanded
[t=0.0057644s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0057712s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0057771s, 1188 KB] g=8, 32 evaluated, 31 expanded
[t=0.0058046s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0058108s, 1188 KB] g=9, 33 evaluated, 32 expanded
[t=0.0058497s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0058561s, 1188 KB] g=9, 35 evaluated, 34 expanded
[t=0.0058786s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0058848s, 1188 KB] g=10, 36 evaluated, 35 expanded
[t=0.0059522s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0059586s, 1188 KB] g=11, 40 evaluated, 39 expanded
[t=0.0059816s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0059881s, 1188 KB] g=10, 41 evaluated, 40 expanded
[t=0.0060654s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0060729s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0060788s, 1188 KB] g=13, 45 evaluated, 44 expanded
[t=0.0061183s, 1188 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0061246s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0061305s, 1188 KB] g=14, 47 evaluated, 46 expanded
[t=0.0061524s, 1188 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0061586s, 1188 KB] g=15, 48 evaluated, 47 expanded
[t=0.0061802s, 1188 KB] Solution found!
[t=0.006187s, 1188 KB] Actual search time: 0.001253s
fly obj17 obj4 obj0 (1)
load obj17 obj6 obj0 (1)
load obj16 obj8 obj4 (1)
load obj16 obj15 obj4 (1)
load obj16 obj13 obj4 (1)
fly obj16 obj4 obj0 (1)
fly obj17 obj0 obj2 (1)
unload obj17 obj6 obj2 (1)
fly obj17 obj2 obj0 (1)
unload obj16 obj15 obj0 (1)
unload obj16 obj13 obj0 (1)
fly obj16 obj0 obj2 (1)
unload obj16 obj8 obj2 (1)
load obj16 obj12 obj2 (1)
fly obj16 obj2 obj0 (1)
unload obj16 obj12 obj0 (1)
[t=0.0061932s, 1188 KB] Plan length: 16 step(s).
[t=0.0061932s, 1188 KB] Plan cost: 16
[t=0.0061932s, 1188 KB] Expanded 48 state(s).
[t=0.0061932s, 1188 KB] Reopened 0 state(s).
[t=0.0061932s, 1188 KB] Evaluated 49 state(s).
[t=0.0061932s, 1188 KB] Evaluations: 98
[t=0.0061932s, 1188 KB] Generated 816 state(s).
[t=0.0061932s, 1188 KB] Dead ends: 0 state(s).
[t=0.0061932s, 1188 KB] Number of registered states: 49
[t=0.0061932s, 1188 KB] Int hash set load factor: 49/64 = 0.765625
[t=0.0061932s, 1188 KB] Int hash set resizes: 6
[t=0.0061932s, 1188 KB] Search time: 0.0012777s
[t=0.0061932s, 1188 KB] Total time: 0.0061932s
Solution found.
search exit code: 0

