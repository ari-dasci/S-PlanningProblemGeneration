INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_23.pddl --sas-file temp_problems/sas_plan_23
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.005s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.005s wall-clock]
335 relevant atoms
147 auxiliary atoms
482 final queue length
619 total queue pushes
Completing instantiation... [0.000s CPU, 0.002s wall-clock]
Instantiating: [0.000s CPU, 0.012s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
12 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.008s wall-clock]
Reordering and filtering variables...
8 of 10 variables necessary.
0 of 10 mutex groups necessary.
128 of 180 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 8
Translator derived variables: 0
Translator facts: 48
Translator goal facts: 4
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 128
Translator axioms: 0
Translator task size: 540
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.020s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_23
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_23 < temp_problems/sas_plan_23
[t=1.15e-05s, 736 KB] reading input...
[t=0.0004648s, 760 KB] done reading input!
[t=0.0015489s, 1116 KB] Initializing landmark count heuristic...
[t=0.001567s, 1124 KB] Generating landmark graph...
[t=0.001582s, 1124 KB] Building a landmark graph with reasonable orders.
[t=0.0016364s, 1124 KB] Initializing Exploration...
[t=0.0016946s, 1128 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0019624s, 1156 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0019735s, 1156 KB] Landmarks generation time: 0.0003475s
[t=0.0019808s, 1156 KB] Discovered 15 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0019883s, 1156 KB] 18 edges
[t=0.0019948s, 1156 KB] approx. reasonable orders
[t=0.002019s, 1156 KB] approx. obedient reasonable orders
[t=0.0020341s, 1156 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0020408s, 1156 KB] Landmarks generation time: 0.0004679s
[t=0.0020474s, 1156 KB] Discovered 15 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.0020543s, 1156 KB] 18 edges
[t=0.0020605s, 1156 KB] Landmark graph generation time: 0.0004954s
[t=0.0020672s, 1156 KB] Landmark graph contains 15 landmarks, of which 2 are disjunctive and 0 are conjunctive.
[t=0.002074s, 1156 KB] Landmark graph contains 18 orderings.
[t=0.0021249s, 1156 KB] Simplifying 128 unary operators... done! [128 unary operators]
[t=0.0021699s, 1156 KB] time to simplify: 4.69e-05s
[t=0.0021871s, 1156 KB] Initializing additive heuristic...
[t=0.0021935s, 1156 KB] Initializing FF heuristic...
[t=0.0022381s, 1160 KB] Building successor generator...done!
[t=0.0022932s, 1164 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0023s, 1164 KB] time for successor generation creation: 4.26e-05s
[t=0.0023079s, 1164 KB] Variables: 8
[t=0.0023145s, 1164 KB] FactPairs: 48
[t=0.0023209s, 1164 KB] Bytes per state: 4
[t=0.0024538s, 1184 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0024645s, 1184 KB] 5 initial landmarks, 4 goal landmarks
[t=0.0024872s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0024943s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0025009s, 1184 KB] g=0, 1 evaluated, 0 expanded
[t=0.002515s, 1184 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0025215s, 1184 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0025336s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0025402s, 1184 KB] g=1, 2 evaluated, 1 expanded
[t=0.0025797s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0025863s, 1184 KB] g=1, 6 evaluated, 5 expanded
[t=0.0026351s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0026417s, 1184 KB] g=2, 11 evaluated, 10 expanded
[t=0.002657s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0026635s, 1184 KB] g=2, 12 evaluated, 11 expanded
[t=0.0027174s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0027239s, 1184 KB] g=3, 18 evaluated, 17 expanded
[t=0.0027867s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0027933s, 1184 KB] g=4, 24 evaluated, 23 expanded
[t=0.0028225s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.002829s, 1184 KB] g=5, 27 evaluated, 26 expanded
[t=0.0028605s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0028672s, 1184 KB] g=6, 30 evaluated, 29 expanded
[t=0.002891s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0028974s, 1184 KB] g=7, 32 evaluated, 31 expanded
[t=0.0029153s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0029247s, 1184 KB] g=7, 33 evaluated, 32 expanded
[t=0.0029469s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0029581s, 1184 KB] g=8, 34 evaluated, 33 expanded
[t=0.0030124s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0030254s, 1184 KB] g=8, 37 evaluated, 36 expanded
[t=0.0030654s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.003076s, 1184 KB] g=9, 39 evaluated, 38 expanded
[t=0.0031047s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0031148s, 1184 KB] g=9, 40 evaluated, 39 expanded
[t=0.0031401s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0031492s, 1184 KB] g=10, 41 evaluated, 40 expanded
[t=0.0031846s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0031913s, 1184 KB] g=10, 44 evaluated, 43 expanded
[t=0.0032317s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0032383s, 1184 KB] g=11, 48 evaluated, 47 expanded
[t=0.0032815s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0032882s, 1184 KB] g=12, 52 evaluated, 51 expanded
[t=0.0033034s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0033098s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0033161s, 1184 KB] g=13, 53 evaluated, 52 expanded
[t=0.0033305s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0033371s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0033437s, 1184 KB] g=14, 54 evaluated, 53 expanded
[t=0.0033583s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0033648s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0033712s, 1184 KB] g=15, 55 evaluated, 54 expanded
[t=0.0033861s, 1184 KB] Solution found!
[t=0.0033932s, 1184 KB] Actual search time: 0.000923s
load obj10 obj16 obj9 (1)
load obj10 obj15 obj9 (1)
load obj10 obj14 obj9 (1)
load obj10 obj13 obj9 (1)
drive obj10 obj9 obj6 (1)
unload obj10 obj16 obj6 (1)
load obj8 obj16 obj6 (1)
unload obj10 obj15 obj6 (1)
unload obj10 obj14 obj6 (1)
load obj8 obj14 obj6 (1)
unload obj10 obj13 obj6 (1)
load obj8 obj13 obj6 (1)
fly obj8 obj6 obj3 (1)
unload obj8 obj16 obj3 (1)
unload obj8 obj14 obj3 (1)
unload obj8 obj13 obj3 (1)
[t=0.0033999s, 1184 KB] Plan length: 16 step(s).
[t=0.0033999s, 1184 KB] Plan cost: 16
[t=0.0033999s, 1184 KB] Expanded 55 state(s).
[t=0.0033999s, 1184 KB] Reopened 0 state(s).
[t=0.0033999s, 1184 KB] Evaluated 56 state(s).
[t=0.0033999s, 1184 KB] Evaluations: 112
[t=0.0033999s, 1184 KB] Generated 686 state(s).
[t=0.0033999s, 1184 KB] Dead ends: 0 state(s).
[t=0.0033999s, 1184 KB] Number of registered states: 56
[t=0.0033999s, 1184 KB] Int hash set load factor: 56/64 = 0.875
[t=0.0033999s, 1184 KB] Int hash set resizes: 6
[t=0.0033999s, 1184 KB] Search time: 0.0009468s
[t=0.0033999s, 1184 KB] Total time: 0.0033999s
Solution found.
search exit code: 0

