INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_23.pddl --sas-file temp_problems/sas_plan_23
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.000s wall-clock]
517 relevant atoms
191 auxiliary atoms
708 final queue length
958 total queue pushes
Completing instantiation... [0.000s CPU, 0.016s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
13 of 13 variables necessary.
0 of 13 mutex groups necessary.
318 of 318 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 13
Translator derived variables: 0
Translator facts: 96
Translator goal facts: 9
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 318
Translator axioms: 0
Translator task size: 1342
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.019s wall-clock]
Done! [0.000s CPU, 0.034s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_23
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_23 < temp_problems/sas_plan_23
[t=9.2e-06s, 724 KB] reading input...
[t=0.0010423s, 784 KB] done reading input!
[t=0.0021775s, 1136 KB] Initializing landmark count heuristic...
[t=0.0021971s, 1144 KB] Generating landmark graph...
[t=0.0022262s, 1144 KB] Building a landmark graph with reasonable orders.
[t=0.0022986s, 1144 KB] Initializing Exploration...
[t=0.002441s, 1200 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0031709s, 1228 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0031867s, 1228 KB] Landmarks generation time: 0.0009111s
[t=0.0031944s, 1228 KB] Discovered 29 landmarks, of which 11 are disjunctive and 0 are conjunctive.
[t=0.0032026s, 1228 KB] 34 edges
[t=0.0032094s, 1228 KB] approx. reasonable orders
[t=0.0032601s, 1228 KB] approx. obedient reasonable orders
[t=0.0032764s, 1228 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0032833s, 1228 KB] Landmarks generation time: 0.001079s
[t=0.0032899s, 1228 KB] Discovered 29 landmarks, of which 11 are disjunctive and 0 are conjunctive.
[t=0.0032964s, 1228 KB] 34 edges
[t=0.0033023s, 1228 KB] Landmark graph generation time: 0.0011071s
[t=0.0033089s, 1228 KB] Landmark graph contains 29 landmarks, of which 11 are disjunctive and 0 are conjunctive.
[t=0.0033155s, 1228 KB] Landmark graph contains 34 orderings.
[t=0.0034012s, 1228 KB] Simplifying 318 unary operators... done! [318 unary operators]
[t=0.0035529s, 1240 KB] time to simplify: 0.0001538s
[t=0.0035801s, 1240 KB] Initializing additive heuristic...
[t=0.0035862s, 1240 KB] Initializing FF heuristic...
[t=0.0036325s, 1240 KB] Building successor generator...done!
[t=0.0037361s, 1240 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0037425s, 1240 KB] time for successor generation creation: 9.17e-05s
[t=0.0037505s, 1240 KB] Variables: 13
[t=0.0037566s, 1240 KB] FactPairs: 96
[t=0.0037625s, 1240 KB] Bytes per state: 8
[t=0.0039461s, 1240 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0039558s, 1240 KB] 9 initial landmarks, 9 goal landmarks
[t=0.0039817s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0039884s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0039946s, 1240 KB] g=0, 1 evaluated, 0 expanded
[t=0.0040139s, 1240 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0040206s, 1240 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0040508s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0040569s, 1240 KB] g=1, 3 evaluated, 2 expanded
[t=0.0040792s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0040855s, 1240 KB] g=1, 4 evaluated, 3 expanded
[t=0.0041092s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0041154s, 1240 KB] g=2, 5 evaluated, 4 expanded
[t=0.004167s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0041733s, 1240 KB] g=2, 8 evaluated, 7 expanded
[t=0.0042107s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0042171s, 1240 KB] g=3, 10 evaluated, 9 expanded
[t=0.0042662s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0042723s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0042785s, 1240 KB] g=4, 13 evaluated, 12 expanded
[t=0.0043145s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0043204s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0043266s, 1240 KB] g=5, 15 evaluated, 14 expanded
[t=0.0043627s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0043688s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0043827s, 1240 KB] g=6, 17 evaluated, 16 expanded
[t=0.0044046s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0044107s, 1240 KB] g=7, 18 evaluated, 17 expanded
[t=0.0044696s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0044757s, 1240 KB] g=8, 22 evaluated, 21 expanded
[t=0.0044968s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.004503s, 1240 KB] g=7, 23 evaluated, 22 expanded
[t=0.0045756s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0045819s, 1240 KB] g=9, 28 evaluated, 27 expanded
[t=0.0046322s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0046385s, 1240 KB] g=8, 31 evaluated, 30 expanded
[t=0.0046893s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0046956s, 1240 KB] g=10, 34 evaluated, 33 expanded
[t=0.0047537s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0047601s, 1240 KB] g=11, 38 evaluated, 37 expanded
[t=0.0047803s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0047863s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0047923s, 1240 KB] g=12, 39 evaluated, 38 expanded
[t=0.0048121s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0048182s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0048242s, 1240 KB] g=13, 40 evaluated, 39 expanded
[t=0.0048676s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0048736s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0048795s, 1240 KB] g=14, 43 evaluated, 42 expanded
[t=0.0049108s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0049167s, 1240 KB] g=15, 45 evaluated, 44 expanded
[t=0.0049409s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0049479s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0049538s, 1240 KB] g=16, 46 evaluated, 45 expanded
[t=0.0050021s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0050082s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0050142s, 1240 KB] g=17, 49 evaluated, 48 expanded
[t=0.0050614s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0050675s, 1240 KB] g=18, 52 evaluated, 51 expanded
[t=0.0050985s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0051045s, 1240 KB] g=18, 54 evaluated, 53 expanded
[t=0.0051666s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0051726s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0051785s, 1240 KB] g=19, 58 evaluated, 57 expanded
[t=0.0052232s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0052295s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0052357s, 1240 KB] g=20, 61 evaluated, 60 expanded
[t=0.0052846s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0052909s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0052977s, 1240 KB] g=22, 64 evaluated, 63 expanded
[t=0.005321s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0053272s, 1240 KB] g=23, 65 evaluated, 64 expanded
[t=0.0053583s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0053642s, 1240 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0053702s, 1240 KB] g=24, 67 evaluated, 66 expanded
[t=0.0053887s, 1240 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0053947s, 1240 KB] g=25, 68 evaluated, 67 expanded
[t=0.0054115s, 1240 KB] Solution found!
[t=0.0054182s, 1240 KB] Actual search time: 0.0014571s
load obj7 obj9 obj2 (1)
load obj7 obj8 obj2 (1)
drive obj7 obj2 obj6 (1)
unload obj7 obj9 obj6 (1)
unload obj7 obj8 obj6 (1)
load obj7 obj19 obj6 (1)
drive obj7 obj6 obj0 (1)
unload obj7 obj19 obj0 (1)
load obj7 obj15 obj0 (1)
load obj7 obj14 obj0 (1)
drive obj7 obj0 obj6 (1)
unload obj7 obj15 obj6 (1)
unload obj7 obj14 obj6 (1)
load obj3 obj13 obj0 (1)
fly obj3 obj0 obj6 (1)
unload obj3 obj13 obj6 (1)
load obj17 obj11 obj2 (1)
load obj10 obj16 obj4 (1)
drive obj10 obj4 obj18 (1)
unload obj10 obj16 obj18 (1)
fly obj17 obj2 obj0 (1)
load obj17 obj12 obj0 (1)
fly obj17 obj0 obj2 (1)
unload obj17 obj12 obj2 (1)
fly obj17 obj2 obj4 (1)
unload obj17 obj11 obj4 (1)
[t=0.0054241s, 1240 KB] Plan length: 26 step(s).
[t=0.0054241s, 1240 KB] Plan cost: 26
[t=0.0054241s, 1240 KB] Expanded 68 state(s).
[t=0.0054241s, 1240 KB] Reopened 0 state(s).
[t=0.0054241s, 1240 KB] Evaluated 69 state(s).
[t=0.0054241s, 1240 KB] Evaluations: 138
[t=0.0054241s, 1240 KB] Generated 1452 state(s).
[t=0.0054241s, 1240 KB] Dead ends: 0 state(s).
[t=0.0054241s, 1240 KB] Number of registered states: 69
[t=0.0054241s, 1240 KB] Int hash set load factor: 69/128 = 0.539062
[t=0.0054241s, 1240 KB] Int hash set resizes: 7
[t=0.0054241s, 1240 KB] Search time: 0.0014787s
[t=0.0054241s, 1240 KB] Total time: 0.0054241s
Solution found.
search exit code: 0

