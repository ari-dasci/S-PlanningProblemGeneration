INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_23.pddl --sas-file temp_problems/sas_plan_23
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.019s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.008s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.014s wall-clock]
290 relevant atoms
120 auxiliary atoms
410 final queue length
509 total queue pushes
Completing instantiation... [0.000s CPU, 0.008s wall-clock]
Instantiating: [0.000s CPU, 0.032s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.016s CPU, 0.000s wall-clock]
Translating task: [0.016s CPU, 0.008s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
11 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.006s wall-clock]
Reordering and filtering variables...
11 of 11 variables necessary.
0 of 11 mutex groups necessary.
144 of 144 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.002s wall-clock]
Translator variables: 11
Translator derived variables: 0
Translator facts: 64
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 144
Translator axioms: 0
Translator task size: 643
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.016s CPU, 0.081s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_23
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_23 < temp_problems/sas_plan_23
[t=3.75e-05s, 732 KB] reading input...
[t=0.001707s, 760 KB] done reading input!
[t=0.0056732s, 1092 KB] Initializing landmark count heuristic...
[t=0.0057039s, 1092 KB] Generating landmark graph...
[t=0.005745s, 1092 KB] Building a landmark graph with reasonable orders.
[t=0.0059091s, 1100 KB] Initializing Exploration...
[t=0.00616s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0077716s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0078506s, 1152 KB] Landmarks generation time: 0.0020301s
[t=0.0078659s, 1152 KB] Discovered 26 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0078771s, 1152 KB] 34 edges
[t=0.0078872s, 1152 KB] approx. reasonable orders
[t=0.0081001s, 1152 KB] approx. obedient reasonable orders
[t=0.0081488s, 1152 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0081705s, 1152 KB] Landmarks generation time: 0.0024573s
[t=0.0081895s, 1152 KB] Discovered 26 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0082082s, 1152 KB] 34 edges
[t=0.0082208s, 1152 KB] Landmark graph generation time: 0.0025224s
[t=0.0082372s, 1152 KB] Landmark graph contains 26 landmarks, of which 3 are disjunctive and 0 are conjunctive.
[t=0.0082567s, 1152 KB] Landmark graph contains 34 orderings.
[t=0.0085066s, 1152 KB] Simplifying 144 unary operators... done! [144 unary operators]
[t=0.0086812s, 1152 KB] time to simplify: 0.0001839s
[t=0.0087452s, 1152 KB] Initializing additive heuristic...
[t=0.0087641s, 1152 KB] Initializing FF heuristic...
[t=0.008938s, 1152 KB] Building successor generator...done!
[t=0.009176s, 1156 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0091952s, 1156 KB] time for successor generation creation: 0.0002001s
[t=0.0092185s, 1156 KB] Variables: 11
[t=0.0092364s, 1156 KB] FactPairs: 64
[t=0.0092461s, 1156 KB] Bytes per state: 4
[t=0.009811s, 1176 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0098469s, 1176 KB] 8 initial landmarks, 8 goal landmarks
[t=0.009939s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0099598s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0099762s, 1176 KB] g=0, 1 evaluated, 0 expanded
[t=0.0100244s, 1176 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0100434s, 1176 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0100835s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0101026s, 1176 KB] g=1, 2 evaluated, 1 expanded
[t=0.0102437s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0102576s, 1176 KB] g=1, 5 evaluated, 4 expanded
[t=0.0102943s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0103139s, 1176 KB] g=2, 6 evaluated, 5 expanded
[t=0.010613s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0106378s, 1176 KB] g=2, 13 evaluated, 12 expanded
[t=0.0107282s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0107527s, 1176 KB] g=3, 15 evaluated, 14 expanded
[t=0.0109132s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0109342s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0109517s, 1176 KB] g=4, 18 evaluated, 17 expanded
[t=0.0111031s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.011117s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0111261s, 1176 KB] g=5, 22 evaluated, 21 expanded
[t=0.011285s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0113078s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0113898s, 1176 KB] g=7, 26 evaluated, 25 expanded
[t=0.0115795s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0115997s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0116164s, 1176 KB] g=8, 30 evaluated, 29 expanded
[t=0.0116665s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0116855s, 1176 KB] g=9, 31 evaluated, 30 expanded
[t=0.0117279s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0117469s, 1176 KB] g=10, 32 evaluated, 31 expanded
[t=0.0118735s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0118941s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0119114s, 1176 KB] g=11, 34 evaluated, 33 expanded
[t=0.012042s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0120564s, 1176 KB] g=13, 37 evaluated, 36 expanded
[t=0.0121362s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0121558s, 1176 KB] g=14, 39 evaluated, 38 expanded
[t=0.0122081s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0122271s, 1176 KB] g=14, 40 evaluated, 39 expanded
[t=0.0123147s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0123322s, 1176 KB] g=15, 42 evaluated, 41 expanded
[t=0.0124713s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0124929s, 1176 KB] g=15, 45 evaluated, 44 expanded
[t=0.0126386s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0126646s, 1176 KB] g=16, 48 evaluated, 47 expanded
[t=0.0127257s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0127534s, 1176 KB] g=16, 49 evaluated, 48 expanded
[t=0.0128371s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0128614s, 1176 KB] g=17, 51 evaluated, 50 expanded
[t=0.012952s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0129646s, 1176 KB] g=17, 54 evaluated, 53 expanded
[t=0.0130528s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0130757s, 1176 KB] g=18, 56 evaluated, 55 expanded
[t=0.0131249s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0131485s, 1176 KB] g=18, 57 evaluated, 56 expanded
[t=0.0132501s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0132704s, 1176 KB] g=19, 60 evaluated, 59 expanded
[t=0.0133407s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0133595s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0133764s, 1176 KB] g=20, 62 evaluated, 61 expanded
[t=0.0134204s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0134379s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0134469s, 1176 KB] g=21, 63 evaluated, 62 expanded
[t=0.0134801s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0134934s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0135065s, 1176 KB] g=22, 64 evaluated, 63 expanded
[t=0.0135358s, 1176 KB] Solution found!
[t=0.0135524s, 1176 KB] Actual search time: 0.0036899s
load obj2 obj14 obj0 (1)
load obj2 obj11 obj0 (1)
fly obj2 obj0 obj3 (1)
load obj2 obj4 obj3 (1)
unload obj2 obj14 obj3 (1)
fly obj2 obj3 obj5 (1)
load obj2 obj7 obj5 (1)
unload obj2 obj4 obj5 (1)
fly obj2 obj5 obj0 (1)
fly obj2 obj0 obj3 (1)
unload obj2 obj7 obj3 (1)
fly obj2 obj3 obj8 (1)
load obj2 obj9 obj8 (1)
load obj2 obj16 obj8 (1)
load obj2 obj15 obj8 (1)
load obj2 obj13 obj8 (1)
unload obj2 obj11 obj8 (1)
fly obj2 obj8 obj0 (1)
unload obj2 obj13 obj0 (1)
fly obj2 obj0 obj3 (1)
unload obj2 obj9 obj3 (1)
unload obj2 obj16 obj3 (1)
unload obj2 obj15 obj3 (1)
[t=0.0135719s, 1176 KB] Plan length: 23 step(s).
[t=0.0135719s, 1176 KB] Plan cost: 23
[t=0.0135719s, 1176 KB] Expanded 64 state(s).
[t=0.0135719s, 1176 KB] Reopened 0 state(s).
[t=0.0135719s, 1176 KB] Evaluated 65 state(s).
[t=0.0135719s, 1176 KB] Evaluations: 130
[t=0.0135719s, 1176 KB] Generated 767 state(s).
[t=0.0135719s, 1176 KB] Dead ends: 0 state(s).
[t=0.0135719s, 1176 KB] Number of registered states: 65
[t=0.0135719s, 1176 KB] Int hash set load factor: 65/128 = 0.507812
[t=0.0135719s, 1176 KB] Int hash set resizes: 7
[t=0.0135719s, 1176 KB] Search time: 0.0037632s
[t=0.0135719s, 1176 KB] Total time: 0.0135719s
Solution found.
search exit code: 0

