INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_23.pddl --sas-file temp_problems/sas_plan_23
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.001s wall-clock]
294 relevant atoms
129 auxiliary atoms
423 final queue length
523 total queue pushes
Completing instantiation... [0.000s CPU, 0.002s wall-clock]
Instantiating: [0.000s CPU, 0.006s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
10 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Reordering and filtering variables...
10 of 10 variables necessary.
0 of 10 mutex groups necessary.
146 of 146 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 10
Translator derived variables: 0
Translator facts: 65
Translator goal facts: 7
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 146
Translator axioms: 0
Translator task size: 646
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.000s CPU, 0.015s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_23
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_23 < temp_problems/sas_plan_23
[t=1.9e-05s, 728 KB] reading input...
[t=0.0005561s, 756 KB] done reading input!
[t=0.0018161s, 1096 KB] Initializing landmark count heuristic...
[t=0.0018362s, 1104 KB] Generating landmark graph...
[t=0.0018542s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0019223s, 1104 KB] Initializing Exploration...
[t=0.0020036s, 1116 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0023927s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0024061s, 1144 KB] Landmarks generation time: 0.0005007s
[t=0.0024138s, 1144 KB] Discovered 25 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.002421s, 1144 KB] 38 edges
[t=0.002428s, 1144 KB] approx. reasonable orders
[t=0.0024784s, 1144 KB] approx. obedient reasonable orders
[t=0.0024976s, 1144 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0025045s, 1144 KB] Landmarks generation time: 0.0006624s
[t=0.0025113s, 1144 KB] Discovered 25 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0025181s, 1144 KB] 38 edges
[t=0.0025243s, 1144 KB] Landmark graph generation time: 0.0006898s
[t=0.0025313s, 1144 KB] Landmark graph contains 25 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.0025381s, 1144 KB] Landmark graph contains 38 orderings.
[t=0.0025983s, 1144 KB] Simplifying 146 unary operators... done! [146 unary operators]
[t=0.0026528s, 1156 KB] time to simplify: 5.64e-05s
[t=0.0026711s, 1156 KB] Initializing additive heuristic...
[t=0.0026777s, 1156 KB] Initializing FF heuristic...
[t=0.0027265s, 1156 KB] Building successor generator...done!
[t=0.0027876s, 1156 KB] peak memory difference for successor generator creation: 0 KB
[t=0.002794s, 1156 KB] time for successor generation creation: 4.88e-05s
[t=0.0028025s, 1156 KB] Variables: 10
[t=0.002809s, 1156 KB] FactPairs: 65
[t=0.0028151s, 1156 KB] Bytes per state: 4
[t=0.0029591s, 1176 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0029694s, 1176 KB] 8 initial landmarks, 7 goal landmarks
[t=0.0029942s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0030014s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0030077s, 1176 KB] g=0, 1 evaluated, 0 expanded
[t=0.0030212s, 1176 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.003028s, 1176 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0030417s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0030481s, 1176 KB] g=1, 2 evaluated, 1 expanded
[t=0.0030664s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0030731s, 1176 KB] g=2, 3 evaluated, 2 expanded
[t=0.0030959s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0031024s, 1176 KB] g=3, 5 evaluated, 4 expanded
[t=0.0031462s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0031526s, 1176 KB] g=3, 9 evaluated, 8 expanded
[t=0.003183s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0031896s, 1176 KB] g=4, 12 evaluated, 11 expanded
[t=0.0032674s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0032742s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0032807s, 1176 KB] g=5, 20 evaluated, 19 expanded
[t=0.0033311s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0033378s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0033441s, 1176 KB] g=6, 25 evaluated, 24 expanded
[t=0.0034106s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.003417s, 1176 KB] g=8, 32 evaluated, 31 expanded
[t=0.0034354s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0034489s, 1176 KB] g=9, 33 evaluated, 32 expanded
[t=0.0034748s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0034814s, 1176 KB] g=9, 35 evaluated, 34 expanded
[t=0.0034977s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0035041s, 1176 KB] g=10, 36 evaluated, 35 expanded
[t=0.003519s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0035254s, 1176 KB] g=10, 37 evaluated, 36 expanded
[t=0.0035623s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0035686s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0035749s, 1176 KB] g=11, 41 evaluated, 40 expanded
[t=0.0035896s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0035958s, 1176 KB] g=12, 42 evaluated, 41 expanded
[t=0.0036099s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0036162s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0036224s, 1176 KB] g=13, 43 evaluated, 42 expanded
[t=0.0036558s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0036621s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0036682s, 1176 KB] g=15, 46 evaluated, 45 expanded
[t=0.0037026s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.003709s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.003715s, 1176 KB] g=16, 49 evaluated, 48 expanded
[t=0.0037484s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0037547s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0037611s, 1176 KB] g=18, 52 evaluated, 51 expanded
[t=0.0037753s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0037816s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0037878s, 1176 KB] g=19, 53 evaluated, 52 expanded
[t=0.0038113s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0038177s, 1176 KB] g=21, 55 evaluated, 54 expanded
[t=0.0038322s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0038386s, 1176 KB] g=22, 56 evaluated, 55 expanded
[t=0.0038543s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0038606s, 1176 KB] g=22, 57 evaluated, 56 expanded
[t=0.0038745s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0038808s, 1176 KB] g=23, 58 evaluated, 57 expanded
[t=0.0038977s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.003904s, 1176 KB] g=23, 59 evaluated, 58 expanded
[t=0.0039181s, 1176 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0039245s, 1176 KB] g=24, 60 evaluated, 59 expanded
[t=0.0039375s, 1176 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0039438s, 1176 KB] g=24, 61 evaluated, 60 expanded
[t=0.003962s, 1176 KB] Solution found!
[t=0.0039689s, 1176 KB] Actual search time: 0.0009941s
fly obj7 obj5 obj0 (1)
fly obj7 obj0 obj12 (1)
drive obj16 obj5 obj0 (1)
load obj16 obj9 obj0 (1)
load obj16 obj8 obj0 (1)
load obj16 obj2 obj0 (1)
fly obj7 obj12 obj0 (1)
load obj7 obj4 obj0 (1)
load obj7 obj3 obj0 (1)
fly obj7 obj0 obj12 (1)
unload obj7 obj4 obj12 (1)
fly obj7 obj12 obj14 (1)
unload obj7 obj3 obj14 (1)
drive obj16 obj0 obj10 (1)
unload obj16 obj9 obj10 (1)
load obj16 obj11 obj10 (1)
drive obj16 obj10 obj0 (1)
unload obj16 obj11 obj0 (1)
drive obj16 obj0 obj10 (1)
drive obj16 obj10 obj5 (1)
unload obj16 obj8 obj5 (1)
load obj16 obj6 obj5 (1)
unload obj16 obj2 obj5 (1)
drive obj16 obj5 obj10 (1)
unload obj16 obj6 obj10 (1)
[t=0.0039751s, 1176 KB] Plan length: 25 step(s).
[t=0.0039751s, 1176 KB] Plan cost: 25
[t=0.0039751s, 1176 KB] Expanded 62 state(s).
[t=0.0039751s, 1176 KB] Reopened 0 state(s).
[t=0.0039751s, 1176 KB] Evaluated 63 state(s).
[t=0.0039751s, 1176 KB] Evaluations: 126
[t=0.0039751s, 1176 KB] Generated 662 state(s).
[t=0.0039751s, 1176 KB] Dead ends: 0 state(s).
[t=0.0039751s, 1176 KB] Number of registered states: 63
[t=0.0039751s, 1176 KB] Int hash set load factor: 63/64 = 0.984375
[t=0.0039751s, 1176 KB] Int hash set resizes: 6
[t=0.0039751s, 1176 KB] Search time: 0.0010167s
[t=0.0039751s, 1176 KB] Total time: 0.0039751s
Solution found.
search exit code: 0

