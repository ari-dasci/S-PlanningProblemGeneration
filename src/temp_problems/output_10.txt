INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Usuario\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_10.pddl --sas-file temp_problems/sas_plan_10
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.000s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.016s wall-clock]
317 relevant atoms
127 auxiliary atoms
444 final queue length
553 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.016s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
12 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Reordering and filtering variables...
12 of 12 variables necessary.
0 of 12 mutex groups necessary.
160 of 160 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.000s wall-clock]
Translator variables: 12
Translator derived variables: 0
Translator facts: 71
Translator goal facts: 9
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 160
Translator axioms: 0
Translator task size: 716
warning: could not determine peak memory
Writing output... [0.000s CPU, 0.016s wall-clock]
Done! [0.000s CPU, 0.032s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_10
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Usuario\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_10 < temp_problems/sas_plan_10
[t=1.59e-05s, 732 KB] reading input...
[t=0.0009868s, 760 KB] done reading input!
[t=0.0027612s, 1116 KB] Initializing landmark count heuristic...
[t=0.0027931s, 1124 KB] Generating landmark graph...
[t=0.002819s, 1124 KB] Building a landmark graph with reasonable orders.
[t=0.0029205s, 1124 KB] Initializing Exploration...
[t=0.0030515s, 1148 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0037565s, 1176 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0037855s, 1176 KB] Landmarks generation time: 0.0009079s
[t=0.0037967s, 1176 KB] Discovered 29 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0038069s, 1176 KB] 37 edges
[t=0.0038159s, 1176 KB] approx. reasonable orders
[t=0.0039021s, 1176 KB] approx. obedient reasonable orders
[t=0.0039307s, 1176 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.003941s, 1176 KB] Landmarks generation time: 0.0011402s
[t=0.0039506s, 1176 KB] Discovered 29 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0039606s, 1176 KB] 37 edges
[t=0.0039691s, 1176 KB] Landmark graph generation time: 0.0011789s
[t=0.0039787s, 1176 KB] Landmark graph contains 29 landmarks, of which 10 are disjunctive and 0 are conjunctive.
[t=0.0039876s, 1176 KB] Landmark graph contains 37 orderings.
[t=0.0040822s, 1176 KB] Simplifying 160 unary operators... done! [160 unary operators]
[t=0.0041589s, 1176 KB] time to simplify: 7.95e-05s
[t=0.0041877s, 1176 KB] Initializing additive heuristic...
[t=0.0041971s, 1176 KB] Initializing FF heuristic...
[t=0.0042666s, 1176 KB] Building successor generator...done!
[t=0.0043683s, 1184 KB] peak memory difference for successor generator creation: 8 KB
[t=0.0043778s, 1184 KB] time for successor generation creation: 8.25e-05s
[t=0.004389s, 1184 KB] Variables: 12
[t=0.0043985s, 1184 KB] FactPairs: 71
[t=0.0044067s, 1184 KB] Bytes per state: 4
[t=0.0046925s, 1208 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0047146s, 1208 KB] 9 initial landmarks, 9 goal landmarks
[t=0.0047483s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0047644s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0047774s, 1208 KB] g=0, 1 evaluated, 0 expanded
[t=0.0048056s, 1208 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0048148s, 1208 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0048329s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0048417s, 1208 KB] g=1, 2 evaluated, 1 expanded
[t=0.0048871s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0048944s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0049056s, 1208 KB] g=2, 4 evaluated, 3 expanded
[t=0.0049335s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0049427s, 1208 KB] g=3, 5 evaluated, 4 expanded
[t=0.0049943s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0050051s, 1208 KB] g=4, 8 evaluated, 7 expanded
[t=0.0050285s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0050354s, 1208 KB] g=3, 9 evaluated, 8 expanded
[t=0.005076s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0050913s, 1208 KB] g=5, 12 evaluated, 11 expanded
[t=0.0051186s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0051252s, 1208 KB] g=6, 14 evaluated, 13 expanded
[t=0.0051437s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0051537s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0051608s, 1208 KB] g=7, 15 evaluated, 14 expanded
[t=0.0051855s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0051978s, 1208 KB] g=8, 16 evaluated, 15 expanded
[t=0.0052151s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0052231s, 1208 KB] g=8, 17 evaluated, 16 expanded
[t=0.005255s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0052646s, 1208 KB] g=9, 19 evaluated, 18 expanded
[t=0.0052861s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0052955s, 1208 KB] g=9, 20 evaluated, 19 expanded
[t=0.0053202s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0053291s, 1208 KB] g=10, 21 evaluated, 20 expanded
[t=0.0053777s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0053874s, 1208 KB] g=10, 24 evaluated, 23 expanded
[t=0.0054229s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0054322s, 1208 KB] g=11, 26 evaluated, 25 expanded
[t=0.0054555s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0054643s, 1208 KB] g=11, 27 evaluated, 26 expanded
[t=0.0054868s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0054956s, 1208 KB] g=12, 28 evaluated, 27 expanded
[t=0.0055413s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0055497s, 1208 KB] g=12, 31 evaluated, 30 expanded
[t=0.005574s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0055972s, 1208 KB] g=13, 32 evaluated, 31 expanded
[t=0.0056537s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0056635s, 1208 KB] g=13, 35 evaluated, 34 expanded
[t=0.0056888s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0056987s, 1208 KB] g=14, 36 evaluated, 35 expanded
[t=0.0057212s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0057301s, 1208 KB] g=14, 37 evaluated, 36 expanded
[t=0.0057726s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0057821s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0057908s, 1208 KB] g=15, 39 evaluated, 38 expanded
[t=0.0058173s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0058264s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0058354s, 1208 KB] g=16, 40 evaluated, 39 expanded
[t=0.00586s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0058693s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0058778s, 1208 KB] g=17, 41 evaluated, 40 expanded
[t=0.0059009s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0059088s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0059168s, 1208 KB] g=18, 42 evaluated, 41 expanded
[t=0.0059443s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0059534s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.005962s, 1208 KB] g=19, 43 evaluated, 42 expanded
[t=0.0059856s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0059946s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0060063s, 1208 KB] g=20, 44 evaluated, 43 expanded
[t=0.0060446s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0060572s, 1208 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0060659s, 1208 KB] g=21, 46 evaluated, 45 expanded
[t=0.0060886s, 1208 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0060974s, 1208 KB] g=22, 47 evaluated, 46 expanded
[t=0.0061179s, 1208 KB] Solution found!
[t=0.006128s, 1208 KB] Actual search time: 0.0014048s
fly obj4 obj0 obj14 (1)
load obj4 obj17 obj14 (1)
fly obj4 obj14 obj6 (1)
unload obj4 obj17 obj6 (1)
load obj4 obj13 obj6 (1)
fly obj4 obj6 obj16 (1)
unload obj4 obj13 obj16 (1)
load obj2 obj9 obj0 (1)
load obj2 obj8 obj0 (1)
load obj2 obj5 obj0 (1)
load obj2 obj3 obj0 (1)
load obj2 obj15 obj0 (1)
load obj2 obj11 obj0 (1)
drive obj2 obj0 obj14 (1)
unload obj2 obj9 obj14 (1)
unload obj2 obj8 obj14 (1)
unload obj2 obj5 obj14 (1)
unload obj2 obj3 obj14 (1)
unload obj2 obj15 obj14 (1)
unload obj2 obj11 obj14 (1)
load obj12 obj10 obj6 (1)
drive obj12 obj6 obj16 (1)
unload obj12 obj10 obj16 (1)
[t=0.0061372s, 1208 KB] Plan length: 23 step(s).
[t=0.0061372s, 1208 KB] Plan cost: 23
[t=0.0061372s, 1208 KB] Expanded 47 state(s).
[t=0.0061372s, 1208 KB] Reopened 0 state(s).
[t=0.0061372s, 1208 KB] Evaluated 48 state(s).
[t=0.0061372s, 1208 KB] Evaluations: 96
[t=0.0061372s, 1208 KB] Generated 606 state(s).
[t=0.0061372s, 1208 KB] Dead ends: 0 state(s).
[t=0.0061372s, 1208 KB] Number of registered states: 48
[t=0.0061372s, 1208 KB] Int hash set load factor: 48/64 = 0.75
[t=0.0061372s, 1208 KB] Int hash set resizes: 6
[t=0.0061372s, 1208 KB] Search time: 0.0014468s
[t=0.0061372s, 1208 KB] Total time: 0.0061372s
Solution found.
search exit code: 0

