INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: 'C:\Users\Carlos\anaconda3\envs\problem-generation\python.exe' 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\translate\translate.py' ../data/domains/logistics-domain.pddl temp_problems/temp_problem_10.pddl --sas-file temp_problems/sas_plan_10
Warning! SIGXCPU is not available on your platform. This means that the planner cannot be gracefully terminated when using a time limit, which, however, is probably supported on your platform anyway.
Parsing...
Parsing: [0.000s CPU, 0.007s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.004s wall-clock]
319 relevant atoms
138 auxiliary atoms
457 final queue length
577 total queue pushes
Completing instantiation... [0.000s CPU, 0.010s wall-clock]
Instantiating: [0.000s CPU, 0.019s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
3 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.000s CPU, 0.012s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
15 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.004s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
162 of 162 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 63
Translator goal facts: 6
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 162
Translator axioms: 0
Translator task size: 672
warning: could not determine peak memory
Writing output... [0.016s CPU, 0.006s wall-clock]
Done! [0.016s CPU, 0.056s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: temp_problems/sas_plan_10
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: 'C:\Users\Carlos\Desktop\NeSIG\S-PlanningProblemGeneration\src\fast-downward\builds\release\bin\downward.exe' --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file temp_problems/plan_10 < temp_problems/sas_plan_10
[t=1.4e-05s, 724 KB] reading input...
[t=0.0016654s, 752 KB] done reading input!
[t=0.0043247s, 1096 KB] Initializing landmark count heuristic...
[t=0.0043543s, 1104 KB] Generating landmark graph...
[t=0.0043905s, 1104 KB] Building a landmark graph with reasonable orders.
[t=0.0044565s, 1104 KB] Initializing Exploration...
[t=0.0046339s, 1128 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0055942s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0056275s, 1160 KB] Landmarks generation time: 0.0011988s
[t=0.005637s, 1160 KB] Discovered 20 landmarks, of which 8 are disjunctive and 0 are conjunctive.
[t=0.0056464s, 1160 KB] 28 edges
[t=0.0056545s, 1160 KB] approx. reasonable orders
[t=0.0057127s, 1160 KB] approx. obedient reasonable orders
[t=0.0057374s, 1160 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0057476s, 1160 KB] Landmarks generation time: 0.0013888s
[t=0.0057561s, 1160 KB] Discovered 20 landmarks, of which 8 are disjunctive and 0 are conjunctive.
[t=0.0057656s, 1160 KB] 28 edges
[t=0.0057734s, 1160 KB] Landmark graph generation time: 0.0014229s
[t=0.0057822s, 1160 KB] Landmark graph contains 20 landmarks, of which 8 are disjunctive and 0 are conjunctive.
[t=0.0057913s, 1160 KB] Landmark graph contains 28 orderings.
[t=0.0059282s, 1160 KB] Simplifying 162 unary operators... done! [162 unary operators]
[t=0.0060522s, 1160 KB] time to simplify: 0.0001309s
[t=0.0060944s, 1160 KB] Initializing additive heuristic...
[t=0.0061037s, 1160 KB] Initializing FF heuristic...
[t=0.006239s, 1160 KB] Building successor generator...done!
[t=0.0063976s, 1164 KB] peak memory difference for successor generator creation: 4 KB
[t=0.0064069s, 1164 KB] time for successor generation creation: 0.0001355s
[t=0.0064187s, 1164 KB] Variables: 9
[t=0.0064276s, 1164 KB] FactPairs: 63
[t=0.0064354s, 1164 KB] Bytes per state: 4
[t=0.0067573s, 1184 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0067785s, 1184 KB] 6 initial landmarks, 6 goal landmarks
[t=0.0068223s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0068343s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0068431s, 1184 KB] g=0, 1 evaluated, 0 expanded
[t=0.0068847s, 1184 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.006896s, 1184 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0069188s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.006929s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0069379s, 1184 KB] g=1, 2 evaluated, 1 expanded
[t=0.0070165s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0070285s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0070382s, 1184 KB] g=2, 4 evaluated, 3 expanded
[t=0.0071466s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0071588s, 1184 KB] g=3, 7 evaluated, 6 expanded
[t=0.0072343s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0072457s, 1184 KB] g=3, 9 evaluated, 8 expanded
[t=0.00732s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0073313s, 1184 KB] g=4, 11 evaluated, 10 expanded
[t=0.0074829s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0075012s, 1184 KB] g=4, 16 evaluated, 15 expanded
[t=0.0076297s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0076407s, 1184 KB] g=5, 21 evaluated, 20 expanded
[t=0.0077256s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0077378s, 1184 KB] g=5, 24 evaluated, 23 expanded
[t=0.0079045s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0079219s, 1184 KB] g=6, 30 evaluated, 29 expanded
[t=0.0079885s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0079999s, 1184 KB] g=6, 32 evaluated, 31 expanded
[t=0.0080712s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0080824s, 1184 KB] g=7, 34 evaluated, 33 expanded
[t=0.0081179s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0081277s, 1184 KB] g=7, 35 evaluated, 34 expanded
[t=0.0082555s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0082675s, 1184 KB] g=8, 40 evaluated, 39 expanded
[t=0.0083042s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0083154s, 1184 KB] g=8, 41 evaluated, 40 expanded
[t=0.0084715s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0084843s, 1184 KB] g=9, 47 evaluated, 46 expanded
[t=0.0085181s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0085281s, 1184 KB] g=9, 48 evaluated, 47 expanded
[t=0.0086812s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0086959s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0087037s, 1184 KB] g=11, 54 evaluated, 53 expanded
[t=0.0087635s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0087753s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0087837s, 1184 KB] g=12, 56 evaluated, 55 expanded
[t=0.0088252s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0088422s, 1184 KB] g=13, 57 evaluated, 56 expanded
[t=0.0088802s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.008892s, 1184 KB] g=14, 58 evaluated, 57 expanded
[t=0.0089546s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0089673s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0089764s, 1184 KB] g=15, 60 evaluated, 59 expanded
[t=0.0090107s, 1184 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0090208s, 1184 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0090291s, 1184 KB] g=16, 61 evaluated, 60 expanded
[t=0.0090626s, 1184 KB] Solution found!
[t=0.0090743s, 1184 KB] Actual search time: 0.0022879s
fly obj17 obj4 obj0 (1)
load obj17 obj7 obj0 (1)
load obj15 obj16 obj4 (1)
load obj15 obj14 obj4 (1)
load obj15 obj13 obj4 (1)
load obj15 obj12 obj4 (1)
fly obj15 obj4 obj0 (1)
unload obj15 obj16 obj0 (1)
unload obj15 obj13 obj0 (1)
fly obj17 obj0 obj2 (1)
load obj17 obj8 obj2 (1)
unload obj17 obj7 obj2 (1)
fly obj17 obj2 obj0 (1)
unload obj17 obj8 obj0 (1)
fly obj15 obj0 obj2 (1)
unload obj15 obj14 obj2 (1)
unload obj15 obj12 obj2 (1)
[t=0.0090815s, 1184 KB] Plan length: 17 step(s).
[t=0.0090815s, 1184 KB] Plan cost: 17
[t=0.0090815s, 1184 KB] Expanded 61 state(s).
[t=0.0090815s, 1184 KB] Reopened 0 state(s).
[t=0.0090815s, 1184 KB] Evaluated 62 state(s).
[t=0.0090815s, 1184 KB] Evaluations: 124
[t=0.0090815s, 1184 KB] Generated 925 state(s).
[t=0.0090815s, 1184 KB] Dead ends: 0 state(s).
[t=0.0090815s, 1184 KB] Number of registered states: 62
[t=0.0090815s, 1184 KB] Int hash set load factor: 62/64 = 0.96875
[t=0.0090815s, 1184 KB] Int hash set resizes: 6
[t=0.0090815s, 1184 KB] Search time: 0.0023264s
[t=0.0090815s, 1184 KB] Total time: 0.0090815s
Solution found.
search exit code: 0

