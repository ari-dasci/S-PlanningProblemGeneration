# Simple script for plotting the problem-size generalization results

import matplotlib.pyplot as plt
import numpy as np

# Data for each domain
# Obtained from the "results.json" file of each experiment
domain = "sokoban"

# Blocksworld
filename_bw = "plot_blocksworld.jpg"
title_bw = "Blocksworld"
X_bw = [15,20,25,30,35,40]
ad_hoc_Y_bw = [83, 230, 475, 812, 18793, 481097]
NeSIG_Y_bw = [[305,1149,2525,38058,1216019,2575845],
               [323,988,4719,114832,486389,1649588],
               [367,1179,2526,101693,449579,2247742],
               [361,1397,3240,213884,2449733,6478995],
               [269,891,1719,20692,353390,3919733]]

# Logistics
filename_lg = "plot_logistics.jpg"
title_lg = "Logistics"
X_lg = [15,20,25,30,35,40]
ad_hoc_Y_lg = [16,33,65,105,1807,19381]
NeSIG_Y_lg = [[70,128,197,264,398,638],
              [74,114,144,185,262,510],
              [82,139,193,273,398,964],
              [78,128,186,256,394,575],
              [76,101,123,163,362,1185]]

# Sokoban
filename_sk = "plot_sokoban.jpg"
title_sk = "Sokoban"
X_sk = ['5x5','5x6','6x6','6x7'] # We don't use 7x7 due to time/memory outs (problems generated by NeSIG are too difficult)
ad_hoc_Y_sk = [1202,109054,620018,585550]
NeSIG_Y_sk = [[236499,10381782,10602888,31859137],
              [285352,11061516,12954086,32311481],
              [118489,1392969,5106929,30682125],
              [226739,9002458,12092686,42751749],
              [350635,2182325,13627397,9326338]]


# ------- New ECAI results with different planners --------

# --- A*+lmcut (number of nodes)
astar_adhoc_bw = [82100,44198091]
astar_adhoc_lg = [104,4065,2031545,13041517]
astar_adhoc_sk = [682,45054,210658,1230572]

astar_nesig_bw = [[1462911,84087411],
                  [8755887,78259797],
                  [6933505,94050029],
                  [9299855,96018119],
                  [2311604,84006893]]
astar_nesig_lg = [[474,6572,3064896,28071712],
                  [149,6602,2042953,48036243],
                  [340,6093,1079865,28045804],
                  [411,5070,4045979,28054589],
                  [212,2322,1029663,12032258]]
astar_nesig_sk = [[1885,19040,139900,4562458],
                  [1540,13902,1269622,4244118],
                  [106,176,5096,77018],
                  [154,1619,1102411,35592],
                  [1838,5465,98331,228171]]

# --- Optimal FDSS (time)
# Timeout -> time=601
fdss_adhoc_bw = [12.9952,363.4667]
fdss_adhoc_lg = [0.23220000000000002,4.2197000000000005,86.34049999999999,185.3231]
fdss_adhoc_sk = [0.28559999999999997,0.8725999999999999,2.6821,4.6107]

fdss_nesig_bw = [[66.6047,515.6984],
                  [162.9068686868687,555.7085],
                  [205.75737373737374,579.5955],
                  [221.3457894736842,595.0014],
                  [46.72787878787878,544.1321212121212]]
fdss_nesig_lg = [[1.1650999999999998,66.6061,361.43980000000005,488.8707],
                  [0.9136999999999997,69.9913,332.3833,512.3571],
                  [0.9267676767676768,56.41420000000001,337.10830000000004,483.0908],
                  [1.1717,56.878,284.01309999999995,444.467],
                  [0.9269000000000002,46.51309999999999,253.7042,327.1666]]
fdss_nesig_sk = [[0.3321,0.5852,2.4363,14.0758],
                  [0.30260000000000004,0.48560000000000003,5.8976,10.7686],
                  [0.29810000000000003,0.3154,0.45480000000000004,1.4792],
                  [0.287,0.34870000000000007,4.0929,1.2993000000000001],
                  [0.3319,0.43770000000000003,2.1502,3.8481]]

# --- Madagascar (m) (time)
# Note: madagascar is incompatible with lg, as it uses existential-preconditions
# Timeout -> time=601

m_adhoc_bw = [0.11510000000000002,0.9431999999999999,13.540300000000002,488.0649000000001]
m_adhoc_sk = [0.1757,3.1299,10.8418,10.9595]

m_nesig_bw = [[0.0956,0.31439999999999996,0.9405999999999999,3.2619],
                  [0.12434343434343437,0.3913,1.2081,4.547299999999998],
                  [0.125959595959596,0.5801999999999999,1.8348,5.3202],
                  [0.13281250000000003,0.5031,1.7556999999999996,8.6639],
                  [0.08555555555555557,0.24900000000000003,0.7482,2.2876]]
m_nesig_sk = [[0.2549,2.0645000000000002,7.5323,56.833],
                  [0.2446,2.0589,15.5717,43.1146],
                  [0.050300000000000004,0.06760000000000001,0.4233,1.1172],
                  [0.0405,0.25189999999999996,11.7629,7.5026],
                  [0.326,0.5514,5.4576,4.4916]]

# Configuration parameters
x_axis_label = "Problem size"
y_axis_label = "Difficulty (log)"

NeSIG_label = "NeSIG"
ad_hoc_label = "ad hoc"
use_log_scale = True

"""
if domain == "blocksworld":
    filename = filename_bw
    title = title_bw
    X = X_bw
    ad_hoc_Y = ad_hoc_Y_bw
    NeSIG_Y = NeSIG_Y_bw

elif domain == "logistics":
    filename = filename_lg
    title = title_lg
    X = X_lg
    ad_hoc_Y = ad_hoc_Y_lg
    NeSIG_Y = NeSIG_Y_lg

elif domain == "sokoban":
    filename = filename_sk
    title = title_sk
    X = X_sk
    ad_hoc_Y = ad_hoc_Y_sk
    NeSIG_Y = NeSIG_Y_sk

else:
    raise Exception("Invalid domain")
"""

# We select the data manually for the new ECAI results
filename = "plot_madagascar_sk.jpg"
title = "Madagascar - Sokoban"
X = ['5x5','5x6','6x6','6x7']
ad_hoc_Y = m_adhoc_sk
NeSIG_Y = m_nesig_sk




# Code
plt.figure()

# Obtain the average NeSIG difficulty among seeds for each problem size
NeSIG_Y_mean = np.array(NeSIG_Y).mean(axis=0).tolist()

# Plotting both series on the same graph
if domain != "sokoban":
    plt.plot(X, NeSIG_Y_mean, label=NeSIG_label, marker='o', color='#ff7f0e')
    plt.plot(X, ad_hoc_Y, label=ad_hoc_label, marker='s', color='#1f77b4')
else: # For sokoban, we use strings as the X values
    plt.plot(range(len(X)), NeSIG_Y_mean, label=NeSIG_label, marker='o', color='#ff7f0e')
    plt.plot(range(len(X)), ad_hoc_Y, label=ad_hoc_label, marker='s', color='#1f77b4')
    plt.xticks(range(len(X)), X)  

# Error bars (for std)
# No, the results with the log scale are bad looking
#plt.errorbar(X, NeSIG_Y, yerr=NeSIG_std, label='NeSIG_label', fmt='-o', capsize=5)
#plt.errorbar(X, ad_hoc_Y, yerr=ad_hoc_std, label='ad_hoc_label', fmt='-o', capsize=5)

# Setting the Y-axis to logarithmic scale
if use_log_scale:
    plt.yscale('log')

# Adding labels and title
plt.xlabel(x_axis_label)
plt.ylabel(y_axis_label)
plt.title(title)
plt.legend()

# Save the plot to a file
plt.savefig(filename, format='jpg', dpi=500)
plt.close()  # Close the plotting window