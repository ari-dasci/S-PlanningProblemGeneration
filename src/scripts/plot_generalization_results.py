# Simple script for plotting the problem-size generalization results

import matplotlib.pyplot as plt
import numpy as np

# Data for each domain
# Obtained from the "results.json" file of each experiment
domain = "sokoban"

# Blocksworld
filename_bw = "plot_blocksworld.jpg"
title_bw = "Blocksworld"
X_bw = [15,20,25,30,35,40]
ad_hoc_Y_bw = [83, 230, 475, 812, 18793, 481097]
NeSIG_Y_bw = [[305,1149,2525,38058,1216019,2575845],
               [323,988,4719,114832,486389,1649588],
               [367,1179,2526,101693,449579,2247742],
               [361,1397,3240,213884,2449733,6478995],
               [269,891,1719,20692,353390,3919733]]

# Logistics
filename_lg = "plot_logistics.jpg"
title_lg = "Logistics"
X_lg = [15,20,25,30,35,40]
ad_hoc_Y_lg = [16,33,65,105,1807,19381]
NeSIG_Y_lg = [[70,128,197,264,398,638],
              [74,114,144,185,262,510],
              [82,139,193,273,398,964],
              [78,128,186,256,394,575],
              [76,101,123,163,362,1185]]

# Sokoban
filename_sk = "plot_sokoban.jpg"
title_sk = "Sokoban"
X_sk = ['5x5','5x6','6x6','6x7'] # We don't use 7x7 due to time/memory outs (problems generated by NeSIG are too difficult)
ad_hoc_Y_sk = [1202,109054,620018,585550]
NeSIG_Y_sk = [[236499,10381782,10602888,31859137],
              [285352,11061516,12954086,32311481],
              [118489,1392969,5106929,30682125],
              [226739,9002458,12092686,42751749],
              [350635,2182325,13627397,9326338]]

# Configuration parameters
x_axis_label = "Problem size"
y_axis_label = "Difficulty (log)"

NeSIG_label = "NeSIG"
ad_hoc_label = "ad hoc"
use_log_scale = True

if domain == "blocksworld":
    filename = filename_bw
    title = title_bw
    X = X_bw
    ad_hoc_Y = ad_hoc_Y_bw
    NeSIG_Y = NeSIG_Y_bw

elif domain == "logistics":
    filename = filename_lg
    title = title_lg
    X = X_lg
    ad_hoc_Y = ad_hoc_Y_lg
    NeSIG_Y = NeSIG_Y_lg

elif domain == "sokoban":
    filename = filename_sk
    title = title_sk
    X = X_sk
    ad_hoc_Y = ad_hoc_Y_sk
    NeSIG_Y = NeSIG_Y_sk

else:
    raise Exception("Invalid domain")

# Code
plt.figure()

# Obtain the average NeSIG difficulty among seeds for each problem size
NeSIG_Y_mean = np.array(NeSIG_Y).mean(axis=0).tolist()

# Plotting both series on the same graph
if domain != "sokoban":
    plt.plot(X, NeSIG_Y_mean, label=NeSIG_label, marker='o', color='#ff7f0e')
    plt.plot(X, ad_hoc_Y, label=ad_hoc_label, marker='s', color='#1f77b4')
else: # For sokoban, we use strings as the X values
    plt.plot(range(len(X)), NeSIG_Y_mean, label=NeSIG_label, marker='o', color='#ff7f0e')
    plt.plot(range(len(X)), ad_hoc_Y, label=ad_hoc_label, marker='s', color='#1f77b4')
    plt.xticks(range(len(X)), X)  

# Error bars (for std)
# No, the results with the log scale are bad looking
#plt.errorbar(X, NeSIG_Y, yerr=NeSIG_std, label='NeSIG_label', fmt='-o', capsize=5)
#plt.errorbar(X, ad_hoc_Y, yerr=ad_hoc_std, label='ad_hoc_label', fmt='-o', capsize=5)

# Setting the Y-axis to logarithmic scale
if use_log_scale:
    plt.yscale('log')

# Adding labels and title
plt.xlabel(x_axis_label)
plt.ylabel(y_axis_label)
plt.title(title)
plt.legend()

# Save the plot to a file
plt.savefig(filename, format='jpg', dpi=500)
plt.close()  # Close the plotting window