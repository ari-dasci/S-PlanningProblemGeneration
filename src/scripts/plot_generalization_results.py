# Simple script for plotting the problem-size generalization results

import matplotlib.pyplot as plt
import numpy as np

# Data for each domain
# Obtained from the "results.json" file of each experiment
domain = "sokoban"

# ---- ECAI old results ----
# Difficulty is the mean between nodes expanded by lama-first, lazy-greedy-ff and lazy-greedy-add

# Blocksworld
filename_bw = "plot_blocksworld.jpg"
title_bw = "Blocksworld"
X_bw = [10,15,20,25,30,35,40]
ad_hoc_Y_bw = [26.189999999999998, 83, 230, 475, 812, 18793, 481097]
NeSIG_Y_bw = [[78.09756097560977,305,1149,2525,38058,1216019,2575845],
               [94.91760299625469,323,988,4719,114832,486389,1649588],
               [84.85135135135135,367,1179,2526,101693,449579,2247742],
               [74.06462585034014,361,1397,3240,213884,2449733,6478995],
               [90.6376811594203,269,891,1719,20692,353390,3919733]]

# Logistics
filename_lg = "plot_logistics.jpg"
title_lg = "Logistics"
X_lg = [10,15,20,25,30,35,40]
ad_hoc_Y_lg = [7.206666666666667,16,33,65,105,1807,19381]
NeSIG_Y_lg = [[20.15770609318996,70,128,197,264,398,638],
              [26.39784946236559,74,114,144,185,262,510],
              [24.02105263157895,82,139,193,273,398,964],
              [31.42652329749104,78,128,186,256,394,575],
              [20.037037037037035,76,101,123,163,362,1185]]

# Sokoban
filename_sk = "plot_sokoban.jpg"
title_sk = "Sokoban"
"""
# Old results: sizes 5x5,5x6,6x6,6x7
X_sk = ['5x5','5x6','6x6','6x7'] 
ad_hoc_Y_sk = [1202,109054,620018,585550]
NeSIG_Y_sk = [[236499,10381782,10602888,31859137],
              [285352,11061516,12954086,32311481],
              [118489,1392969,5106929,30682125],
              [226739,9002458,12092686,42751749],
              [350635,2182325,13627397,9326338]]
"""
X_sk = ['4x4','5x5','6x6','7x7'] 
ad_hoc_Y_sk = [12.43,1202,620018,947552]
NeSIG_Y_sk = [[209.35999999999999,236499,10602888,22885866],
              [207.94333333333336,285352,12954086,49448195],
              [207.92,118489,5106929,42884392],
              [148.24333333333334,226739,12092686,45552792],
              [325.69,350635,13627397,25081001]]

# ------- New ECAI results with different planners --------

# --- A*+lmcut (number of nodes)
astar_adhoc_bw = [112.45,81597.07,35599534.22,82094653.74]
# astar_adhoc_bw = [82100,44198091] # OLD
astar_adhoc_lg = [6.46,104,4065,2031545,13041517]
# OLD RESULTS
#astar_adhoc_sk = [682,45054,210658,1230572]
astar_adhoc_sk = [10.54, 682.73, 210658.58, 3140500.65]

"""
# OLD RESULTS
astar_nesig_bw = [[1462911,84087411],
                  [8755887,78259797],
                  [6933505,94050029],
                  [9299855,96018119],
                  [2311604,84006893]]"""
astar_nesig_bw = [[1840.5978260869565, 8755887.565656565, 77351551.99, 94013088.09],
                  [873.6734693877551, 1462911.41, 82272346.15, 100000000.0],
                  [1933.370786516854, 6933505.474747474, 91248436.61, 100000000.0],
                  [1646.418918918919, 8254446.895833333, 96018119.06, 98011369.6],
                  [835.109756097561, 2311604.121212121, 72849183.53, 99000062.13]]
astar_nesig_lg = [[17.548387096774192,474,6572,3064896,28071712],
                  [18.397849462365592,149,6602,2042953,48036243],
                  [16.31578947368421,340,6093,1079865,28045804],
                  [17.688172043010752,411,5070,4045979,28054589],
                  [16.82716049382716,212,2322,1029663,12032258]]

# OLD RESULTS
"""
astar_nesig_sk = [[1885,19040,139900,4562458],
                  [1540,13902,1269622,4244118],
                  [106,176,5096,77018],
                  [154,1619,1102411,35592],
                  [1838,5465,98331,228171]]"""

astar_nesig_sk = [[26.67, 154.03, 1102411.03, 2143622.0],
                  [19.6, 106.79, 5096.28, 74537.68],
                  [40.36, 1885.52, 139900.67, 2161123.74],
                  [40.18, 1540.24, 1269622.61, 13258832.38],
                  [31.74, 1838.37, 98331.68, 4110026.09]]

# --- Optimal FDSS (time)
# Timeout -> time=601
fdss_adhoc_bw = [0.2507, 21.063200000000005, 905.5528999999998, 1574.5355]
# fdss_adhoc_bw = [12.9952,363.4667] # OLD
fdss_adhoc_lg = [0.21010000000000012,0.23220000000000002,4.2197000000000005,86.34049999999999,185.3231]
# OLD RESULTS
#fdss_adhoc_sk = [0.28559999999999997,0.8725999999999999,2.6821,4.6107]
fdss_adhoc_sk = [0.2274, 0.29580000000000006, 2.7208000000000014, 9.0954]

"""
# OLD RESULTS
fdss_nesig_bw = [[66.6047,515.6984],
                  [162.9068686868687,555.7085],
                  [205.75737373737374,579.5955],
                  [221.3457894736842,595.0014],
                  [46.72787878787878,544.1321212121212]]"""
fdss_nesig_bw = [[0.2850000000000001, 188.49575757575744, 1453.1503999999998, 1729.1388],
                 [0.23388265306122447, 34.15800000000001, 1518.225, 1801.0],
                 [0.29224719101123603, 160.95868686868693, 1696.9431, 1801.0],
                 [0.2672972972972973, 203.16062604166655, 1733.2708000000002, 1784.3516],
                 [0.27573170731707314, 46.09444444444442, 1572.3892010000002, 1783.0086]]
fdss_nesig_lg = [[0.21827956989247327,1.1650999999999998,66.6061,361.43980000000005,488.8707],
                 [0.21698924731182803,0.9136999999999997,69.9913,332.3833,512.3571],
                 [0.21484210526315797,0.9267676767676768,56.41420000000001,337.10830000000004,483.0908],
                 [0.21612903225806473,1.1717,56.878,284.01309999999995,444.467],
                 [0.21839506172839526,0.9269000000000002,46.51309999999999,253.7042,327.1666]]
"""
# OLD RESULTS
fdss_nesig_sk = [[0.3321,0.5852,2.4363,14.0758],
                  [0.30260000000000004,0.48560000000000003,5.8976,10.7686],
                  [0.29810000000000003,0.3154,0.45480000000000004,1.4792],
                  [0.287,0.34870000000000007,4.0929,1.2993000000000001],
                  [0.3319,0.43770000000000003,2.1502,3.8481]]"""
fdss_nesig_sk = [[0.23860000000000003, 0.2895, 4.072600000000001, 5.959100000000002],
                 [0.22729999999999997, 0.2932999999999999, 0.4389, 2.584599999999999],
                 [0.23410000000000009, 0.31969999999999993, 2.4933, 12.848199999999993],
                 [0.2569999999999999, 0.30039999999999994, 5.771799999999998, 51.227799999999995],
                 [0.26789999999999997, 0.3136, 2.1626000000000003, 12.296000000000008]]

# --- Madagascar (m) (time)
# Note: madagascar is incompatible with lg, as it uses existential-preconditions
# Timeout -> time=601

m_adhoc_bw = [0.11510000000000002,0.9431999999999999,13.540300000000002,488.0649000000001]
m_adhoc_sk = [0.1757,3.1299,10.8418,10.9595]

m_nesig_bw = [[0.0956,0.31439999999999996,0.9405999999999999,3.2619],
                  [0.12434343434343437,0.3913,1.2081,4.547299999999998],
                  [0.125959595959596,0.5801999999999999,1.8348,5.3202],
                  [0.13281250000000003,0.5031,1.7556999999999996,8.6639],
                  [0.08555555555555557,0.24900000000000003,0.7482,2.2876]]
m_nesig_sk = [[0.2549,2.0645000000000002,7.5323,56.833],
                  [0.2446,2.0589,15.5717,43.1146],
                  [0.050300000000000004,0.06760000000000001,0.4233,1.1172],
                  [0.0405,0.25189999999999996,11.7629,7.5026],
                  [0.326,0.5514,5.4576,4.4916]]


# ---- AIJ results ----

# --- LAMA-FIRST (number of nodes)

# Blocksworld
lama_X_bw = [10,15,20,25,30,35,40]
lama_adhoc_bw = [26.13, 80.17, 234.81, 452.11, 776.84, 1637.04, 140930.29]
lama_nesig_bw = [[95.1829268292683, 359.62626262626264, 968.23, 1898.36, 4298.7, 96416.4, 2520744.13],
               [111.11235955056179, 435.09090909090907, 1313.48, 2969.49, 42731.52, 333799.29, 1886262.7],
               [101.63513513513513, 439.6666666666667, 1749.25, 3087.8, 90457.8, 1498979.45, 7059055.76],
               [90.76530612244898, 398.78, 1603.98, 2615.19, 11614.84, 1242414.53, 2854703.62],
               [103.05434782608695, 334.47474747474746, 760.76, 1457.11, 3190.57, 6710.36, 666906.06]]

# Logistics
lama_X_lg = [10,15,20,25,30,35,40]
lama_adhoc_lg = [7.29, 16.66, 35.66, 65.94, 80.38, 143.8, 196.74]
lama_nesig_lg = [[20.913978494623656, 74.61, 141.45, 217.51, 280.75, 423.07, 442.49],
               [26.096774193548388, 82.54, 143.68, 193.92, 279.06, 381.91, 536.46],
               [24.694736842105264, 81.3, 103.56, 125.79, 158.47, 256.7040816326531, 270.3],
               [32.02150537634409, 81.75757575757575, 122.45, 154.87, 176.93, 246.89, 302.11],
               [20.839506172839506, 86.13, 138.8, 203.22, 272.2, 335.49, 403.32]]

# Sokoban
lama_X_sk = ['4x4','5x5','6x6','7x7'] 
lama_adhoc_sk = [10.78, 1483.05, 982966.92, 1075268.61]
lama_nesig_sk = [[221.65, 477819.17, 14105510.06, 24936926.32],
               [218.28, 310158.67, 12996358.11, 50579589.49],
               [250.83, 363733.87, 14528473.49, 43985677.39],
               [149.55, 137967.33, 6104759.29, 49254147.7],
               [388.55, 306526.21, 12297151.33, 26610519.86]]



# --- Lazy-greedy-ff (number of nodes)

# Blocksworld
ff_X_bw = [10,15,20,25,30,35,40]
ff_adhoc_bw = [24.25, 81.15, 204.49, 424.4, 767.0, 52981.14, 1298584.83]
ff_nesig_bw = [[70.3048780487805, 231.26262626262627, 990.72, 1674.82, 52174.89, 947203.68, 5748118.9],
               [86.1685393258427, 351.2020202020202, 1095.37, 2345.54, 253202.85, 1001478.32, 4834451.8],
               [75.44594594594595, 329.75, 1197.96, 3904.92, 534983.99, 5811118.73, 11492193.67],
               [65.90816326530613, 270.47, 1006.88, 3182.55, 95562.96, 2380679.61, 4845924.08],
               [83.29347826086956, 323.979797979798, 1105.49, 10330.93, 328837.47, 1423117.09, 4221734.73]]

# Logistics
ff_X_lg = [10,15,20,25,30,35,40]
ff_adhoc_lg = [7.15, 15.75, 30.87, 57.16, 64.19, 135.97, 56602.54]
ff_nesig_lg = [[19.086021505376344, 64.86, 118.17, 190.17, 274.13, 445.15, 1096.45],
               [25.9247311827957, 77.86, 132.53, 188.15, 263.83, 436.57, 1764.77],
               [23.326315789473686, 70.57, 96.65, 121.52, 192.96, 613.704081632653, 3069.44],
               [30.612903225806452, 67.66666666666667, 115.88, 144.09, 233.64, 374.73, 993.16],
                [18.88888888888889, 71.33, 123.87, 188.7, 275.39, 403.12, 1030.14]]

# Sokoban
ff_X_sk = ['4x4','5x5','6x6','7x7'] 
ff_adhoc_sk = [16.32, 1305.48, 527271.29, 1311740.25]
ff_nesig_sk = [[222.29, 412788.62, 14889389.9, 24419924.67],
               [267.34, 231803.67, 13115210.12, 51241357.61],
               [240.99, 311869.68, 12411673.61, 43600419.8],
               [195.69, 174356.27, 4745714.9, 46556220.44],
               [392.77, 244079.34, 10189839.44, 26537741.93]]




# Configuration parameters
x_axis_label = "Problem size"
y_axis_label = "Difficulty (log)"

NeSIG_label = "NeSIG"
ad_hoc_label = "ad hoc"
use_log_scale = True

"""
if domain == "blocksworld":
    filename = filename_bw
    title = title_bw
    X = X_bw
    ad_hoc_Y = ad_hoc_Y_bw
    NeSIG_Y = NeSIG_Y_bw

elif domain == "logistics":
    filename = filename_lg
    title = title_lg
    X = X_lg
    ad_hoc_Y = ad_hoc_Y_lg
    NeSIG_Y = NeSIG_Y_lg

elif domain == "sokoban":
    filename = filename_sk
    title = title_sk
    X = X_sk
    ad_hoc_Y = ad_hoc_Y_sk
    NeSIG_Y = NeSIG_Y_sk

else:
    raise Exception("Invalid domain")
"""

# We select the data manually for the new results
filename = "plot_sk_lama.jpg"
title = "LAMA - Sokoban"
X = lama_X_sk
ad_hoc_Y = lama_adhoc_sk
NeSIG_Y = lama_nesig_sk




# Code
plt.figure()

# Obtain the average NeSIG difficulty among seeds for each problem size
NeSIG_Y_mean = np.array(NeSIG_Y).mean(axis=0).tolist()

# Plotting both series on the same graph
if domain != "sokoban":
    plt.plot(X, NeSIG_Y_mean, label=NeSIG_label, marker='o', color='#ff7f0e')
    plt.plot(X, ad_hoc_Y, label=ad_hoc_label, marker='s', color='#1f77b4')
else: # For sokoban, we use strings as the X values
    plt.plot(range(len(X)), NeSIG_Y_mean, label=NeSIG_label, marker='o', color='#ff7f0e')
    plt.plot(range(len(X)), ad_hoc_Y, label=ad_hoc_label, marker='s', color='#1f77b4')
    plt.xticks(range(len(X)), X)  

# Error bars (for std)
# No, the results with the log scale are bad looking
#plt.errorbar(X, NeSIG_Y, yerr=NeSIG_std, label='NeSIG_label', fmt='-o', capsize=5)
#plt.errorbar(X, ad_hoc_Y, yerr=ad_hoc_std, label='ad_hoc_label', fmt='-o', capsize=5)

# Setting the Y-axis to logarithmic scale
if use_log_scale:
    plt.yscale('log')

# Adding labels and title
plt.xlabel(x_axis_label)
plt.ylabel(y_axis_label)
plt.title(title)
plt.legend()

# Save the plot to a file
plt.savefig(filename, format='jpg', dpi=500)
plt.close()  # Close the plotting window