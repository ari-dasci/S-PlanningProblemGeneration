- Sokoban generator pddl generators
	- No puede generar problemas de tamaño 5x5 con más de dos bloques
	- Es un generador random!!!

- Procedural Generation of Sokoban Levels (Taylor et al 2011)
	- Basado en plantillas de casillas 3x3 -> muy rígido, no puede generar tantos tipos de problemas
	  distintos como NeSIG. Por ejemplo: no puede generar 5x5 ni 7x7, solo 6x6, 9x9, etc.
	- Intenta maximizar dificultad

- Automatic Making of Sokoban Problems
	- Puede generar problemas irresolubles. Por tanto, checkea los problemas generados con un algoritmo
	  de búsqueda, para asegurarse de que son resolubles.
	  Además, también usan templates.

- Procedural Generation of Initial States of Sokoban
	- No genera problemas completos sino que, dado el objetivo (posición final de las cajas junto con
	  el tamaño del mapa y posición de los muros), genera estados iniciales novedosos y difíciles

>>> Data-Driven Sokoban Puzzle Generation with Monte Carlo Tree Search
	- Generan problemas completos (initial state + goal) mediante un algoritmo de búsqueda (MCTS)
	  guiado por una función de evaluación en base a unas hardcoded features (como una domain-dependent
	  heuristic)
	- Intenta optimizar dificultad y, para generar problemas diversos, generan problemas de distintas dificultades
	- Creo que se puede establecer el tamaño del mapa


-------------------------------------------


> El sokoban generator de pddl-generators (github.com/AI-Planning/pddl-generators/tree/main/sokoban/random)
  es aleatorio!!!!

> Por tanto, como no es capaz de generar problemas con cierto número de cajas, voy a crear un generador
  aleatorio que "imita" el comportamiento de este generador pero sí es más flexible
  	- Básicamente, puedo argumentar que mi generador es equivalente al sokoban instance generator de pddl-generators,
  	  el cual se usó en la IPC2008

> No obstante, en sokoban <sí existen instance generators que optimizan la dificultad> -> VER SI, ADEMÁS DE COMPARAR
  CON EL RANDOM INSTANCE GENERATOR, DEBERÍA COMPARAR CON OTRO INSTANCE GENERATOR ADICIONAL QUE OPTIMICE LA DIFICULTAD!!!
  	- Comparar con Data-Driven Sokoban Puzzle Generation with Monte Carlo Tree Search, modificándolo para que genere
  	  problemas del tamaño que yo quiero -> Debería pedirles el código a los autores, ya que no aparece en el paper