-------------------------- TODO

>> Experimentos blocksworld

   -Debería probar más hiperparámetros distintos en blocksworld
    Realicé pruebas en logistics y después usé los mismos hiperparámetros en blocksworld!!


>> Experimentos logistics
   
   - Ver si puedo generar problemas con varias ciudades en logistics sin tener que fijar <min_cities=2>

   > Mejorar generalización y diversidad logistics - Varias alternativas

      >>> Objetivo actual: hacer que se generen problemas con locations y donde la goal_policy
          use tanto la acción fly como drive (para así generar problemas diversos y posiblemente
          generalizar mejor). También se deberían generar problemas con más de dos ciudades (para que
          escale conforme aumentamos el tamaño de problema)

      - Probar distintos valores de init y goal_policy entropy
         - También aumentar la entropía de la goal_policy para ver si así no "converge prematuramente"
           y aprende a usar tanto la acción drive como fly

      - Entrenar sobre problemas más grandes (20 átomos)
         - Quizás se generan problemas sin locations porque, para problemas pequeños, esos son los más
           difíciles

      - Probar a normalizar num_atoms y num_objs cada tipo dados como input a la NLM por el número
        actual de átomos en vez del número máximo

      - Añadir reduce operation a la NLM (suma de proporciones) para que aprenda a contar

      - Aumentar la complejidad de la NLM

      - Diversity reward
         - Creo que la action entropy no es una buena forma de motivar la diversidad (se pueden generar
           los mismos problemas añadiendo los átomos en un orden distinto)
         - Probar distintos coeficientes
         - Tener también en cuenta el num de atoms instanciados en cada tipo de obj
         - Probar también a tener en cuenta el goal del problema (comparar los init states y goal states
           de los problemas)

      - Entrenar en problemas de distintos tamaños
         - Normalizar dificultad de manera separada para cada tamaño de problema

      >> El número de objetos generados con action_entropy_coeffs=0.1 y 1 son muy parecidos!!!
         - Esto parece indicar que esta forma de generar problemas es la que maximiza la dificultad!
            - Si esto es el caso, quizás esté haciendo overfitting a un tamaño de problemas ->
              debería entrenar en problemas de distintos tamaños, para que aprenda a generalizar

         - Opción 2: quizás el problema es la goal policy (al no tener action_entropy_coeff, converge demasiado
           pronto)
            - Debería hacer experimentos usando goal_policy entropy_coeff

         - Opción 3: quizás la NLM no puede aprender "patrones" para generar problemas más complejos
            - Aumentar el número de capas/predicados
            - Añadir counting operations en reduce para que aprenda a contar

>> Consistency language
   
   - Mirar pyprover y ver si lo uso
      - Creo que sí funciona!! (tener cuidado de usar & en vez de "and" y los predicados ponerlos en mayúsculas, mientras que las constantes y variables en minúsculas)
      - Creo que tiene bugs y a veces va muy lento (mirar issue en github)

      - Si creo yo el código, creo que no debería crear un repositorio -> no serviría para hacer logic programming sino solo para evaluar una FOL formula
        dada una PDDL knowledge base, compuesta simplemente de átomos (pero no de fórmulas más complejas)


>> Diversity measurements

   >>> No usar características de Cenamor et al. (son menos características que las que yo ya venía usando)

   - Ver si uso las planning features de Improved Features for Runtime Prediction... o, si los resultados
     no son muy buenos (ej.: la mayoría de features no se pueden extraer para blocksworld), usar las features
     que uso para diversity reward (que además son fáciles de entender)

-------------------------- Next steps

>>> No se generan de manera "natural" problemas con locations. Dos posibilidades:
   - Los problemas más difíciles para tamaños pequeños de problema (<20 átomos)
     no tienen locations
      - Solución: usar diversity reward ("obligar" a la NLM a generar problemas con
                  locations aunque no sean tan difíciles, para que así generalice mejor)

   - La NLM no es suficientemente expresiva para aprender a generar problemas difíciles
     usando locations
      - Solución: aumentar NLM expressivity con counting quantifiers y más predicados








1. Encontrar un buen valor de action entropy para logistics
   - Quiero ver si al usar goal_action entropy la goal policy aprende a usar tanto acciones drive
     como fly -> NO

2. Probar a entrenar sobre problemas con 20 átomos, para ver si mejora la generalización
   - Quiero ver si en problemas con 20 átomos el tipo de problema que maximiza la dificultad
     es igual que con 15 átomos o cambia algo. También ver si generaliza mejor.
   NO -> generaliza igual de mal y los problemas son del mismo tipo que con 15 átomos.
   Entrenar en 15 átomos no cambia nada!

3. Probar diversity reward.
   - Quiero que se generen problemas con más de dos ciudades y con locations -> sí (para diversity_rescale_factor=10)

   >>> VER CÓMO MEJORAR DIVERSITY REWARD
      - Tener en cuenta no solo el número (proporción) de objetos y átomos de cada tipo sino también cómo se relacionan!!!



4. Aumentar la expresividad de la NLM
   - Añadir counting quantifiers
   - Aumentar número de predicados a 16

5. Entrenar sobre problemas de varios tamaños
